
Themometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000604c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080061e0  080061e0  000161e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f0  080064f0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f8  080064f8  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08006500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001e0  080066e0  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  080066e0  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd99  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002193  00000000  00000000  0002dfa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00030140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b18  00000000  00000000  00030d70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005ea1  00000000  00000000  00031888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003a94  00000000  00000000  00037729  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003b1bd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003f74  00000000  00000000  0003b238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061c4 	.word	0x080061c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	080061c4 	.word	0x080061c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <__NVIC_GetPriorityGrouping+0x18>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	f003 0307 	and.w	r3, r3, #7
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	db0b      	blt.n	8000f8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f003 021f 	and.w	r2, r3, #31
 8000f7c:	4907      	ldr	r1, [pc, #28]	; (8000f9c <__NVIC_EnableIRQ+0x38>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	2001      	movs	r0, #1
 8000f86:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000e100 	.word	0xe000e100

08000fa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	db0a      	blt.n	8000fca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	490c      	ldr	r1, [pc, #48]	; (8000fec <__NVIC_SetPriority+0x4c>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	0112      	lsls	r2, r2, #4
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	440b      	add	r3, r1
 8000fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc8:	e00a      	b.n	8000fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4908      	ldr	r1, [pc, #32]	; (8000ff0 <__NVIC_SetPriority+0x50>)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	3b04      	subs	r3, #4
 8000fd8:	0112      	lsls	r2, r2, #4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	440b      	add	r3, r1
 8000fde:	761a      	strb	r2, [r3, #24]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	f1c3 0307 	rsb	r3, r3, #7
 800100e:	2b04      	cmp	r3, #4
 8001010:	bf28      	it	cs
 8001012:	2304      	movcs	r3, #4
 8001014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3304      	adds	r3, #4
 800101a:	2b06      	cmp	r3, #6
 800101c:	d902      	bls.n	8001024 <NVIC_EncodePriority+0x30>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3b03      	subs	r3, #3
 8001022:	e000      	b.n	8001026 <NVIC_EncodePriority+0x32>
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43da      	mvns	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	401a      	ands	r2, r3
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103c:	f04f 31ff 	mov.w	r1, #4294967295
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	43d9      	mvns	r1, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800104c:	4313      	orrs	r3, r2
         );
}
 800104e:	4618      	mov	r0, r3
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_I2C_Disable>:
  * @rmtoll CR1          PE            LL_I2C_Disable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Disable(I2C_TypeDef *I2Cx)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f023 0201 	bic.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010ee:	f023 0306 	bic.w	r3, r3, #6
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	431a      	orrs	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	60da      	str	r2, [r3, #12]
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b02      	cmp	r3, #2
 800113c:	d101      	bne.n	8001142 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b04      	cmp	r3, #4
 8001162:	d101      	bne.n	8001168 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b20      	cmp	r3, #32
 8001188:	d101      	bne.n	800118e <LL_I2C_IsActiveFlag_STOP+0x18>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <LL_I2C_IsActiveFlag_STOP+0x1a>
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f043 0220 	orr.w	r2, r3, #32
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	61da      	str	r2, [r3, #28]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	605a      	str	r2, [r3, #4]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	0d5b      	lsrs	r3, r3, #21
 80011f2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <LL_I2C_HandleTransfer+0x48>)
 80011f8:	430b      	orrs	r3, r1
 80011fa:	43db      	mvns	r3, r3
 80011fc:	401a      	ands	r2, r3
 80011fe:	68b9      	ldr	r1, [r7, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4319      	orrs	r1, r3
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	4319      	orrs	r1, r3
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4319      	orrs	r1, r3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	430b      	orrs	r3, r1
 8001212:	431a      	orrs	r2, r3
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	03ff7bff 	.word	0x03ff7bff

08001228 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	460b      	mov	r3, r1
 800124c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <LL_RCC_HSI_Enable+0x1c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <LL_RCC_HSI_Enable+0x1c>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <LL_RCC_HSI_IsReady+0x24>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001290:	d101      	bne.n	8001296 <LL_RCC_HSI_IsReady+0x16>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_RCC_HSI_IsReady+0x18>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	061b      	lsls	r3, r3, #24
 80012bc:	4904      	ldr	r1, [pc, #16]	; (80012d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80012be:	4313      	orrs	r3, r2
 80012c0:	604b      	str	r3, [r1, #4]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <LL_RCC_SetSysClkSource+0x24>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f023 0203 	bic.w	r2, r3, #3
 80012e4:	4904      	ldr	r1, [pc, #16]	; (80012f8 <LL_RCC_SetSysClkSource+0x24>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
}
 80012ec:	bf00      	nop
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000

080012fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <LL_RCC_GetSysClkSource+0x18>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 030c 	and.w	r3, r3, #12
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000

08001318 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <LL_RCC_SetAHBPrescaler+0x24>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001328:	4904      	ldr	r1, [pc, #16]	; (800133c <LL_RCC_SetAHBPrescaler+0x24>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40021000 	.word	0x40021000

08001340 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <LL_RCC_SetAPB1Prescaler+0x24>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001350:	4904      	ldr	r1, [pc, #16]	; (8001364 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	608b      	str	r3, [r1, #8]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40021000 	.word	0x40021000

08001368 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001378:	4904      	ldr	r1, [pc, #16]	; (800138c <LL_RCC_SetAPB2Prescaler+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	608b      	str	r3, [r1, #8]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000

08001390 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <LL_RCC_SetUSARTClockSource+0x30>)
 800139a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	43db      	mvns	r3, r3
 80013a4:	401a      	ands	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	4905      	ldr	r1, [pc, #20]	; (80013c0 <LL_RCC_SetUSARTClockSource+0x30>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000

080013c4 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0e1a      	lsrs	r2, r3, #24
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <LL_RCC_SetI2CClockSource+0x4c>)
 80013d2:	4413      	add	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	f003 031f 	and.w	r3, r3, #31
 80013e2:	2103      	movs	r1, #3
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2d9      	uxtb	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0c1b      	lsrs	r3, r3, #16
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40021088 	.word	0x40021088

08001414 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <LL_RCC_PLL_Enable+0x1c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <LL_RCC_PLL_Enable+0x1c>)
 800141e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001422:	6013      	str	r3, [r2, #0]
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40021000 	.word	0x40021000

08001434 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <LL_RCC_PLL_IsReady+0x24>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001440:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001444:	d101      	bne.n	800144a <LL_RCC_PLL_IsReady+0x16>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_RCC_PLL_IsReady+0x18>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001470:	4013      	ands	r3, r2
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	4311      	orrs	r1, r2
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	0212      	lsls	r2, r2, #8
 800147c:	4311      	orrs	r1, r2
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	4904      	ldr	r1, [pc, #16]	; (8001494 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001488:	bf00      	nop
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	f9ff808c 	.word	0xf9ff808c

0800149c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80014a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014aa:	60d3      	str	r3, [r2, #12]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000

080014bc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014c8:	4907      	ldr	r1, [pc, #28]	; (80014e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80014d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4013      	ands	r3, r2
 80014d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000

080014ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001502:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4013      	ands	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800150a:	68fb      	ldr	r3, [r7, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	40021000 	.word	0x40021000

0800151c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001526:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <LL_APB2_GRP1_EnableClock+0x2c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <LL_FLASH_SetLatency+0x24>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 0207 	bic.w	r2, r3, #7
 800155c:	4904      	ldr	r1, [pc, #16]	; (8001570 <LL_FLASH_SetLatency+0x24>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40022000 	.word	0x40022000

08001574 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <LL_FLASH_GetLatency+0x18>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
}
 8001580:	4618      	mov	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80015a0:	4904      	ldr	r1, [pc, #16]	; (80015b4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40007000 	.word	0x40007000

080015b8 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f023 0210 	bic.w	r2, r3, #16
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	605a      	str	r2, [r3, #4]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <LL_SPI_EnableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f043 0208 	orr.w	r2, r3, #8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	605a      	str	r2, [r3, #4]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
 8001606:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	405a      	eors	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	615a      	str	r2, [r3, #20]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <__io_putchar>:
#define INC_PRINTF_RETARGET_H_

#endif /* INC_PRINTF_RETARGET_H_ */

/* (Re)Define stdio functionality, so printf would output to USART1 */
int __io_putchar(int ch) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &c[0], 1, 100);
 800164a:	f107 010c 	add.w	r1, r7, #12
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	2201      	movs	r2, #1
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <__io_putchar+0x28>)
 8001654:	f001 f8a6 	bl	80027a4 <HAL_UART_Transmit>
 return ch;
 8001658:	687b      	ldr	r3, [r7, #4]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000218 	.word	0x20000218

08001668 <_write>:

int _write(int file,char *ptr, int len) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e009      	b.n	800168e <_write+0x26>
  __io_putchar(*ptr++);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ffda 	bl	800163c <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++) {
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	dbf1      	blt.n	800167a <_write+0x12>
 }
 return len;
 8001696:	687b      	ldr	r3, [r7, #4]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a6:	f000 fc30 	bl	8001f0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016aa:	f000 f909 	bl	80018c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ae:	f000 fa85 	bl	8001bbc <MX_GPIO_Init>
  MX_I2C1_Init();
 80016b2:	f000 f959 	bl	8001968 <MX_I2C1_Init>
  MX_SPI1_Init();
 80016b6:	f000 f9eb 	bl	8001a90 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80016ba:	f000 fa4f 	bl	8001b5c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Timeout = I2C_SEND_TIMEOUT_TXIS_MS;
 80016be:	4b3e      	ldr	r3, [pc, #248]	; (80017b8 <main+0x118>)
 80016c0:	2205      	movs	r2, #5
 80016c2:	601a      	str	r2, [r3, #0]
 
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_I2C1_Init();
 80016c4:	f000 f950 	bl	8001968 <MX_I2C1_Init>
	  read_sht();
 80016c8:	f000 f882 	bl	80017d0 <read_sht>
      uint16_t TemperatureRaw 	= (ReceiveBuffer[0]<<8)+(ReceiveBuffer[1]<<0);
 80016cc:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <main+0x11c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b39      	ldr	r3, [pc, #228]	; (80017bc <main+0x11c>)
 80016d8:	785b      	ldrb	r3, [r3, #1]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4413      	add	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
      uint16_t RelHumidityRaw 	= (ReceiveBuffer[3]<<8)+(ReceiveBuffer[4]<<0);
 80016e0:	4b36      	ldr	r3, [pc, #216]	; (80017bc <main+0x11c>)
 80016e2:	78db      	ldrb	r3, [r3, #3]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <main+0x11c>)
 80016ec:	791b      	ldrb	r3, [r3, #4]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	80bb      	strh	r3, [r7, #4]
      //Send Data to UART
      tempc =	((float) TemperatureRaw) * 0.00267033 - 45.;
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe ff21 	bl	8000548 <__aeabi_f2d>
 8001706:	a328      	add	r3, pc, #160	; (adr r3, 80017a8 <main+0x108>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff74 	bl	80005f8 <__aeabi_dmul>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <main+0x120>)
 800171e:	f7fe fdb3 	bl	8000288 <__aeabi_dsub>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	4618      	mov	r0, r3
 8001728:	4621      	mov	r1, r4
 800172a:	f7ff fa3d 	bl	8000ba8 <__aeabi_d2f>
 800172e:	4602      	mov	r2, r0
 8001730:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <main+0x124>)
 8001732:	601a      	str	r2, [r3, #0]
      humi =	((float) RelHumidityRaw) * 0.0015259;
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173e:	ee17 0a90 	vmov	r0, s15
 8001742:	f7fe ff01 	bl	8000548 <__aeabi_f2d>
 8001746:	a31a      	add	r3, pc, #104	; (adr r3, 80017b0 <main+0x110>)
 8001748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174c:	f7fe ff54 	bl	80005f8 <__aeabi_dmul>
 8001750:	4603      	mov	r3, r0
 8001752:	460c      	mov	r4, r1
 8001754:	4618      	mov	r0, r3
 8001756:	4621      	mov	r1, r4
 8001758:	f7ff fa26 	bl	8000ba8 <__aeabi_d2f>
 800175c:	4602      	mov	r2, r0
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <main+0x128>)
 8001760:	601a      	str	r2, [r3, #0]
      printf("%.1f%.1f\r\n",tempc,humi);
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <main+0x124>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	4605      	mov	r5, r0
 800176e:	460e      	mov	r6, r1
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <main+0x128>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	4603      	mov	r3, r0
 800177c:	460c      	mov	r4, r1
 800177e:	e9cd 3400 	strd	r3, r4, [sp]
 8001782:	462a      	mov	r2, r5
 8001784:	4633      	mov	r3, r6
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <main+0x12c>)
 8001788:	f002 fe52 	bl	8004430 <iprintf>
      LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_3);
 800178c:	2108      	movs	r1, #8
 800178e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001792:	f7ff ff42 	bl	800161a <LL_GPIO_TogglePin>
      LL_mDelay(100);
 8001796:	2064      	movs	r0, #100	; 0x64
 8001798:	f002 f986 	bl	8003aa8 <LL_mDelay>
      LL_GPIO_TogglePin(GPIOA, LL_GPIO_PIN_3);
 800179c:	2108      	movs	r1, #8
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f7ff ff3a 	bl	800161a <LL_GPIO_TogglePin>
  {
 80017a6:	e78d      	b.n	80016c4 <main+0x24>
 80017a8:	809ff883 	.word	0x809ff883
 80017ac:	3f65e016 	.word	0x3f65e016
 80017b0:	a634b28f 	.word	0xa634b28f
 80017b4:	3f590016 	.word	0x3f590016
 80017b8:	200001fc 	.word	0x200001fc
 80017bc:	20000200 	.word	0x20000200
 80017c0:	40468000 	.word	0x40468000
 80017c4:	20000298 	.word	0x20000298
 80017c8:	20000214 	.word	0x20000214
 80017cc:	080061e0 	.word	0x080061e0

080017d0 <read_sht>:
	    }
	  }
}

void read_sht(void)
{
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af02      	add	r7, sp, #8
	  LL_mDelay(1000);
 80017d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017da:	f002 f965 	bl	8003aa8 <LL_mDelay>
	  LL_I2C_Enable(I2C1);
 80017de:	4831      	ldr	r0, [pc, #196]	; (80018a4 <read_sht+0xd4>)
 80017e0:	f7ff fc3b 	bl	800105a <LL_I2C_Enable>
	  LL_I2C_HandleTransfer(I2C1, 0x88, LL_I2C_ADDRSLAVE_7BIT, ubNbDataToTransmit, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80017e4:	4b30      	ldr	r3, [pc, #192]	; (80018a8 <read_sht+0xd8>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b2f      	ldr	r3, [pc, #188]	; (80018ac <read_sht+0xdc>)
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	2200      	movs	r2, #0
 80017fa:	2188      	movs	r1, #136	; 0x88
 80017fc:	4829      	ldr	r0, [pc, #164]	; (80018a4 <read_sht+0xd4>)
 80017fe:	f7ff fced 	bl	80011dc <LL_I2C_HandleTransfer>
	  while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001802:	e00d      	b.n	8001820 <read_sht+0x50>
	  {
		  if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001804:	4827      	ldr	r0, [pc, #156]	; (80018a4 <read_sht+0xd4>)
 8001806:	f7ff fc90 	bl	800112a <LL_I2C_IsActiveFlag_TXIS>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <read_sht+0x50>
		  {
			  LL_I2C_TransmitData8(I2C1, 0x2C);
 8001810:	212c      	movs	r1, #44	; 0x2c
 8001812:	4824      	ldr	r0, [pc, #144]	; (80018a4 <read_sht+0xd4>)
 8001814:	f7ff fd15 	bl	8001242 <LL_I2C_TransmitData8>
			  LL_I2C_TransmitData8(I2C1, 0x06);
 8001818:	2106      	movs	r1, #6
 800181a:	4822      	ldr	r0, [pc, #136]	; (80018a4 <read_sht+0xd4>)
 800181c:	f7ff fd11 	bl	8001242 <LL_I2C_TransmitData8>
	  while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001820:	4820      	ldr	r0, [pc, #128]	; (80018a4 <read_sht+0xd4>)
 8001822:	f7ff fca8 	bl	8001176 <LL_I2C_IsActiveFlag_STOP>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0eb      	beq.n	8001804 <read_sht+0x34>
		  }
	  }
	  LL_I2C_ClearFlag_STOP(I2C1);
 800182c:	481d      	ldr	r0, [pc, #116]	; (80018a4 <read_sht+0xd4>)
 800182e:	f7ff fcb5 	bl	800119c <LL_I2C_ClearFlag_STOP>
	  LL_I2C_HandleTransfer(I2C1, 0x89, LL_I2C_ADDRSLAVE_7BIT, ubNbDataToReceive, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <read_sht+0xe0>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <read_sht+0xe4>)
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4613      	mov	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	2189      	movs	r1, #137	; 0x89
 800184a:	4816      	ldr	r0, [pc, #88]	; (80018a4 <read_sht+0xd4>)
 800184c:	f7ff fcc6 	bl	80011dc <LL_I2C_HandleTransfer>
	  while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001850:	e014      	b.n	800187c <read_sht+0xac>
	  {
		  if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001852:	4814      	ldr	r0, [pc, #80]	; (80018a4 <read_sht+0xd4>)
 8001854:	f7ff fc7c 	bl	8001150 <LL_I2C_IsActiveFlag_RXNE>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00e      	beq.n	800187c <read_sht+0xac>
		  {
			 ReceiveBuffer[Index++] = LL_I2C_ReceiveData8(I2C1);
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <read_sht+0xe8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	b2d1      	uxtb	r1, r2
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <read_sht+0xe8>)
 800186a:	7011      	strb	r1, [r2, #0]
 800186c:	461c      	mov	r4, r3
 800186e:	480d      	ldr	r0, [pc, #52]	; (80018a4 <read_sht+0xd4>)
 8001870:	f7ff fcda 	bl	8001228 <LL_I2C_ReceiveData8>
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	4b10      	ldr	r3, [pc, #64]	; (80018bc <read_sht+0xec>)
 800187a:	551a      	strb	r2, [r3, r4]
	  while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 800187c:	4809      	ldr	r0, [pc, #36]	; (80018a4 <read_sht+0xd4>)
 800187e:	f7ff fc7a 	bl	8001176 <LL_I2C_IsActiveFlag_STOP>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0e4      	beq.n	8001852 <read_sht+0x82>
		  }
	  }
	 Index = 0;
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <read_sht+0xe8>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	 LL_I2C_ClearFlag_STOP(I2C1);
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <read_sht+0xd4>)
 8001890:	f7ff fc84 	bl	800119c <LL_I2C_ClearFlag_STOP>
	 LL_I2C_Disable(I2C1);
 8001894:	4803      	ldr	r0, [pc, #12]	; (80018a4 <read_sht+0xd4>)
 8001896:	f7ff fbf0 	bl	800107a <LL_I2C_Disable>
}
 800189a:	bf00      	nop
 800189c:	3704      	adds	r7, #4
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40005400 	.word	0x40005400
 80018a8:	20000000 	.word	0x20000000
 80018ac:	80002000 	.word	0x80002000
 80018b0:	20000001 	.word	0x20000001
 80018b4:	80002400 	.word	0x80002400
 80018b8:	20000206 	.word	0x20000206
 80018bc:	20000200 	.word	0x20000200

080018c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fe41 	bl	800154c <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80018ca:	f7ff fe53 	bl	8001574 <LL_FLASH_GetLatency>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80018d4:	f000 f979 	bl	8001bca <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80018d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018dc:	f7ff fe58 	bl	8001590 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80018e0:	f7ff fcbe 	bl	8001260 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80018e4:	bf00      	nop
 80018e6:	f7ff fccb 	bl	8001280 <LL_RCC_HSI_IsReady>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d1fa      	bne.n	80018e6 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80018f0:	2010      	movs	r0, #16
 80018f2:	f7ff fcd9 	bl	80012a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80018f6:	2300      	movs	r3, #0
 80018f8:	2208      	movs	r2, #8
 80018fa:	2100      	movs	r1, #0
 80018fc:	2002      	movs	r0, #2
 80018fe:	f7ff fdad 	bl	800145c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001902:	f7ff fdcb 	bl	800149c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001906:	f7ff fd85 	bl	8001414 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800190a:	bf00      	nop
 800190c:	f7ff fd92 	bl	8001434 <LL_RCC_PLL_IsReady>
 8001910:	4603      	mov	r3, r0
 8001912:	2b01      	cmp	r3, #1
 8001914:	d1fa      	bne.n	800190c <SystemClock_Config+0x4c>
  {
    
  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001916:	2003      	movs	r0, #3
 8001918:	f7ff fcdc 	bl	80012d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800191c:	bf00      	nop
 800191e:	f7ff fced 	bl	80012fc <LL_RCC_GetSysClkSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b0c      	cmp	r3, #12
 8001926:	d1fa      	bne.n	800191e <SystemClock_Config+0x5e>
  {
  
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8001928:	2080      	movs	r0, #128	; 0x80
 800192a:	f7ff fcf5 	bl	8001318 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fd06 	bl	8001340 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001934:	2000      	movs	r0, #0
 8001936:	f7ff fd17 	bl	8001368 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(32000000);
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <SystemClock_Config+0xa4>)
 800193c:	f002 f8da 	bl	8003af4 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001940:	2000      	movs	r0, #0
 8001942:	f000 fafb 	bl	8001f3c <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <SystemClock_Config+0x90>
  {
    Error_Handler();  
 800194c:	f000 f93d 	bl	8001bca <Error_Handler>
  };
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001950:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001954:	f7ff fd1c 	bl	8001390 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 8001958:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800195c:	f7ff fd32 	bl	80013c4 <LL_RCC_SetI2CClockSource>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	01e84800 	.word	0x01e84800

08001968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001992:	2001      	movs	r0, #1
 8001994:	f7ff fd92 	bl	80014bc <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PA9   ------> I2C1_SCL
  PA10   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001998:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800199c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800199e:	2302      	movs	r3, #2
 80019a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80019a6:	2301      	movs	r3, #1
 80019a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80019aa:	2301      	movs	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80019ae:	2304      	movs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ba:	f001 feb5 	bl	8003728 <LL_GPIO_Init>

  /**/
    LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 80019be:	2108      	movs	r1, #8
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c4:	f7ff fe1b 	bl	80015fe <LL_GPIO_ResetOutputPin>

    /**/
    GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 80019c8:	2308      	movs	r3, #8
 80019ca:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019cc:	2301      	movs	r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80019d0:	2302      	movs	r3, #2
 80019d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
    LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019dc:	1d3b      	adds	r3, r7, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f001 fea0 	bl	8003728 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80019e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80019ec:	f7ff fd7e 	bl	80014ec <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019f0:	f7ff faaa 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fafa 	bl	8000ff4 <NVIC_EncodePriority>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	201f      	movs	r0, #31
 8001a06:	f7ff facb 	bl	8000fa0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a0a:	201f      	movs	r0, #31
 8001a0c:	f7ff faaa 	bl	8000f64 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a10:	f7ff fa9a 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff faea 	bl	8000ff4 <NVIC_EncodePriority>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	2020      	movs	r0, #32
 8001a26:	f7ff fabb 	bl	8000fa0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a2a:	2020      	movs	r0, #32
 8001a2c:	f7ff fa9a 	bl	8000f64 <__NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization 
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001a30:	4815      	ldr	r0, [pc, #84]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a32:	f7ff fbc3 	bl	80011bc <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001a36:	4814      	ldr	r0, [pc, #80]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a38:	f7ff fb67 	bl	800110a <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a3e:	f7ff fb3c 	bl	80010ba <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001a42:	4811      	ldr	r0, [pc, #68]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a44:	f7ff fb29 	bl	800109a <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x00707CBB;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C1_Init+0x124>)
 8001a4e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a6c:	f001 ff6e 	bl	800394c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	4804      	ldr	r0, [pc, #16]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a76:	f7ff fb30 	bl	80010da <LL_I2C_SetOwnAddress2>
  LL_I2C_Enable(I2C1);
 8001a7a:	4803      	ldr	r0, [pc, #12]	; (8001a88 <MX_I2C1_Init+0x120>)
 8001a7c:	f7ff faed 	bl	800105a <LL_I2C_Enable>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3738      	adds	r7, #56	; 0x38
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	00707cbb 	.word	0x00707cbb

08001a90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b090      	sub	sp, #64	; 0x40
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	2228      	movs	r2, #40	; 0x28
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f002 f862 	bl	8003b68 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001ab4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab8:	f7ff fd30 	bl	800151c <LL_APB2_GRP1_EnableClock>
  
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff fcfd 	bl	80014bc <LL_AHB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA1   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001ac2:	23c2      	movs	r3, #194	; 0xc2
 8001ac4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2303      	movs	r3, #3
 8001acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	463b      	mov	r3, r7
 8001adc:	4619      	mov	r1, r3
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ae2:	f001 fe21 	bl	8003728 <LL_GPIO_Init>

  /* SPI1 interrupt Init */
  NVIC_SetPriority(SPI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001ae6:	f7ff fa2f 	bl	8000f48 <__NVIC_GetPriorityGrouping>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2200      	movs	r2, #0
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fa7f 	bl	8000ff4 <NVIC_EncodePriority>
 8001af6:	4603      	mov	r3, r0
 8001af8:	4619      	mov	r1, r3
 8001afa:	2023      	movs	r0, #35	; 0x23
 8001afc:	f7ff fa50 	bl	8000fa0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI1_IRQn);
 8001b00:	2023      	movs	r0, #35	; 0x23
 8001b02:	f7ff fa2f 	bl	8000f64 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001b0a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b0e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_4BIT;
 8001b10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b14:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001b30:	2307      	movs	r3, #7
 8001b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4807      	ldr	r0, [pc, #28]	; (8001b58 <MX_SPI1_Init+0xc8>)
 8001b3c:	f001 ff65 	bl	8003a0a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8001b40:	2100      	movs	r1, #0
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_SPI1_Init+0xc8>)
 8001b44:	f7ff fd38 	bl	80015b8 <LL_SPI_SetStandard>
  LL_SPI_EnableNSSPulseMgt(SPI1);
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <MX_SPI1_Init+0xc8>)
 8001b4a:	f7ff fd48 	bl	80015de <LL_SPI_EnableNSSPulseMgt>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	3740      	adds	r7, #64	; 0x40
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40013000 	.word	0x40013000

08001b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <MX_USART2_UART_Init+0x5c>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_USART2_UART_Init+0x58>)
 8001ba0:	f000 fdb2 	bl	8002708 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001baa:	f000 f80e 	bl	8001bca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000218 	.word	0x20000218
 8001bb8:	40004400 	.word	0x40004400

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f7ff fc7b 	bl	80014bc <LL_AHB2_GRP1_EnableClock>

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x44>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_MspInit+0x44>)
 8001be4:	f043 0301 	orr.w	r3, r3, #1
 8001be8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_MspInit+0x44>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_MspInit+0x44>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x44>)
 8001bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x44>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1b      	ldr	r2, [pc, #108]	; (8001cac <HAL_UART_MspInit+0x8c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d130      	bne.n	8001ca4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a1a      	ldr	r2, [pc, #104]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_UART_MspInit+0x90>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c72:	230c      	movs	r3, #12
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c82:	2307      	movs	r3, #7
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f000 fafe 	bl	8002290 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	2026      	movs	r0, #38	; 0x26
 8001c9a:	f000 fa82 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c9e:	2026      	movs	r0, #38	; 0x26
 8001ca0:	f000 fa9b 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f952 	bl	8001fb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <USART2_IRQHandler+0x10>)
 8001d42:	f000 fdc3 	bl	80028cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000218 	.word	0x20000218

08001d50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e00a      	b.n	8001d78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d62:	f3af 8000 	nop.w
 8001d66:	4601      	mov	r1, r0
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	60ba      	str	r2, [r7, #8]
 8001d6e:	b2ca      	uxtb	r2, r1
 8001d70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dbf0      	blt.n	8001d62 <_read+0x12>
	}

return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
	return -1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db2:	605a      	str	r2, [r3, #4]
	return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_isatty>:

int _isatty(int file)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <_sbrk+0x50>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x16>
		heap_end = &end;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <_sbrk+0x50>)
 8001e06:	4a10      	ldr	r2, [pc, #64]	; (8001e48 <_sbrk+0x54>)
 8001e08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <_sbrk+0x50>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <_sbrk+0x50>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	466a      	mov	r2, sp
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d907      	bls.n	8001e2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e1e:	f001 fe79 	bl	8003b14 <__errno>
 8001e22:	4602      	mov	r2, r0
 8001e24:	230c      	movs	r3, #12
 8001e26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2c:	e006      	b.n	8001e3c <_sbrk+0x48>
	}

	heap_end += incr;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <_sbrk+0x50>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a03      	ldr	r2, [pc, #12]	; (8001e44 <_sbrk+0x50>)
 8001e38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000208 	.word	0x20000208
 8001e48:	200002a8 	.word	0x200002a8

08001e4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <SystemInit+0x64>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <SystemInit+0x64>)
 8001e58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <SystemInit+0x68>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a13      	ldr	r2, [pc, #76]	; (8001eb4 <SystemInit+0x68>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <SystemInit+0x68>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <SystemInit+0x68>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a0f      	ldr	r2, [pc, #60]	; (8001eb4 <SystemInit+0x68>)
 8001e78:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e7c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e80:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <SystemInit+0x68>)
 8001e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e88:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <SystemInit+0x68>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <SystemInit+0x68>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <SystemInit+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SystemInit+0x64>)
 8001e9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	40021000 	.word	0x40021000

08001eb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ebc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ebe:	e003      	b.n	8001ec8 <LoopCopyDataInit>

08001ec0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ec0:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ec2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ec4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ec6:	3104      	adds	r1, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ecc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ece:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ed0:	d3f6      	bcc.n	8001ec0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ed4:	e002      	b.n	8001edc <LoopFillZerobss>

08001ed6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ed6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ed8:	f842 3b04 	str.w	r3, [r2], #4

08001edc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001edc:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <LoopForever+0x16>)
	cmp	r2, r3
 8001ede:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ee0:	d3f9      	bcc.n	8001ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ee2:	f7ff ffb3 	bl	8001e4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f001 fe1b 	bl	8003b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eea:	f7ff fbd9 	bl	80016a0 <main>

08001eee <LoopForever>:

LoopForever:
    b LoopForever
 8001eee:	e7fe      	b.n	8001eee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001ef4:	08006500 	.word	0x08006500
	ldr	r0, =_sdata
 8001ef8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001efc:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001f00:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001f04:	200002a4 	.word	0x200002a4

08001f08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f08:	e7fe      	b.n	8001f08 <ADC1_IRQHandler>

08001f0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f939 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f000 f80e 	bl	8001f3c <HAL_InitTick>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e001      	b.n	8001f30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2c:	f7ff fe54 	bl	8001bd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d022      	beq.n	8001f96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_InitTick+0x6c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_InitTick+0x68>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f946 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b0f      	cmp	r3, #15
 8001f74:	d809      	bhi.n	8001f8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f76:	2200      	movs	r2, #0
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7e:	f000 f910 	bl	80021a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <HAL_InitTick+0x70>)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e007      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e004      	b.n	8001f9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e001      	b.n	8001f9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000004 	.word	0x20000004
 8001fac:	20000008 	.word	0x20000008

08001fb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_IncTick+0x20>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a03      	ldr	r2, [pc, #12]	; (8001fcc <HAL_IncTick+0x1c>)
 8001fc0:	6013      	str	r3, [r2, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	2000029c 	.word	0x2000029c
 8001fd0:	2000000c 	.word	0x2000000c

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000029c 	.word	0x2000029c

08001fec <__NVIC_SetPriorityGrouping>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d005      	beq.n	8002232 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2204      	movs	r2, #4
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	73fb      	strb	r3, [r7, #15]
 8002230:	e029      	b.n	8002286 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 020e 	bic.w	r2, r2, #14
 8002240:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f003 021c 	and.w	r2, r3, #28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2101      	movs	r1, #1
 8002260:	fa01 f202 	lsl.w	r2, r1, r2
 8002264:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    }
  }
  return status;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e154      	b.n	800254a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8146 	beq.w	8002544 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d00b      	beq.n	80022d8 <HAL_GPIO_Init+0x48>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d007      	beq.n	80022d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022cc:	2b11      	cmp	r3, #17
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b12      	cmp	r3, #18
 80022d6:	d130      	bne.n	800233a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800230e:	2201      	movs	r2, #1
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	091b      	lsrs	r3, r3, #4
 8002324:	f003 0201 	and.w	r2, r3, #1
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d003      	beq.n	800237a <HAL_GPIO_Init+0xea>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b12      	cmp	r3, #18
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80a0 	beq.w	8002544 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_GPIO_Init+0x2d8>)
 8002406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002408:	4a57      	ldr	r2, [pc, #348]	; (8002568 <HAL_GPIO_Init+0x2d8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6613      	str	r3, [r2, #96]	; 0x60
 8002410:	4b55      	ldr	r3, [pc, #340]	; (8002568 <HAL_GPIO_Init+0x2d8>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800241c:	4a53      	ldr	r2, [pc, #332]	; (800256c <HAL_GPIO_Init+0x2dc>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002446:	d019      	beq.n	800247c <HAL_GPIO_Init+0x1ec>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a49      	ldr	r2, [pc, #292]	; (8002570 <HAL_GPIO_Init+0x2e0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d013      	beq.n	8002478 <HAL_GPIO_Init+0x1e8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a48      	ldr	r2, [pc, #288]	; (8002574 <HAL_GPIO_Init+0x2e4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_GPIO_Init+0x1e4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a47      	ldr	r2, [pc, #284]	; (8002578 <HAL_GPIO_Init+0x2e8>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d007      	beq.n	8002470 <HAL_GPIO_Init+0x1e0>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a46      	ldr	r2, [pc, #280]	; (800257c <HAL_GPIO_Init+0x2ec>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d101      	bne.n	800246c <HAL_GPIO_Init+0x1dc>
 8002468:	2304      	movs	r3, #4
 800246a:	e008      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 800246c:	2307      	movs	r3, #7
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002470:	2303      	movs	r3, #3
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002474:	2302      	movs	r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 800247c:	2300      	movs	r3, #0
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800248e:	4937      	ldr	r1, [pc, #220]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800249c:	4b38      	ldr	r3, [pc, #224]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024c0:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024f0:	4b23      	ldr	r3, [pc, #140]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800251a:	4b19      	ldr	r3, [pc, #100]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_GPIO_Init+0x2f0>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	3301      	adds	r3, #1
 8002548:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	fa22 f303 	lsr.w	r3, r2, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	f47f aea3 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 800255a:	bf00      	nop
 800255c:	371c      	adds	r7, #28
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000
 8002570:	48000400 	.word	0x48000400
 8002574:	48000800 	.word	0x48000800
 8002578:	48000c00 	.word	0x48000c00
 800257c:	48001000 	.word	0x48001000
 8002580:	40010400 	.word	0x40010400

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	; 0x24
 8002588:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002592:	4b3d      	ldr	r3, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259c:	4b3a      	ldr	r3, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d005      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x34>
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	2b0c      	cmp	r3, #12
 80025b0:	d121      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11e      	bne.n	80025f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 80025c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	e005      	b.n	80025e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025d4:	4b2c      	ldr	r3, [pc, #176]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d10d      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025fc:	4b24      	ldr	r3, [pc, #144]	; (8002690 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025fe:	61bb      	str	r3, [r7, #24]
 8002600:	e004      	b.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	2b08      	cmp	r3, #8
 8002606:	d101      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 800260a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d133      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002612:	4b1d      	ldr	r3, [pc, #116]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0xa4>
 8002622:	2b03      	cmp	r3, #3
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0xaa>
 8002626:	e005      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_GetSysClockFreq+0x10c>)
 800262a:	617b      	str	r3, [r7, #20]
      break;
 800262c:	e005      	b.n	800263a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <HAL_RCC_GetSysClockFreq+0x110>)
 8002630:	617b      	str	r3, [r7, #20]
      break;
 8002632:	e002      	b.n	800263a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	617b      	str	r3, [r7, #20]
      break;
 8002638:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263a:	4b13      	ldr	r3, [pc, #76]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	091b      	lsrs	r3, r3, #4
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	3301      	adds	r3, #1
 8002646:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002648:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	fb02 f203 	mul.w	r2, r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	fbb2 f3f3 	udiv	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002660:	4b09      	ldr	r3, [pc, #36]	; (8002688 <HAL_RCC_GetSysClockFreq+0x104>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0e5b      	lsrs	r3, r3, #25
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	3301      	adds	r3, #1
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800267a:	69bb      	ldr	r3, [r7, #24]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3724      	adds	r7, #36	; 0x24
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40021000 	.word	0x40021000
 800268c:	080061fc 	.word	0x080061fc
 8002690:	00f42400 	.word	0x00f42400
 8002694:	007a1200 	.word	0x007a1200

08002698 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_RCC_GetHCLKFreq+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000004 	.word	0x20000004

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026b4:	f7ff fff0 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026b8:	4601      	mov	r1, r0
 80026ba:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0a1b      	lsrs	r3, r3, #8
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	080061f4 	.word	0x080061f4

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026e0:	f7ff ffda 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026e4:	4601      	mov	r1, r0
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0adb      	lsrs	r3, r3, #11
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026f2:	5cd3      	ldrb	r3, [r2, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	080061f4 	.word	0x080061f4

08002708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e040      	b.n	800279c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fa78 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2224      	movs	r2, #36	; 0x24
 8002734:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0201 	bic.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa1a 	bl	8002b80 <UART_SetConfig>
 800274c:	4603      	mov	r3, r0
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e022      	b.n	800279c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 fd22 	bl	80031a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fda9 	bl	80032ec <UART_CheckIdleState>
 800279a:	4603      	mov	r3, r0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	603b      	str	r3, [r7, #0]
 80027b0:	4613      	mov	r3, r2
 80027b2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	f040 8081 	bne.w	80028c0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d002      	beq.n	80027ca <HAL_UART_Transmit+0x26>
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e079      	b.n	80028c2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Transmit+0x38>
 80027d8:	2302      	movs	r3, #2
 80027da:	e072      	b.n	80028c2 <HAL_UART_Transmit+0x11e>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2221      	movs	r2, #33	; 0x21
 80027ee:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80027f0:	f7ff fbf0 	bl	8001fd4 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	88fa      	ldrh	r2, [r7, #6]
 80027fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280e:	d108      	bne.n	8002822 <HAL_UART_Transmit+0x7e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e003      	b.n	800282a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002832:	e02d      	b.n	8002890 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fd99 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e039      	b.n	80028c2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002860:	b292      	uxth	r2, r2
 8002862:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	3302      	adds	r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	e008      	b.n	800287e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	b292      	uxth	r2, r2
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	3301      	adds	r3, #1
 800287c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002884:	b29b      	uxth	r3, r3
 8002886:	3b01      	subs	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1cb      	bne.n	8002834 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	2200      	movs	r2, #0
 80028a4:	2140      	movs	r1, #64	; 0x40
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fd65 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e005      	b.n	80028c2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	e000      	b.n	80028c2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80028c0:	2302      	movs	r3, #2
  }
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d113      	bne.n	8002924 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00e      	beq.n	8002924 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8114 	beq.w	8002b42 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
      }
      return;
 8002922:	e10e      	b.n	8002b42 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80d6 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80cb 	beq.w	8002ad8 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <HAL_UART_IRQHandler+0x9e>
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2201      	movs	r2, #1
 800295c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002962:	f043 0201 	orr.w	r2, r3, #1
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <HAL_UART_IRQHandler+0xc6>
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2202      	movs	r2, #2
 8002984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00e      	beq.n	80029ba <HAL_UART_IRQHandler+0xee>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d009      	beq.n	80029ba <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2204      	movs	r2, #4
 80029ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b2:	f043 0202 	orr.w	r2, r3, #2
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d009      	beq.n	80029ec <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2208      	movs	r2, #8
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e4:	f043 0208 	orr.w	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00f      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14a>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8093 	beq.w	8002b46 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 0320 	and.w	r3, r3, #32
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a48:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d004      	beq.n	8002a62 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d031      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fd02 	bl	800346c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b40      	cmp	r3, #64	; 0x40
 8002a74:	d123      	bne.n	8002abe <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a84:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d013      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a92:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <HAL_UART_IRQHandler+0x288>)
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fbb7 	bl	800220e <HAL_DMA_Abort_IT>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	e00e      	b.n	8002ad4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f858 	bl	8002b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	e00a      	b.n	8002ad4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f854 	bl	8002b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac4:	e006      	b.n	8002ad4 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f850 	bl	8002b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002ad2:	e038      	b.n	8002b46 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad4:	bf00      	nop
    return;
 8002ad6:	e036      	b.n	8002b46 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <HAL_UART_IRQHandler+0x232>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002af4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fd07 	bl	800350a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002afc:	e026      	b.n	8002b4c <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00d      	beq.n	8002b24 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d017      	beq.n	8002b4a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	4798      	blx	r3
    }
    return;
 8002b22:	e012      	b.n	8002b4a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00e      	beq.n	8002b4c <HAL_UART_IRQHandler+0x280>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d009      	beq.n	8002b4c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fccd 	bl	80034d8 <UART_EndTransmit_IT>
    return;
 8002b3e:	bf00      	nop
 8002b40:	e004      	b.n	8002b4c <HAL_UART_IRQHandler+0x280>
      return;
 8002b42:	bf00      	nop
 8002b44:	e002      	b.n	8002b4c <HAL_UART_IRQHandler+0x280>
    return;
 8002b46:	bf00      	nop
 8002b48:	e000      	b.n	8002b4c <HAL_UART_IRQHandler+0x280>
    return;
 8002b4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	080034ad 	.word	0x080034ad

08002b58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b80:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4bbc      	ldr	r3, [pc, #752]	; (8002ea8 <UART_SetConfig+0x328>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6812      	ldr	r2, [r2, #0]
 8002bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4ab2      	ldr	r2, [pc, #712]	; (8002eac <UART_SetConfig+0x32c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4aa9      	ldr	r2, [pc, #676]	; (8002eb0 <UART_SetConfig+0x330>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d126      	bne.n	8002c5e <UART_SetConfig+0xde>
 8002c10:	4ba8      	ldr	r3, [pc, #672]	; (8002eb4 <UART_SetConfig+0x334>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d81a      	bhi.n	8002c54 <UART_SetConfig+0xd4>
 8002c1e:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <UART_SetConfig+0xa4>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c35 	.word	0x08002c35
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c4d 	.word	0x08002c4d
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3a:	e0ab      	b.n	8002d94 <UART_SetConfig+0x214>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c42:	e0a7      	b.n	8002d94 <UART_SetConfig+0x214>
 8002c44:	2304      	movs	r3, #4
 8002c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c4a:	e0a3      	b.n	8002d94 <UART_SetConfig+0x214>
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c52:	e09f      	b.n	8002d94 <UART_SetConfig+0x214>
 8002c54:	2310      	movs	r3, #16
 8002c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c5a:	bf00      	nop
 8002c5c:	e09a      	b.n	8002d94 <UART_SetConfig+0x214>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a95      	ldr	r2, [pc, #596]	; (8002eb8 <UART_SetConfig+0x338>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d138      	bne.n	8002cda <UART_SetConfig+0x15a>
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <UART_SetConfig+0x334>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b0c      	cmp	r3, #12
 8002c74:	d82c      	bhi.n	8002cd0 <UART_SetConfig+0x150>
 8002c76:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <UART_SetConfig+0xfc>)
 8002c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002cd1 	.word	0x08002cd1
 8002c84:	08002cd1 	.word	0x08002cd1
 8002c88:	08002cd1 	.word	0x08002cd1
 8002c8c:	08002cc1 	.word	0x08002cc1
 8002c90:	08002cd1 	.word	0x08002cd1
 8002c94:	08002cd1 	.word	0x08002cd1
 8002c98:	08002cd1 	.word	0x08002cd1
 8002c9c:	08002cb9 	.word	0x08002cb9
 8002ca0:	08002cd1 	.word	0x08002cd1
 8002ca4:	08002cd1 	.word	0x08002cd1
 8002ca8:	08002cd1 	.word	0x08002cd1
 8002cac:	08002cc9 	.word	0x08002cc9
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cb6:	e06d      	b.n	8002d94 <UART_SetConfig+0x214>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cbe:	e069      	b.n	8002d94 <UART_SetConfig+0x214>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cc6:	e065      	b.n	8002d94 <UART_SetConfig+0x214>
 8002cc8:	2308      	movs	r3, #8
 8002cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cce:	e061      	b.n	8002d94 <UART_SetConfig+0x214>
 8002cd0:	2310      	movs	r3, #16
 8002cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cd6:	bf00      	nop
 8002cd8:	e05c      	b.n	8002d94 <UART_SetConfig+0x214>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a77      	ldr	r2, [pc, #476]	; (8002ebc <UART_SetConfig+0x33c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d125      	bne.n	8002d30 <UART_SetConfig+0x1b0>
 8002ce4:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <UART_SetConfig+0x334>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d011      	beq.n	8002d16 <UART_SetConfig+0x196>
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d802      	bhi.n	8002cfc <UART_SetConfig+0x17c>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <UART_SetConfig+0x186>
 8002cfa:	e014      	b.n	8002d26 <UART_SetConfig+0x1a6>
 8002cfc:	2b20      	cmp	r3, #32
 8002cfe:	d006      	beq.n	8002d0e <UART_SetConfig+0x18e>
 8002d00:	2b30      	cmp	r3, #48	; 0x30
 8002d02:	d00c      	beq.n	8002d1e <UART_SetConfig+0x19e>
 8002d04:	e00f      	b.n	8002d26 <UART_SetConfig+0x1a6>
 8002d06:	2300      	movs	r3, #0
 8002d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d0c:	e042      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d14:	e03e      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d16:	2304      	movs	r3, #4
 8002d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d1c:	e03a      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d24:	e036      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d26:	2310      	movs	r3, #16
 8002d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d2c:	bf00      	nop
 8002d2e:	e031      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <UART_SetConfig+0x32c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d129      	bne.n	8002d8e <UART_SetConfig+0x20e>
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <UART_SetConfig+0x334>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d48:	d014      	beq.n	8002d74 <UART_SetConfig+0x1f4>
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d802      	bhi.n	8002d56 <UART_SetConfig+0x1d6>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d007      	beq.n	8002d64 <UART_SetConfig+0x1e4>
 8002d54:	e016      	b.n	8002d84 <UART_SetConfig+0x204>
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d007      	beq.n	8002d6c <UART_SetConfig+0x1ec>
 8002d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d60:	d00c      	beq.n	8002d7c <UART_SetConfig+0x1fc>
 8002d62:	e00f      	b.n	8002d84 <UART_SetConfig+0x204>
 8002d64:	2300      	movs	r3, #0
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6a:	e013      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d72:	e00f      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d74:	2304      	movs	r3, #4
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7a:	e00b      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d82:	e007      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d84:	2310      	movs	r3, #16
 8002d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <UART_SetConfig+0x214>
 8002d8e:	2310      	movs	r3, #16
 8002d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a44      	ldr	r2, [pc, #272]	; (8002eac <UART_SetConfig+0x32c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	f040 80fb 	bne.w	8002f96 <UART_SetConfig+0x416>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002da0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d824      	bhi.n	8002df2 <UART_SetConfig+0x272>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <UART_SetConfig+0x230>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dd5 	.word	0x08002dd5
 8002db4:	08002df3 	.word	0x08002df3
 8002db8:	08002ddd 	.word	0x08002ddd
 8002dbc:	08002df3 	.word	0x08002df3
 8002dc0:	08002de3 	.word	0x08002de3
 8002dc4:	08002df3 	.word	0x08002df3
 8002dc8:	08002df3 	.word	0x08002df3
 8002dcc:	08002df3 	.word	0x08002df3
 8002dd0:	08002deb 	.word	0x08002deb
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002dd4:	f7ff fc6c 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8002dd8:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002dda:	e00d      	b.n	8002df8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ddc:	4b38      	ldr	r3, [pc, #224]	; (8002ec0 <UART_SetConfig+0x340>)
 8002dde:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002de0:	e00a      	b.n	8002df8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002de2:	f7ff fbcf 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002de6:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002de8:	e006      	b.n	8002df8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dee:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002df0:	e002      	b.n	8002df8 <UART_SetConfig+0x278>
      default:
        ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	76fb      	strb	r3, [r7, #27]
        break;
 8002df6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 81c8 	beq.w	8003190 <UART_SetConfig+0x610>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4413      	add	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d305      	bcc.n	8002e1c <UART_SetConfig+0x29c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d902      	bls.n	8002e22 <UART_SetConfig+0x2a2>
      {
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	e1b6      	b.n	8003190 <UART_SetConfig+0x610>
      }
      else
      {
        switch (clocksource)
 8002e22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e26:	2b08      	cmp	r3, #8
 8002e28:	f200 80a2 	bhi.w	8002f70 <UART_SetConfig+0x3f0>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <UART_SetConfig+0x2b4>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e59 	.word	0x08002e59
 8002e38:	08002f71 	.word	0x08002f71
 8002e3c:	08002ec5 	.word	0x08002ec5
 8002e40:	08002f71 	.word	0x08002f71
 8002e44:	08002ef9 	.word	0x08002ef9
 8002e48:	08002f71 	.word	0x08002f71
 8002e4c:	08002f71 	.word	0x08002f71
 8002e50:	08002f71 	.word	0x08002f71
 8002e54:	08002f47 	.word	0x08002f47
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8002e58:	f7ff fc2a 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4619      	mov	r1, r3
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	f04f 0400 	mov.w	r4, #0
 8002e6e:	0214      	lsls	r4, r2, #8
 8002e70:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002e74:	020b      	lsls	r3, r1, #8
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6852      	ldr	r2, [r2, #4]
 8002e7a:	0852      	lsrs	r2, r2, #1
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	f04f 0200 	mov.w	r2, #0
 8002e82:	eb13 0b01 	adds.w	fp, r3, r1
 8002e86:	eb44 0c02 	adc.w	ip, r4, r2
 8002e8a:	4658      	mov	r0, fp
 8002e8c:	4661      	mov	r1, ip
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	461a      	mov	r2, r3
 8002e98:	4623      	mov	r3, r4
 8002e9a:	f7fd fed5 	bl	8000c48 <__aeabi_uldivmod>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	460c      	mov	r4, r1
 8002ea2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ea4:	e067      	b.n	8002f76 <UART_SetConfig+0x3f6>
 8002ea6:	bf00      	nop
 8002ea8:	efff69f3 	.word	0xefff69f3
 8002eac:	40008000 	.word	0x40008000
 8002eb0:	40013800 	.word	0x40013800
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	40004800 	.word	0x40004800
 8002ec0:	00f42400 	.word	0x00f42400
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	f04f 0400 	mov.w	r4, #0
 8002ece:	49ae      	ldr	r1, [pc, #696]	; (8003188 <UART_SetConfig+0x608>)
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	eb13 0b01 	adds.w	fp, r3, r1
 8002ed8:	eb44 0c02 	adc.w	ip, r4, r2
 8002edc:	4658      	mov	r0, fp
 8002ede:	4661      	mov	r1, ip
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f04f 0400 	mov.w	r4, #0
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4623      	mov	r3, r4
 8002eec:	f7fd feac 	bl	8000c48 <__aeabi_uldivmod>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002ef6:	e03e      	b.n	8002f76 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002ef8:	f7ff fb44 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002efc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	f04f 0400 	mov.w	r4, #0
 8002f0e:	0214      	lsls	r4, r2, #8
 8002f10:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002f14:	020b      	lsls	r3, r1, #8
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6852      	ldr	r2, [r2, #4]
 8002f1a:	0852      	lsrs	r2, r2, #1
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	eb13 0b01 	adds.w	fp, r3, r1
 8002f26:	eb44 0c02 	adc.w	ip, r4, r2
 8002f2a:	4658      	mov	r0, fp
 8002f2c:	4661      	mov	r1, ip
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f04f 0400 	mov.w	r4, #0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd fe85 	bl	8000c48 <__aeabi_uldivmod>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f44:	e017      	b.n	8002f76 <UART_SetConfig+0x3f6>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	085b      	lsrs	r3, r3, #1
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002f54:	f144 0100 	adc.w	r1, r4, #0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f04f 0400 	mov.w	r4, #0
 8002f60:	461a      	mov	r2, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	f7fd fe70 	bl	8000c48 <__aeabi_uldivmod>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002f6e:	e002      	b.n	8002f76 <UART_SetConfig+0x3f6>
          default:
            ret = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	76fb      	strb	r3, [r7, #27]
            break;
 8002f74:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7c:	d308      	bcc.n	8002f90 <UART_SetConfig+0x410>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f84:	d204      	bcs.n	8002f90 <UART_SetConfig+0x410>
        {
          huart->Instance->BRR = usartdiv;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	e0ff      	b.n	8003190 <UART_SetConfig+0x610>
        }
        else
        {
          ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	76fb      	strb	r3, [r7, #27]
 8002f94:	e0fc      	b.n	8003190 <UART_SetConfig+0x610>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	f040 8083 	bne.w	80030a8 <UART_SetConfig+0x528>
  {
    switch (clocksource)
 8002fa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d85e      	bhi.n	8003068 <UART_SetConfig+0x4e8>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x430>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002ff5 	.word	0x08002ff5
 8002fb8:	08003015 	.word	0x08003015
 8002fbc:	08003069 	.word	0x08003069
 8002fc0:	08003031 	.word	0x08003031
 8002fc4:	08003069 	.word	0x08003069
 8002fc8:	08003069 	.word	0x08003069
 8002fcc:	08003069 	.word	0x08003069
 8002fd0:	08003051 	.word	0x08003051
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff fb6c 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	005a      	lsls	r2, r3, #1
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	441a      	add	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ff2:	e03c      	b.n	800306e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7ff fb72 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8002ff8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	005a      	lsls	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	085b      	lsrs	r3, r3, #1
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	fbb2 f3f3 	udiv	r3, r2, r3
 800300e:	b29b      	uxth	r3, r3
 8003010:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003012:	e02c      	b.n	800306e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800301e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6852      	ldr	r2, [r2, #4]
 8003026:	fbb3 f3f2 	udiv	r3, r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800302e:	e01e      	b.n	800306e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003030:	f7ff faa8 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8003034:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	005a      	lsls	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	085b      	lsrs	r3, r3, #1
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800304e:	e00e      	b.n	800306e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	085b      	lsrs	r3, r3, #1
 8003056:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003062:	b29b      	uxth	r3, r3
 8003064:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003066:	e002      	b.n	800306e <UART_SetConfig+0x4ee>
      default:
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	76fb      	strb	r3, [r7, #27]
        break;
 800306c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d916      	bls.n	80030a2 <UART_SetConfig+0x522>
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d212      	bcs.n	80030a2 <UART_SetConfig+0x522>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	b29b      	uxth	r3, r3
 8003080:	f023 030f 	bic.w	r3, r3, #15
 8003084:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	b29b      	uxth	r3, r3
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	b29a      	uxth	r2, r3
 8003092:	89fb      	ldrh	r3, [r7, #14]
 8003094:	4313      	orrs	r3, r2
 8003096:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	89fa      	ldrh	r2, [r7, #14]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	e076      	b.n	8003190 <UART_SetConfig+0x610>
    }
    else
    {
      ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	76fb      	strb	r3, [r7, #27]
 80030a6:	e073      	b.n	8003190 <UART_SetConfig+0x610>
    }
  }
  else
  {
    switch (clocksource)
 80030a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d85c      	bhi.n	800316a <UART_SetConfig+0x5ea>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <UART_SetConfig+0x538>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030dd 	.word	0x080030dd
 80030bc:	080030fb 	.word	0x080030fb
 80030c0:	08003119 	.word	0x08003119
 80030c4:	0800316b 	.word	0x0800316b
 80030c8:	08003135 	.word	0x08003135
 80030cc:	0800316b 	.word	0x0800316b
 80030d0:	0800316b 	.word	0x0800316b
 80030d4:	0800316b 	.word	0x0800316b
 80030d8:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030dc:	f7ff fae8 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 80030e0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	085a      	lsrs	r2, r3, #1
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	441a      	add	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80030f8:	e03a      	b.n	8003170 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030fa:	f7ff faef 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 80030fe:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	085a      	lsrs	r2, r3, #1
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	b29b      	uxth	r3, r3
 8003114:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003116:	e02b      	b.n	8003170 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003122:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6852      	ldr	r2, [r2, #4]
 800312a:	fbb3 f3f2 	udiv	r3, r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003132:	e01d      	b.n	8003170 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003134:	f7ff fa26 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8003138:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	085a      	lsrs	r2, r3, #1
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	441a      	add	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	fbb2 f3f3 	udiv	r3, r2, r3
 800314c:	b29b      	uxth	r3, r3
 800314e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003150:	e00e      	b.n	8003170 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	b29b      	uxth	r3, r3
 8003166:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003168:	e002      	b.n	8003170 <UART_SetConfig+0x5f0>
      default:
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	76fb      	strb	r3, [r7, #27]
        break;
 800316e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d90a      	bls.n	800318c <UART_SetConfig+0x60c>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317c:	d206      	bcs.n	800318c <UART_SetConfig+0x60c>
    {
      huart->Instance->BRR = usartdiv;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	e003      	b.n	8003190 <UART_SetConfig+0x610>
 8003188:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800319c:	7efb      	ldrb	r3, [r7, #27]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3728      	adds	r7, #40	; 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080031a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01a      	beq.n	80032be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d10a      	bne.n	80032be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe fe6b 	bl	8001fd4 <HAL_GetTick>
 80032fe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b08      	cmp	r3, #8
 800330c:	d10e      	bne.n	800332c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800330e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f82a 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e020      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d10e      	bne.n	8003358 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 f814 	bl	8003376 <UART_WaitOnFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e00a      	b.n	800336e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2220      	movs	r2, #32
 800335c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	603b      	str	r3, [r7, #0]
 8003382:	4613      	mov	r3, r2
 8003384:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003386:	e05d      	b.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d059      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003390:	f7fe fe20 	bl	8001fd4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11b      	bne.n	80033de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e042      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d02b      	beq.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fa:	d123      	bne.n	8003444 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003404:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003414:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2220      	movs	r2, #32
 8003430:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e00f      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4013      	ands	r3, r2
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	429a      	cmp	r2, r3
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	461a      	mov	r2, r3
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	429a      	cmp	r2, r3
 8003460:	d092      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003482:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fb4e 	bl	8002b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ee:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff fb2b 	bl	8002b58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_GPIO_SetPinMode>:
{
 800351e:	b480      	push	{r7}
 8003520:	b089      	sub	sp, #36	; 0x24
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	2103      	movs	r1, #3
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43db      	mvns	r3, r3
 800354c:	401a      	ands	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa93 f3a3 	rbit	r3, r3
 8003558:	61bb      	str	r3, [r7, #24]
  return result;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	431a      	orrs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	3724      	adds	r7, #36	; 0x24
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_GPIO_SetPinOutputType>:
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	43db      	mvns	r3, r3
 8003590:	401a      	ands	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	fb01 f303 	mul.w	r3, r1, r3
 800359a:	431a      	orrs	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	605a      	str	r2, [r3, #4]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_GPIO_SetPinSpeed>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	fa93 f3a3 	rbit	r3, r3
 80035c6:	613b      	str	r3, [r7, #16]
  return result;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	2103      	movs	r1, #3
 80035d4:	fa01 f303 	lsl.w	r3, r1, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	401a      	ands	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	fa93 f3a3 	rbit	r3, r3
 80035e6:	61bb      	str	r3, [r7, #24]
  return result;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	fa01 f303 	lsl.w	r3, r1, r3
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	609a      	str	r2, [r3, #8]
}
 80035fe:	bf00      	nop
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <LL_GPIO_SetPinPull>:
{
 800360a:	b480      	push	{r7}
 800360c:	b089      	sub	sp, #36	; 0x24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	613b      	str	r3, [r7, #16]
  return result;
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2103      	movs	r1, #3
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	401a      	ands	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	61bb      	str	r3, [r7, #24]
  return result;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	fab3 f383 	clz	r3, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	fa01 f303 	lsl.w	r3, r1, r3
 8003656:	431a      	orrs	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	60da      	str	r2, [r3, #12]
}
 800365c:	bf00      	nop
 800365e:	3724      	adds	r7, #36	; 0x24
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_GPIO_SetAFPin_0_7>:
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	fa93 f3a3 	rbit	r3, r3
 8003682:	613b      	str	r3, [r7, #16]
  return result;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	210f      	movs	r1, #15
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	401a      	ands	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	61bb      	str	r3, [r7, #24]
  return result;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	; 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_GPIO_SetAFPin_8_15>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	b089      	sub	sp, #36	; 0x24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	613b      	str	r3, [r7, #16]
  return result;
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	fab3 f383 	clz	r3, r3
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	210f      	movs	r1, #15
 80036f0:	fa01 f303 	lsl.w	r3, r1, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	401a      	ands	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa93 f3a3 	rbit	r3, r3
 8003704:	61bb      	str	r3, [r7, #24]
  return result;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800371c:	bf00      	nop
 800371e:	3724      	adds	r7, #36	; 0x24
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	60bb      	str	r3, [r7, #8]
  return result;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	fab3 f383 	clz	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800374a:	e040      	b.n	80037ce <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d032      	beq.n	80037c8 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	461a      	mov	r2, r3
 8003768:	6939      	ldr	r1, [r7, #16]
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fed7 	bl	800351e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d003      	beq.n	8003780 <LL_GPIO_Init+0x58>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d106      	bne.n	800378e <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	461a      	mov	r2, r3
 8003786:	6939      	ldr	r1, [r7, #16]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff0f 	bl	80035ac <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	461a      	mov	r2, r3
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7ff ff37 	bl	800360a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d111      	bne.n	80037c8 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	2bff      	cmp	r3, #255	; 0xff
 80037a8:	d807      	bhi.n	80037ba <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff58 	bl	8003668 <LL_GPIO_SetAFPin_0_7>
 80037b8:	e006      	b.n	80037c8 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	461a      	mov	r2, r3
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ff7f 	bl	80036c6 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3301      	adds	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	fa22 f303 	lsr.w	r3, r2, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1b7      	bne.n	800374c <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d003      	beq.n	80037ec <LL_GPIO_Init+0xc4>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d107      	bne.n	80037fc <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	6819      	ldr	r1, [r3, #0]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff fec0 	bl	800357c <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <LL_I2C_Enable>:
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	601a      	str	r2, [r3, #0]
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_I2C_Disable>:
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0201 	bic.w	r2, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <LL_I2C_ConfigFilters>:
{
 8003846:	b480      	push	{r7}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	60f8      	str	r0, [r7, #12]
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0219      	lsls	r1, r3, #8
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	430b      	orrs	r3, r1
 8003862:	431a      	orrs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	601a      	str	r2, [r3, #0]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <LL_I2C_SetOwnAddress1>:
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003888:	f023 0307 	bic.w	r3, r3, #7
 800388c:	68b9      	ldr	r1, [r7, #8]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	430a      	orrs	r2, r1
 8003892:	431a      	orrs	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_I2C_EnableOwnAddress1>:
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_I2C_DisableOwnAddress1>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_I2C_SetTiming>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	611a      	str	r2, [r3, #16]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <LL_I2C_SetMode>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_I2C_AcknowledgeNextData>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	605a      	str	r2, [r3, #4]
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff65 	bl	8003826 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	461a      	mov	r2, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff6d 	bl	8003846 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffb6 	bl	80038e4 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff44 	bl	8003806 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffa0 	bl	80038c4 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	6919      	ldr	r1, [r3, #16]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	461a      	mov	r2, r3
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff70 	bl	8003874 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff81 	bl	80038a4 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7ff ffa9 	bl	8003900 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffb6 	bl	8003926 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3708      	adds	r7, #8
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <LL_SPI_IsEnabled>:
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d4:	2b40      	cmp	r3, #64	; 0x40
 80039d6:	d101      	bne.n	80039dc <LL_SPI_IsEnabled+0x18>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <LL_SPI_IsEnabled+0x1a>
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_SPI_SetCRCPolynomial>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr

08003a0a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff ffd3 	bl	80039c4 <LL_SPI_IsEnabled>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d13b      	bne.n	8003a9c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a2c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	6811      	ldr	r1, [r2, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	6852      	ldr	r2, [r2, #4]
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	6912      	ldr	r2, [r2, #16]
 8003a44:	4311      	orrs	r1, r2
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	6952      	ldr	r2, [r2, #20]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	6992      	ldr	r2, [r2, #24]
 8003a50:	4311      	orrs	r1, r2
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	69d2      	ldr	r2, [r2, #28]
 8003a56:	4311      	orrs	r1, r2
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	6a12      	ldr	r2, [r2, #32]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a6c:	f023 0304 	bic.w	r3, r3, #4
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	6891      	ldr	r1, [r2, #8]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	6952      	ldr	r2, [r2, #20]
 8003a78:	0c12      	lsrs	r2, r2, #16
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a8a:	d105      	bne.n	8003a98 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffa9 	bl	80039ea <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <LL_mDelay+0x48>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003aba:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d00c      	beq.n	8003ade <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8003aca:	e008      	b.n	8003ade <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <LL_mDelay+0x48>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1f3      	bne.n	8003acc <LL_mDelay+0x24>
    }
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	e000e010 	.word	0xe000e010

08003af4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003afc:	4a04      	ldr	r2, [pc, #16]	; (8003b10 <LL_SetSystemCoreClock+0x1c>)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6013      	str	r3, [r2, #0]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000004 	.word	0x20000004

08003b14 <__errno>:
 8003b14:	4b01      	ldr	r3, [pc, #4]	; (8003b1c <__errno+0x8>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000010 	.word	0x20000010

08003b20 <__libc_init_array>:
 8003b20:	b570      	push	{r4, r5, r6, lr}
 8003b22:	4e0d      	ldr	r6, [pc, #52]	; (8003b58 <__libc_init_array+0x38>)
 8003b24:	4c0d      	ldr	r4, [pc, #52]	; (8003b5c <__libc_init_array+0x3c>)
 8003b26:	1ba4      	subs	r4, r4, r6
 8003b28:	10a4      	asrs	r4, r4, #2
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	42a5      	cmp	r5, r4
 8003b2e:	d109      	bne.n	8003b44 <__libc_init_array+0x24>
 8003b30:	4e0b      	ldr	r6, [pc, #44]	; (8003b60 <__libc_init_array+0x40>)
 8003b32:	4c0c      	ldr	r4, [pc, #48]	; (8003b64 <__libc_init_array+0x44>)
 8003b34:	f002 fb46 	bl	80061c4 <_init>
 8003b38:	1ba4      	subs	r4, r4, r6
 8003b3a:	10a4      	asrs	r4, r4, #2
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	42a5      	cmp	r5, r4
 8003b40:	d105      	bne.n	8003b4e <__libc_init_array+0x2e>
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b48:	4798      	blx	r3
 8003b4a:	3501      	adds	r5, #1
 8003b4c:	e7ee      	b.n	8003b2c <__libc_init_array+0xc>
 8003b4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b52:	4798      	blx	r3
 8003b54:	3501      	adds	r5, #1
 8003b56:	e7f2      	b.n	8003b3e <__libc_init_array+0x1e>
 8003b58:	080064f8 	.word	0x080064f8
 8003b5c:	080064f8 	.word	0x080064f8
 8003b60:	080064f8 	.word	0x080064f8
 8003b64:	080064fc 	.word	0x080064fc

08003b68 <memset>:
 8003b68:	4402      	add	r2, r0
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <memset+0xa>
 8003b70:	4770      	bx	lr
 8003b72:	f803 1b01 	strb.w	r1, [r3], #1
 8003b76:	e7f9      	b.n	8003b6c <memset+0x4>

08003b78 <__cvt>:
 8003b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b7c:	ec55 4b10 	vmov	r4, r5, d0
 8003b80:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003b82:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	460e      	mov	r6, r1
 8003b8a:	4691      	mov	r9, r2
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	bfb8      	it	lt
 8003b90:	4622      	movlt	r2, r4
 8003b92:	462b      	mov	r3, r5
 8003b94:	f027 0720 	bic.w	r7, r7, #32
 8003b98:	bfbb      	ittet	lt
 8003b9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003b9e:	461d      	movlt	r5, r3
 8003ba0:	2300      	movge	r3, #0
 8003ba2:	232d      	movlt	r3, #45	; 0x2d
 8003ba4:	bfb8      	it	lt
 8003ba6:	4614      	movlt	r4, r2
 8003ba8:	2f46      	cmp	r7, #70	; 0x46
 8003baa:	700b      	strb	r3, [r1, #0]
 8003bac:	d004      	beq.n	8003bb8 <__cvt+0x40>
 8003bae:	2f45      	cmp	r7, #69	; 0x45
 8003bb0:	d100      	bne.n	8003bb4 <__cvt+0x3c>
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	e000      	b.n	8003bba <__cvt+0x42>
 8003bb8:	2103      	movs	r1, #3
 8003bba:	ab03      	add	r3, sp, #12
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	ab02      	add	r3, sp, #8
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	4632      	mov	r2, r6
 8003bc4:	4653      	mov	r3, sl
 8003bc6:	ec45 4b10 	vmov	d0, r4, r5
 8003bca:	f000 fd95 	bl	80046f8 <_dtoa_r>
 8003bce:	2f47      	cmp	r7, #71	; 0x47
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	d102      	bne.n	8003bda <__cvt+0x62>
 8003bd4:	f019 0f01 	tst.w	r9, #1
 8003bd8:	d026      	beq.n	8003c28 <__cvt+0xb0>
 8003bda:	2f46      	cmp	r7, #70	; 0x46
 8003bdc:	eb08 0906 	add.w	r9, r8, r6
 8003be0:	d111      	bne.n	8003c06 <__cvt+0x8e>
 8003be2:	f898 3000 	ldrb.w	r3, [r8]
 8003be6:	2b30      	cmp	r3, #48	; 0x30
 8003be8:	d10a      	bne.n	8003c00 <__cvt+0x88>
 8003bea:	2200      	movs	r2, #0
 8003bec:	2300      	movs	r3, #0
 8003bee:	4620      	mov	r0, r4
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	f7fc ff69 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bf6:	b918      	cbnz	r0, 8003c00 <__cvt+0x88>
 8003bf8:	f1c6 0601 	rsb	r6, r6, #1
 8003bfc:	f8ca 6000 	str.w	r6, [sl]
 8003c00:	f8da 3000 	ldr.w	r3, [sl]
 8003c04:	4499      	add	r9, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	2300      	movs	r3, #0
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	f7fc ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c12:	b938      	cbnz	r0, 8003c24 <__cvt+0xac>
 8003c14:	2230      	movs	r2, #48	; 0x30
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	454b      	cmp	r3, r9
 8003c1a:	d205      	bcs.n	8003c28 <__cvt+0xb0>
 8003c1c:	1c59      	adds	r1, r3, #1
 8003c1e:	9103      	str	r1, [sp, #12]
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	e7f8      	b.n	8003c16 <__cvt+0x9e>
 8003c24:	f8cd 900c 	str.w	r9, [sp, #12]
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c2c:	eba3 0308 	sub.w	r3, r3, r8
 8003c30:	4640      	mov	r0, r8
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	b004      	add	sp, #16
 8003c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003c3a <__exponent>:
 8003c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	bfba      	itte	lt
 8003c42:	4249      	neglt	r1, r1
 8003c44:	232d      	movlt	r3, #45	; 0x2d
 8003c46:	232b      	movge	r3, #43	; 0x2b
 8003c48:	2909      	cmp	r1, #9
 8003c4a:	f804 2b02 	strb.w	r2, [r4], #2
 8003c4e:	7043      	strb	r3, [r0, #1]
 8003c50:	dd20      	ble.n	8003c94 <__exponent+0x5a>
 8003c52:	f10d 0307 	add.w	r3, sp, #7
 8003c56:	461f      	mov	r7, r3
 8003c58:	260a      	movs	r6, #10
 8003c5a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003c5e:	fb06 1115 	mls	r1, r6, r5, r1
 8003c62:	3130      	adds	r1, #48	; 0x30
 8003c64:	2d09      	cmp	r5, #9
 8003c66:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003c6a:	f103 32ff 	add.w	r2, r3, #4294967295
 8003c6e:	4629      	mov	r1, r5
 8003c70:	dc09      	bgt.n	8003c86 <__exponent+0x4c>
 8003c72:	3130      	adds	r1, #48	; 0x30
 8003c74:	3b02      	subs	r3, #2
 8003c76:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003c7a:	42bb      	cmp	r3, r7
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	d304      	bcc.n	8003c8a <__exponent+0x50>
 8003c80:	1a10      	subs	r0, r2, r0
 8003c82:	b003      	add	sp, #12
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	4613      	mov	r3, r2
 8003c88:	e7e7      	b.n	8003c5a <__exponent+0x20>
 8003c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c8e:	f804 2b01 	strb.w	r2, [r4], #1
 8003c92:	e7f2      	b.n	8003c7a <__exponent+0x40>
 8003c94:	2330      	movs	r3, #48	; 0x30
 8003c96:	4419      	add	r1, r3
 8003c98:	7083      	strb	r3, [r0, #2]
 8003c9a:	1d02      	adds	r2, r0, #4
 8003c9c:	70c1      	strb	r1, [r0, #3]
 8003c9e:	e7ef      	b.n	8003c80 <__exponent+0x46>

08003ca0 <_printf_float>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	b08d      	sub	sp, #52	; 0x34
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003cac:	4616      	mov	r6, r2
 8003cae:	461f      	mov	r7, r3
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	f001 fc53 	bl	800555c <_localeconv_r>
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	9304      	str	r3, [sp, #16]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fa88 	bl	80001d0 <strlen>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	930a      	str	r3, [sp, #40]	; 0x28
 8003cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8003cc8:	9005      	str	r0, [sp, #20]
 8003cca:	3307      	adds	r3, #7
 8003ccc:	f023 0307 	bic.w	r3, r3, #7
 8003cd0:	f103 0208 	add.w	r2, r3, #8
 8003cd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003cd8:	f8d4 b000 	ldr.w	fp, [r4]
 8003cdc:	f8c8 2000 	str.w	r2, [r8]
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ce8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003cec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003cf0:	9307      	str	r3, [sp, #28]
 8003cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cfa:	4ba7      	ldr	r3, [pc, #668]	; (8003f98 <_printf_float+0x2f8>)
 8003cfc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d00:	f7fc ff14 	bl	8000b2c <__aeabi_dcmpun>
 8003d04:	bb70      	cbnz	r0, 8003d64 <_printf_float+0xc4>
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	4ba3      	ldr	r3, [pc, #652]	; (8003f98 <_printf_float+0x2f8>)
 8003d0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003d10:	f7fc feee 	bl	8000af0 <__aeabi_dcmple>
 8003d14:	bb30      	cbnz	r0, 8003d64 <_printf_float+0xc4>
 8003d16:	2200      	movs	r2, #0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	4640      	mov	r0, r8
 8003d1c:	4649      	mov	r1, r9
 8003d1e:	f7fc fedd 	bl	8000adc <__aeabi_dcmplt>
 8003d22:	b110      	cbz	r0, 8003d2a <_printf_float+0x8a>
 8003d24:	232d      	movs	r3, #45	; 0x2d
 8003d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d2a:	4a9c      	ldr	r2, [pc, #624]	; (8003f9c <_printf_float+0x2fc>)
 8003d2c:	4b9c      	ldr	r3, [pc, #624]	; (8003fa0 <_printf_float+0x300>)
 8003d2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003d32:	bf8c      	ite	hi
 8003d34:	4690      	movhi	r8, r2
 8003d36:	4698      	movls	r8, r3
 8003d38:	2303      	movs	r3, #3
 8003d3a:	f02b 0204 	bic.w	r2, fp, #4
 8003d3e:	6123      	str	r3, [r4, #16]
 8003d40:	6022      	str	r2, [r4, #0]
 8003d42:	f04f 0900 	mov.w	r9, #0
 8003d46:	9700      	str	r7, [sp, #0]
 8003d48:	4633      	mov	r3, r6
 8003d4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003d4c:	4621      	mov	r1, r4
 8003d4e:	4628      	mov	r0, r5
 8003d50:	f000 f9e6 	bl	8004120 <_printf_common>
 8003d54:	3001      	adds	r0, #1
 8003d56:	f040 808d 	bne.w	8003e74 <_printf_float+0x1d4>
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	b00d      	add	sp, #52	; 0x34
 8003d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d64:	4642      	mov	r2, r8
 8003d66:	464b      	mov	r3, r9
 8003d68:	4640      	mov	r0, r8
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	f7fc fede 	bl	8000b2c <__aeabi_dcmpun>
 8003d70:	b110      	cbz	r0, 8003d78 <_printf_float+0xd8>
 8003d72:	4a8c      	ldr	r2, [pc, #560]	; (8003fa4 <_printf_float+0x304>)
 8003d74:	4b8c      	ldr	r3, [pc, #560]	; (8003fa8 <_printf_float+0x308>)
 8003d76:	e7da      	b.n	8003d2e <_printf_float+0x8e>
 8003d78:	6861      	ldr	r1, [r4, #4]
 8003d7a:	1c4b      	adds	r3, r1, #1
 8003d7c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003d80:	a80a      	add	r0, sp, #40	; 0x28
 8003d82:	d13e      	bne.n	8003e02 <_printf_float+0x162>
 8003d84:	2306      	movs	r3, #6
 8003d86:	6063      	str	r3, [r4, #4]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003d8e:	ab09      	add	r3, sp, #36	; 0x24
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	ec49 8b10 	vmov	d0, r8, r9
 8003d96:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003d9a:	6022      	str	r2, [r4, #0]
 8003d9c:	f8cd a004 	str.w	sl, [sp, #4]
 8003da0:	6861      	ldr	r1, [r4, #4]
 8003da2:	4628      	mov	r0, r5
 8003da4:	f7ff fee8 	bl	8003b78 <__cvt>
 8003da8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003dac:	2b47      	cmp	r3, #71	; 0x47
 8003dae:	4680      	mov	r8, r0
 8003db0:	d109      	bne.n	8003dc6 <_printf_float+0x126>
 8003db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db4:	1cd8      	adds	r0, r3, #3
 8003db6:	db02      	blt.n	8003dbe <_printf_float+0x11e>
 8003db8:	6862      	ldr	r2, [r4, #4]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	dd47      	ble.n	8003e4e <_printf_float+0x1ae>
 8003dbe:	f1aa 0a02 	sub.w	sl, sl, #2
 8003dc2:	fa5f fa8a 	uxtb.w	sl, sl
 8003dc6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003dcc:	d824      	bhi.n	8003e18 <_printf_float+0x178>
 8003dce:	3901      	subs	r1, #1
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003dd6:	9109      	str	r1, [sp, #36]	; 0x24
 8003dd8:	f7ff ff2f 	bl	8003c3a <__exponent>
 8003ddc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dde:	1813      	adds	r3, r2, r0
 8003de0:	2a01      	cmp	r2, #1
 8003de2:	4681      	mov	r9, r0
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	dc02      	bgt.n	8003dee <_printf_float+0x14e>
 8003de8:	6822      	ldr	r2, [r4, #0]
 8003dea:	07d1      	lsls	r1, r2, #31
 8003dec:	d501      	bpl.n	8003df2 <_printf_float+0x152>
 8003dee:	3301      	adds	r3, #1
 8003df0:	6123      	str	r3, [r4, #16]
 8003df2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0a5      	beq.n	8003d46 <_printf_float+0xa6>
 8003dfa:	232d      	movs	r3, #45	; 0x2d
 8003dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e00:	e7a1      	b.n	8003d46 <_printf_float+0xa6>
 8003e02:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003e06:	f000 8177 	beq.w	80040f8 <_printf_float+0x458>
 8003e0a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e0e:	d1bb      	bne.n	8003d88 <_printf_float+0xe8>
 8003e10:	2900      	cmp	r1, #0
 8003e12:	d1b9      	bne.n	8003d88 <_printf_float+0xe8>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e7b6      	b.n	8003d86 <_printf_float+0xe6>
 8003e18:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003e1c:	d119      	bne.n	8003e52 <_printf_float+0x1b2>
 8003e1e:	2900      	cmp	r1, #0
 8003e20:	6863      	ldr	r3, [r4, #4]
 8003e22:	dd0c      	ble.n	8003e3e <_printf_float+0x19e>
 8003e24:	6121      	str	r1, [r4, #16]
 8003e26:	b913      	cbnz	r3, 8003e2e <_printf_float+0x18e>
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	07d2      	lsls	r2, r2, #31
 8003e2c:	d502      	bpl.n	8003e34 <_printf_float+0x194>
 8003e2e:	3301      	adds	r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	6123      	str	r3, [r4, #16]
 8003e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e36:	65a3      	str	r3, [r4, #88]	; 0x58
 8003e38:	f04f 0900 	mov.w	r9, #0
 8003e3c:	e7d9      	b.n	8003df2 <_printf_float+0x152>
 8003e3e:	b913      	cbnz	r3, 8003e46 <_printf_float+0x1a6>
 8003e40:	6822      	ldr	r2, [r4, #0]
 8003e42:	07d0      	lsls	r0, r2, #31
 8003e44:	d501      	bpl.n	8003e4a <_printf_float+0x1aa>
 8003e46:	3302      	adds	r3, #2
 8003e48:	e7f3      	b.n	8003e32 <_printf_float+0x192>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e7f1      	b.n	8003e32 <_printf_float+0x192>
 8003e4e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003e52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e56:	4293      	cmp	r3, r2
 8003e58:	db05      	blt.n	8003e66 <_printf_float+0x1c6>
 8003e5a:	6822      	ldr	r2, [r4, #0]
 8003e5c:	6123      	str	r3, [r4, #16]
 8003e5e:	07d1      	lsls	r1, r2, #31
 8003e60:	d5e8      	bpl.n	8003e34 <_printf_float+0x194>
 8003e62:	3301      	adds	r3, #1
 8003e64:	e7e5      	b.n	8003e32 <_printf_float+0x192>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfd4      	ite	le
 8003e6a:	f1c3 0302 	rsble	r3, r3, #2
 8003e6e:	2301      	movgt	r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	e7de      	b.n	8003e32 <_printf_float+0x192>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	055a      	lsls	r2, r3, #21
 8003e78:	d407      	bmi.n	8003e8a <_printf_float+0x1ea>
 8003e7a:	6923      	ldr	r3, [r4, #16]
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	4631      	mov	r1, r6
 8003e80:	4628      	mov	r0, r5
 8003e82:	47b8      	blx	r7
 8003e84:	3001      	adds	r0, #1
 8003e86:	d12b      	bne.n	8003ee0 <_printf_float+0x240>
 8003e88:	e767      	b.n	8003d5a <_printf_float+0xba>
 8003e8a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003e8e:	f240 80dc 	bls.w	800404a <_printf_float+0x3aa>
 8003e92:	2200      	movs	r2, #0
 8003e94:	2300      	movs	r3, #0
 8003e96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e9a:	f7fc fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d033      	beq.n	8003f0a <_printf_float+0x26a>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	4a41      	ldr	r2, [pc, #260]	; (8003fac <_printf_float+0x30c>)
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b8      	blx	r7
 8003eac:	3001      	adds	r0, #1
 8003eae:	f43f af54 	beq.w	8003d5a <_printf_float+0xba>
 8003eb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	db02      	blt.n	8003ec0 <_printf_float+0x220>
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	07d8      	lsls	r0, r3, #31
 8003ebe:	d50f      	bpl.n	8003ee0 <_printf_float+0x240>
 8003ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	47b8      	blx	r7
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f43f af45 	beq.w	8003d5a <_printf_float+0xba>
 8003ed0:	f04f 0800 	mov.w	r8, #0
 8003ed4:	f104 091a 	add.w	r9, r4, #26
 8003ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	4543      	cmp	r3, r8
 8003ede:	dc09      	bgt.n	8003ef4 <_printf_float+0x254>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	079b      	lsls	r3, r3, #30
 8003ee4:	f100 8103 	bmi.w	80040ee <_printf_float+0x44e>
 8003ee8:	68e0      	ldr	r0, [r4, #12]
 8003eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003eec:	4298      	cmp	r0, r3
 8003eee:	bfb8      	it	lt
 8003ef0:	4618      	movlt	r0, r3
 8003ef2:	e734      	b.n	8003d5e <_printf_float+0xbe>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	464a      	mov	r2, r9
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4628      	mov	r0, r5
 8003efc:	47b8      	blx	r7
 8003efe:	3001      	adds	r0, #1
 8003f00:	f43f af2b 	beq.w	8003d5a <_printf_float+0xba>
 8003f04:	f108 0801 	add.w	r8, r8, #1
 8003f08:	e7e6      	b.n	8003ed8 <_printf_float+0x238>
 8003f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	dc2b      	bgt.n	8003f68 <_printf_float+0x2c8>
 8003f10:	2301      	movs	r3, #1
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <_printf_float+0x30c>)
 8003f14:	4631      	mov	r1, r6
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f43f af1d 	beq.w	8003d5a <_printf_float+0xba>
 8003f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f22:	b923      	cbnz	r3, 8003f2e <_printf_float+0x28e>
 8003f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f26:	b913      	cbnz	r3, 8003f2e <_printf_float+0x28e>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	07d9      	lsls	r1, r3, #31
 8003f2c:	d5d8      	bpl.n	8003ee0 <_printf_float+0x240>
 8003f2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f32:	4631      	mov	r1, r6
 8003f34:	4628      	mov	r0, r5
 8003f36:	47b8      	blx	r7
 8003f38:	3001      	adds	r0, #1
 8003f3a:	f43f af0e 	beq.w	8003d5a <_printf_float+0xba>
 8003f3e:	f04f 0900 	mov.w	r9, #0
 8003f42:	f104 0a1a 	add.w	sl, r4, #26
 8003f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f48:	425b      	negs	r3, r3
 8003f4a:	454b      	cmp	r3, r9
 8003f4c:	dc01      	bgt.n	8003f52 <_printf_float+0x2b2>
 8003f4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f50:	e794      	b.n	8003e7c <_printf_float+0x1dc>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4652      	mov	r2, sl
 8003f56:	4631      	mov	r1, r6
 8003f58:	4628      	mov	r0, r5
 8003f5a:	47b8      	blx	r7
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	f43f aefc 	beq.w	8003d5a <_printf_float+0xba>
 8003f62:	f109 0901 	add.w	r9, r9, #1
 8003f66:	e7ee      	b.n	8003f46 <_printf_float+0x2a6>
 8003f68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	bfa8      	it	ge
 8003f70:	461a      	movge	r2, r3
 8003f72:	2a00      	cmp	r2, #0
 8003f74:	4691      	mov	r9, r2
 8003f76:	dd07      	ble.n	8003f88 <_printf_float+0x2e8>
 8003f78:	4613      	mov	r3, r2
 8003f7a:	4631      	mov	r1, r6
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	f43f aee9 	beq.w	8003d5a <_printf_float+0xba>
 8003f88:	f104 031a 	add.w	r3, r4, #26
 8003f8c:	f04f 0b00 	mov.w	fp, #0
 8003f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f94:	9306      	str	r3, [sp, #24]
 8003f96:	e015      	b.n	8003fc4 <_printf_float+0x324>
 8003f98:	7fefffff 	.word	0x7fefffff
 8003f9c:	08006234 	.word	0x08006234
 8003fa0:	08006230 	.word	0x08006230
 8003fa4:	0800623c 	.word	0x0800623c
 8003fa8:	08006238 	.word	0x08006238
 8003fac:	08006240 	.word	0x08006240
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9a06      	ldr	r2, [sp, #24]
 8003fb4:	4631      	mov	r1, r6
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	47b8      	blx	r7
 8003fba:	3001      	adds	r0, #1
 8003fbc:	f43f aecd 	beq.w	8003d5a <_printf_float+0xba>
 8003fc0:	f10b 0b01 	add.w	fp, fp, #1
 8003fc4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003fc8:	ebaa 0309 	sub.w	r3, sl, r9
 8003fcc:	455b      	cmp	r3, fp
 8003fce:	dcef      	bgt.n	8003fb0 <_printf_float+0x310>
 8003fd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	44d0      	add	r8, sl
 8003fd8:	db15      	blt.n	8004006 <_printf_float+0x366>
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	07da      	lsls	r2, r3, #31
 8003fde:	d412      	bmi.n	8004006 <_printf_float+0x366>
 8003fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fe2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fe4:	eba3 020a 	sub.w	r2, r3, sl
 8003fe8:	eba3 0a01 	sub.w	sl, r3, r1
 8003fec:	4592      	cmp	sl, r2
 8003fee:	bfa8      	it	ge
 8003ff0:	4692      	movge	sl, r2
 8003ff2:	f1ba 0f00 	cmp.w	sl, #0
 8003ff6:	dc0e      	bgt.n	8004016 <_printf_float+0x376>
 8003ff8:	f04f 0800 	mov.w	r8, #0
 8003ffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004000:	f104 091a 	add.w	r9, r4, #26
 8004004:	e019      	b.n	800403a <_printf_float+0x39a>
 8004006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800400a:	4631      	mov	r1, r6
 800400c:	4628      	mov	r0, r5
 800400e:	47b8      	blx	r7
 8004010:	3001      	adds	r0, #1
 8004012:	d1e5      	bne.n	8003fe0 <_printf_float+0x340>
 8004014:	e6a1      	b.n	8003d5a <_printf_float+0xba>
 8004016:	4653      	mov	r3, sl
 8004018:	4642      	mov	r2, r8
 800401a:	4631      	mov	r1, r6
 800401c:	4628      	mov	r0, r5
 800401e:	47b8      	blx	r7
 8004020:	3001      	adds	r0, #1
 8004022:	d1e9      	bne.n	8003ff8 <_printf_float+0x358>
 8004024:	e699      	b.n	8003d5a <_printf_float+0xba>
 8004026:	2301      	movs	r3, #1
 8004028:	464a      	mov	r2, r9
 800402a:	4631      	mov	r1, r6
 800402c:	4628      	mov	r0, r5
 800402e:	47b8      	blx	r7
 8004030:	3001      	adds	r0, #1
 8004032:	f43f ae92 	beq.w	8003d5a <_printf_float+0xba>
 8004036:	f108 0801 	add.w	r8, r8, #1
 800403a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	eba3 030a 	sub.w	r3, r3, sl
 8004044:	4543      	cmp	r3, r8
 8004046:	dcee      	bgt.n	8004026 <_printf_float+0x386>
 8004048:	e74a      	b.n	8003ee0 <_printf_float+0x240>
 800404a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800404c:	2a01      	cmp	r2, #1
 800404e:	dc01      	bgt.n	8004054 <_printf_float+0x3b4>
 8004050:	07db      	lsls	r3, r3, #31
 8004052:	d53a      	bpl.n	80040ca <_printf_float+0x42a>
 8004054:	2301      	movs	r3, #1
 8004056:	4642      	mov	r2, r8
 8004058:	4631      	mov	r1, r6
 800405a:	4628      	mov	r0, r5
 800405c:	47b8      	blx	r7
 800405e:	3001      	adds	r0, #1
 8004060:	f43f ae7b 	beq.w	8003d5a <_printf_float+0xba>
 8004064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004068:	4631      	mov	r1, r6
 800406a:	4628      	mov	r0, r5
 800406c:	47b8      	blx	r7
 800406e:	3001      	adds	r0, #1
 8004070:	f108 0801 	add.w	r8, r8, #1
 8004074:	f43f ae71 	beq.w	8003d5a <_printf_float+0xba>
 8004078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800407a:	2200      	movs	r2, #0
 800407c:	f103 3aff 	add.w	sl, r3, #4294967295
 8004080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004084:	2300      	movs	r3, #0
 8004086:	f7fc fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800408a:	b9c8      	cbnz	r0, 80040c0 <_printf_float+0x420>
 800408c:	4653      	mov	r3, sl
 800408e:	4642      	mov	r2, r8
 8004090:	4631      	mov	r1, r6
 8004092:	4628      	mov	r0, r5
 8004094:	47b8      	blx	r7
 8004096:	3001      	adds	r0, #1
 8004098:	d10e      	bne.n	80040b8 <_printf_float+0x418>
 800409a:	e65e      	b.n	8003d5a <_printf_float+0xba>
 800409c:	2301      	movs	r3, #1
 800409e:	4652      	mov	r2, sl
 80040a0:	4631      	mov	r1, r6
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b8      	blx	r7
 80040a6:	3001      	adds	r0, #1
 80040a8:	f43f ae57 	beq.w	8003d5a <_printf_float+0xba>
 80040ac:	f108 0801 	add.w	r8, r8, #1
 80040b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4543      	cmp	r3, r8
 80040b6:	dcf1      	bgt.n	800409c <_printf_float+0x3fc>
 80040b8:	464b      	mov	r3, r9
 80040ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80040be:	e6de      	b.n	8003e7e <_printf_float+0x1de>
 80040c0:	f04f 0800 	mov.w	r8, #0
 80040c4:	f104 0a1a 	add.w	sl, r4, #26
 80040c8:	e7f2      	b.n	80040b0 <_printf_float+0x410>
 80040ca:	2301      	movs	r3, #1
 80040cc:	e7df      	b.n	800408e <_printf_float+0x3ee>
 80040ce:	2301      	movs	r3, #1
 80040d0:	464a      	mov	r2, r9
 80040d2:	4631      	mov	r1, r6
 80040d4:	4628      	mov	r0, r5
 80040d6:	47b8      	blx	r7
 80040d8:	3001      	adds	r0, #1
 80040da:	f43f ae3e 	beq.w	8003d5a <_printf_float+0xba>
 80040de:	f108 0801 	add.w	r8, r8, #1
 80040e2:	68e3      	ldr	r3, [r4, #12]
 80040e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	4543      	cmp	r3, r8
 80040ea:	dcf0      	bgt.n	80040ce <_printf_float+0x42e>
 80040ec:	e6fc      	b.n	8003ee8 <_printf_float+0x248>
 80040ee:	f04f 0800 	mov.w	r8, #0
 80040f2:	f104 0919 	add.w	r9, r4, #25
 80040f6:	e7f4      	b.n	80040e2 <_printf_float+0x442>
 80040f8:	2900      	cmp	r1, #0
 80040fa:	f43f ae8b 	beq.w	8003e14 <_printf_float+0x174>
 80040fe:	2300      	movs	r3, #0
 8004100:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004104:	ab09      	add	r3, sp, #36	; 0x24
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	ec49 8b10 	vmov	d0, r8, r9
 800410c:	6022      	str	r2, [r4, #0]
 800410e:	f8cd a004 	str.w	sl, [sp, #4]
 8004112:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004116:	4628      	mov	r0, r5
 8004118:	f7ff fd2e 	bl	8003b78 <__cvt>
 800411c:	4680      	mov	r8, r0
 800411e:	e648      	b.n	8003db2 <_printf_float+0x112>

08004120 <_printf_common>:
 8004120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004124:	4691      	mov	r9, r2
 8004126:	461f      	mov	r7, r3
 8004128:	688a      	ldr	r2, [r1, #8]
 800412a:	690b      	ldr	r3, [r1, #16]
 800412c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004130:	4293      	cmp	r3, r2
 8004132:	bfb8      	it	lt
 8004134:	4613      	movlt	r3, r2
 8004136:	f8c9 3000 	str.w	r3, [r9]
 800413a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	b112      	cbz	r2, 800414a <_printf_common+0x2a>
 8004144:	3301      	adds	r3, #1
 8004146:	f8c9 3000 	str.w	r3, [r9]
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	0699      	lsls	r1, r3, #26
 800414e:	bf42      	ittt	mi
 8004150:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004154:	3302      	addmi	r3, #2
 8004156:	f8c9 3000 	strmi.w	r3, [r9]
 800415a:	6825      	ldr	r5, [r4, #0]
 800415c:	f015 0506 	ands.w	r5, r5, #6
 8004160:	d107      	bne.n	8004172 <_printf_common+0x52>
 8004162:	f104 0a19 	add.w	sl, r4, #25
 8004166:	68e3      	ldr	r3, [r4, #12]
 8004168:	f8d9 2000 	ldr.w	r2, [r9]
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	42ab      	cmp	r3, r5
 8004170:	dc28      	bgt.n	80041c4 <_printf_common+0xa4>
 8004172:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004176:	6822      	ldr	r2, [r4, #0]
 8004178:	3300      	adds	r3, #0
 800417a:	bf18      	it	ne
 800417c:	2301      	movne	r3, #1
 800417e:	0692      	lsls	r2, r2, #26
 8004180:	d42d      	bmi.n	80041de <_printf_common+0xbe>
 8004182:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004186:	4639      	mov	r1, r7
 8004188:	4630      	mov	r0, r6
 800418a:	47c0      	blx	r8
 800418c:	3001      	adds	r0, #1
 800418e:	d020      	beq.n	80041d2 <_printf_common+0xb2>
 8004190:	6823      	ldr	r3, [r4, #0]
 8004192:	68e5      	ldr	r5, [r4, #12]
 8004194:	f8d9 2000 	ldr.w	r2, [r9]
 8004198:	f003 0306 	and.w	r3, r3, #6
 800419c:	2b04      	cmp	r3, #4
 800419e:	bf08      	it	eq
 80041a0:	1aad      	subeq	r5, r5, r2
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	6922      	ldr	r2, [r4, #16]
 80041a6:	bf0c      	ite	eq
 80041a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041ac:	2500      	movne	r5, #0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bfc4      	itt	gt
 80041b2:	1a9b      	subgt	r3, r3, r2
 80041b4:	18ed      	addgt	r5, r5, r3
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	341a      	adds	r4, #26
 80041bc:	454d      	cmp	r5, r9
 80041be:	d11a      	bne.n	80041f6 <_printf_common+0xd6>
 80041c0:	2000      	movs	r0, #0
 80041c2:	e008      	b.n	80041d6 <_printf_common+0xb6>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4652      	mov	r2, sl
 80041c8:	4639      	mov	r1, r7
 80041ca:	4630      	mov	r0, r6
 80041cc:	47c0      	blx	r8
 80041ce:	3001      	adds	r0, #1
 80041d0:	d103      	bne.n	80041da <_printf_common+0xba>
 80041d2:	f04f 30ff 	mov.w	r0, #4294967295
 80041d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041da:	3501      	adds	r5, #1
 80041dc:	e7c3      	b.n	8004166 <_printf_common+0x46>
 80041de:	18e1      	adds	r1, r4, r3
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	2030      	movs	r0, #48	; 0x30
 80041e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041e8:	4422      	add	r2, r4
 80041ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041f2:	3302      	adds	r3, #2
 80041f4:	e7c5      	b.n	8004182 <_printf_common+0x62>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4622      	mov	r2, r4
 80041fa:	4639      	mov	r1, r7
 80041fc:	4630      	mov	r0, r6
 80041fe:	47c0      	blx	r8
 8004200:	3001      	adds	r0, #1
 8004202:	d0e6      	beq.n	80041d2 <_printf_common+0xb2>
 8004204:	f109 0901 	add.w	r9, r9, #1
 8004208:	e7d8      	b.n	80041bc <_printf_common+0x9c>
	...

0800420c <_printf_i>:
 800420c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004210:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004214:	460c      	mov	r4, r1
 8004216:	7e09      	ldrb	r1, [r1, #24]
 8004218:	b085      	sub	sp, #20
 800421a:	296e      	cmp	r1, #110	; 0x6e
 800421c:	4617      	mov	r7, r2
 800421e:	4606      	mov	r6, r0
 8004220:	4698      	mov	r8, r3
 8004222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004224:	f000 80b3 	beq.w	800438e <_printf_i+0x182>
 8004228:	d822      	bhi.n	8004270 <_printf_i+0x64>
 800422a:	2963      	cmp	r1, #99	; 0x63
 800422c:	d036      	beq.n	800429c <_printf_i+0x90>
 800422e:	d80a      	bhi.n	8004246 <_printf_i+0x3a>
 8004230:	2900      	cmp	r1, #0
 8004232:	f000 80b9 	beq.w	80043a8 <_printf_i+0x19c>
 8004236:	2958      	cmp	r1, #88	; 0x58
 8004238:	f000 8083 	beq.w	8004342 <_printf_i+0x136>
 800423c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004240:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004244:	e032      	b.n	80042ac <_printf_i+0xa0>
 8004246:	2964      	cmp	r1, #100	; 0x64
 8004248:	d001      	beq.n	800424e <_printf_i+0x42>
 800424a:	2969      	cmp	r1, #105	; 0x69
 800424c:	d1f6      	bne.n	800423c <_printf_i+0x30>
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	0605      	lsls	r5, r0, #24
 8004254:	f103 0104 	add.w	r1, r3, #4
 8004258:	d52a      	bpl.n	80042b0 <_printf_i+0xa4>
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da03      	bge.n	800426a <_printf_i+0x5e>
 8004262:	222d      	movs	r2, #45	; 0x2d
 8004264:	425b      	negs	r3, r3
 8004266:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800426a:	486f      	ldr	r0, [pc, #444]	; (8004428 <_printf_i+0x21c>)
 800426c:	220a      	movs	r2, #10
 800426e:	e039      	b.n	80042e4 <_printf_i+0xd8>
 8004270:	2973      	cmp	r1, #115	; 0x73
 8004272:	f000 809d 	beq.w	80043b0 <_printf_i+0x1a4>
 8004276:	d808      	bhi.n	800428a <_printf_i+0x7e>
 8004278:	296f      	cmp	r1, #111	; 0x6f
 800427a:	d020      	beq.n	80042be <_printf_i+0xb2>
 800427c:	2970      	cmp	r1, #112	; 0x70
 800427e:	d1dd      	bne.n	800423c <_printf_i+0x30>
 8004280:	6823      	ldr	r3, [r4, #0]
 8004282:	f043 0320 	orr.w	r3, r3, #32
 8004286:	6023      	str	r3, [r4, #0]
 8004288:	e003      	b.n	8004292 <_printf_i+0x86>
 800428a:	2975      	cmp	r1, #117	; 0x75
 800428c:	d017      	beq.n	80042be <_printf_i+0xb2>
 800428e:	2978      	cmp	r1, #120	; 0x78
 8004290:	d1d4      	bne.n	800423c <_printf_i+0x30>
 8004292:	2378      	movs	r3, #120	; 0x78
 8004294:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004298:	4864      	ldr	r0, [pc, #400]	; (800442c <_printf_i+0x220>)
 800429a:	e055      	b.n	8004348 <_printf_i+0x13c>
 800429c:	6813      	ldr	r3, [r2, #0]
 800429e:	1d19      	adds	r1, r3, #4
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6011      	str	r1, [r2, #0]
 80042a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042ac:	2301      	movs	r3, #1
 80042ae:	e08c      	b.n	80043ca <_printf_i+0x1be>
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6011      	str	r1, [r2, #0]
 80042b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80042b8:	bf18      	it	ne
 80042ba:	b21b      	sxthne	r3, r3
 80042bc:	e7cf      	b.n	800425e <_printf_i+0x52>
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	6825      	ldr	r5, [r4, #0]
 80042c2:	1d18      	adds	r0, r3, #4
 80042c4:	6010      	str	r0, [r2, #0]
 80042c6:	0628      	lsls	r0, r5, #24
 80042c8:	d501      	bpl.n	80042ce <_printf_i+0xc2>
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	e002      	b.n	80042d4 <_printf_i+0xc8>
 80042ce:	0668      	lsls	r0, r5, #25
 80042d0:	d5fb      	bpl.n	80042ca <_printf_i+0xbe>
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	4854      	ldr	r0, [pc, #336]	; (8004428 <_printf_i+0x21c>)
 80042d6:	296f      	cmp	r1, #111	; 0x6f
 80042d8:	bf14      	ite	ne
 80042da:	220a      	movne	r2, #10
 80042dc:	2208      	moveq	r2, #8
 80042de:	2100      	movs	r1, #0
 80042e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042e4:	6865      	ldr	r5, [r4, #4]
 80042e6:	60a5      	str	r5, [r4, #8]
 80042e8:	2d00      	cmp	r5, #0
 80042ea:	f2c0 8095 	blt.w	8004418 <_printf_i+0x20c>
 80042ee:	6821      	ldr	r1, [r4, #0]
 80042f0:	f021 0104 	bic.w	r1, r1, #4
 80042f4:	6021      	str	r1, [r4, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d13d      	bne.n	8004376 <_printf_i+0x16a>
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	f040 808e 	bne.w	800441c <_printf_i+0x210>
 8004300:	4665      	mov	r5, ip
 8004302:	2a08      	cmp	r2, #8
 8004304:	d10b      	bne.n	800431e <_printf_i+0x112>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	07db      	lsls	r3, r3, #31
 800430a:	d508      	bpl.n	800431e <_printf_i+0x112>
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	6862      	ldr	r2, [r4, #4]
 8004310:	429a      	cmp	r2, r3
 8004312:	bfde      	ittt	le
 8004314:	2330      	movle	r3, #48	; 0x30
 8004316:	f805 3c01 	strble.w	r3, [r5, #-1]
 800431a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800431e:	ebac 0305 	sub.w	r3, ip, r5
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	f8cd 8000 	str.w	r8, [sp]
 8004328:	463b      	mov	r3, r7
 800432a:	aa03      	add	r2, sp, #12
 800432c:	4621      	mov	r1, r4
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff fef6 	bl	8004120 <_printf_common>
 8004334:	3001      	adds	r0, #1
 8004336:	d14d      	bne.n	80043d4 <_printf_i+0x1c8>
 8004338:	f04f 30ff 	mov.w	r0, #4294967295
 800433c:	b005      	add	sp, #20
 800433e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004342:	4839      	ldr	r0, [pc, #228]	; (8004428 <_printf_i+0x21c>)
 8004344:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004348:	6813      	ldr	r3, [r2, #0]
 800434a:	6821      	ldr	r1, [r4, #0]
 800434c:	1d1d      	adds	r5, r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6015      	str	r5, [r2, #0]
 8004352:	060a      	lsls	r2, r1, #24
 8004354:	d50b      	bpl.n	800436e <_printf_i+0x162>
 8004356:	07ca      	lsls	r2, r1, #31
 8004358:	bf44      	itt	mi
 800435a:	f041 0120 	orrmi.w	r1, r1, #32
 800435e:	6021      	strmi	r1, [r4, #0]
 8004360:	b91b      	cbnz	r3, 800436a <_printf_i+0x15e>
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	f022 0220 	bic.w	r2, r2, #32
 8004368:	6022      	str	r2, [r4, #0]
 800436a:	2210      	movs	r2, #16
 800436c:	e7b7      	b.n	80042de <_printf_i+0xd2>
 800436e:	064d      	lsls	r5, r1, #25
 8004370:	bf48      	it	mi
 8004372:	b29b      	uxthmi	r3, r3
 8004374:	e7ef      	b.n	8004356 <_printf_i+0x14a>
 8004376:	4665      	mov	r5, ip
 8004378:	fbb3 f1f2 	udiv	r1, r3, r2
 800437c:	fb02 3311 	mls	r3, r2, r1, r3
 8004380:	5cc3      	ldrb	r3, [r0, r3]
 8004382:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004386:	460b      	mov	r3, r1
 8004388:	2900      	cmp	r1, #0
 800438a:	d1f5      	bne.n	8004378 <_printf_i+0x16c>
 800438c:	e7b9      	b.n	8004302 <_printf_i+0xf6>
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	6825      	ldr	r5, [r4, #0]
 8004392:	6961      	ldr	r1, [r4, #20]
 8004394:	1d18      	adds	r0, r3, #4
 8004396:	6010      	str	r0, [r2, #0]
 8004398:	0628      	lsls	r0, r5, #24
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	d501      	bpl.n	80043a2 <_printf_i+0x196>
 800439e:	6019      	str	r1, [r3, #0]
 80043a0:	e002      	b.n	80043a8 <_printf_i+0x19c>
 80043a2:	066a      	lsls	r2, r5, #25
 80043a4:	d5fb      	bpl.n	800439e <_printf_i+0x192>
 80043a6:	8019      	strh	r1, [r3, #0]
 80043a8:	2300      	movs	r3, #0
 80043aa:	6123      	str	r3, [r4, #16]
 80043ac:	4665      	mov	r5, ip
 80043ae:	e7b9      	b.n	8004324 <_printf_i+0x118>
 80043b0:	6813      	ldr	r3, [r2, #0]
 80043b2:	1d19      	adds	r1, r3, #4
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	681d      	ldr	r5, [r3, #0]
 80043b8:	6862      	ldr	r2, [r4, #4]
 80043ba:	2100      	movs	r1, #0
 80043bc:	4628      	mov	r0, r5
 80043be:	f7fb ff0f 	bl	80001e0 <memchr>
 80043c2:	b108      	cbz	r0, 80043c8 <_printf_i+0x1bc>
 80043c4:	1b40      	subs	r0, r0, r5
 80043c6:	6060      	str	r0, [r4, #4]
 80043c8:	6863      	ldr	r3, [r4, #4]
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	2300      	movs	r3, #0
 80043ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043d2:	e7a7      	b.n	8004324 <_printf_i+0x118>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	462a      	mov	r2, r5
 80043d8:	4639      	mov	r1, r7
 80043da:	4630      	mov	r0, r6
 80043dc:	47c0      	blx	r8
 80043de:	3001      	adds	r0, #1
 80043e0:	d0aa      	beq.n	8004338 <_printf_i+0x12c>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	079b      	lsls	r3, r3, #30
 80043e6:	d413      	bmi.n	8004410 <_printf_i+0x204>
 80043e8:	68e0      	ldr	r0, [r4, #12]
 80043ea:	9b03      	ldr	r3, [sp, #12]
 80043ec:	4298      	cmp	r0, r3
 80043ee:	bfb8      	it	lt
 80043f0:	4618      	movlt	r0, r3
 80043f2:	e7a3      	b.n	800433c <_printf_i+0x130>
 80043f4:	2301      	movs	r3, #1
 80043f6:	464a      	mov	r2, r9
 80043f8:	4639      	mov	r1, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d09a      	beq.n	8004338 <_printf_i+0x12c>
 8004402:	3501      	adds	r5, #1
 8004404:	68e3      	ldr	r3, [r4, #12]
 8004406:	9a03      	ldr	r2, [sp, #12]
 8004408:	1a9b      	subs	r3, r3, r2
 800440a:	42ab      	cmp	r3, r5
 800440c:	dcf2      	bgt.n	80043f4 <_printf_i+0x1e8>
 800440e:	e7eb      	b.n	80043e8 <_printf_i+0x1dc>
 8004410:	2500      	movs	r5, #0
 8004412:	f104 0919 	add.w	r9, r4, #25
 8004416:	e7f5      	b.n	8004404 <_printf_i+0x1f8>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ac      	bne.n	8004376 <_printf_i+0x16a>
 800441c:	7803      	ldrb	r3, [r0, #0]
 800441e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004422:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004426:	e76c      	b.n	8004302 <_printf_i+0xf6>
 8004428:	08006242 	.word	0x08006242
 800442c:	08006253 	.word	0x08006253

08004430 <iprintf>:
 8004430:	b40f      	push	{r0, r1, r2, r3}
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <iprintf+0x2c>)
 8004434:	b513      	push	{r0, r1, r4, lr}
 8004436:	681c      	ldr	r4, [r3, #0]
 8004438:	b124      	cbz	r4, 8004444 <iprintf+0x14>
 800443a:	69a3      	ldr	r3, [r4, #24]
 800443c:	b913      	cbnz	r3, 8004444 <iprintf+0x14>
 800443e:	4620      	mov	r0, r4
 8004440:	f001 f802 	bl	8005448 <__sinit>
 8004444:	ab05      	add	r3, sp, #20
 8004446:	9a04      	ldr	r2, [sp, #16]
 8004448:	68a1      	ldr	r1, [r4, #8]
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	4620      	mov	r0, r4
 800444e:	f001 fcc5 	bl	8005ddc <_vfiprintf_r>
 8004452:	b002      	add	sp, #8
 8004454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004458:	b004      	add	sp, #16
 800445a:	4770      	bx	lr
 800445c:	20000010 	.word	0x20000010

08004460 <__swbuf_r>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	460e      	mov	r6, r1
 8004464:	4614      	mov	r4, r2
 8004466:	4605      	mov	r5, r0
 8004468:	b118      	cbz	r0, 8004472 <__swbuf_r+0x12>
 800446a:	6983      	ldr	r3, [r0, #24]
 800446c:	b90b      	cbnz	r3, 8004472 <__swbuf_r+0x12>
 800446e:	f000 ffeb 	bl	8005448 <__sinit>
 8004472:	4b21      	ldr	r3, [pc, #132]	; (80044f8 <__swbuf_r+0x98>)
 8004474:	429c      	cmp	r4, r3
 8004476:	d12a      	bne.n	80044ce <__swbuf_r+0x6e>
 8004478:	686c      	ldr	r4, [r5, #4]
 800447a:	69a3      	ldr	r3, [r4, #24]
 800447c:	60a3      	str	r3, [r4, #8]
 800447e:	89a3      	ldrh	r3, [r4, #12]
 8004480:	071a      	lsls	r2, r3, #28
 8004482:	d52e      	bpl.n	80044e2 <__swbuf_r+0x82>
 8004484:	6923      	ldr	r3, [r4, #16]
 8004486:	b363      	cbz	r3, 80044e2 <__swbuf_r+0x82>
 8004488:	6923      	ldr	r3, [r4, #16]
 800448a:	6820      	ldr	r0, [r4, #0]
 800448c:	1ac0      	subs	r0, r0, r3
 800448e:	6963      	ldr	r3, [r4, #20]
 8004490:	b2f6      	uxtb	r6, r6
 8004492:	4283      	cmp	r3, r0
 8004494:	4637      	mov	r7, r6
 8004496:	dc04      	bgt.n	80044a2 <__swbuf_r+0x42>
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	f000 ff6a 	bl	8005374 <_fflush_r>
 80044a0:	bb28      	cbnz	r0, 80044ee <__swbuf_r+0x8e>
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	3b01      	subs	r3, #1
 80044a6:	60a3      	str	r3, [r4, #8]
 80044a8:	6823      	ldr	r3, [r4, #0]
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	6022      	str	r2, [r4, #0]
 80044ae:	701e      	strb	r6, [r3, #0]
 80044b0:	6963      	ldr	r3, [r4, #20]
 80044b2:	3001      	adds	r0, #1
 80044b4:	4283      	cmp	r3, r0
 80044b6:	d004      	beq.n	80044c2 <__swbuf_r+0x62>
 80044b8:	89a3      	ldrh	r3, [r4, #12]
 80044ba:	07db      	lsls	r3, r3, #31
 80044bc:	d519      	bpl.n	80044f2 <__swbuf_r+0x92>
 80044be:	2e0a      	cmp	r6, #10
 80044c0:	d117      	bne.n	80044f2 <__swbuf_r+0x92>
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 ff55 	bl	8005374 <_fflush_r>
 80044ca:	b190      	cbz	r0, 80044f2 <__swbuf_r+0x92>
 80044cc:	e00f      	b.n	80044ee <__swbuf_r+0x8e>
 80044ce:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <__swbuf_r+0x9c>)
 80044d0:	429c      	cmp	r4, r3
 80044d2:	d101      	bne.n	80044d8 <__swbuf_r+0x78>
 80044d4:	68ac      	ldr	r4, [r5, #8]
 80044d6:	e7d0      	b.n	800447a <__swbuf_r+0x1a>
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <__swbuf_r+0xa0>)
 80044da:	429c      	cmp	r4, r3
 80044dc:	bf08      	it	eq
 80044de:	68ec      	ldreq	r4, [r5, #12]
 80044e0:	e7cb      	b.n	800447a <__swbuf_r+0x1a>
 80044e2:	4621      	mov	r1, r4
 80044e4:	4628      	mov	r0, r5
 80044e6:	f000 f80d 	bl	8004504 <__swsetup_r>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0cc      	beq.n	8004488 <__swbuf_r+0x28>
 80044ee:	f04f 37ff 	mov.w	r7, #4294967295
 80044f2:	4638      	mov	r0, r7
 80044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	08006294 	.word	0x08006294
 80044fc:	080062b4 	.word	0x080062b4
 8004500:	08006274 	.word	0x08006274

08004504 <__swsetup_r>:
 8004504:	4b32      	ldr	r3, [pc, #200]	; (80045d0 <__swsetup_r+0xcc>)
 8004506:	b570      	push	{r4, r5, r6, lr}
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	4606      	mov	r6, r0
 800450c:	460c      	mov	r4, r1
 800450e:	b125      	cbz	r5, 800451a <__swsetup_r+0x16>
 8004510:	69ab      	ldr	r3, [r5, #24]
 8004512:	b913      	cbnz	r3, 800451a <__swsetup_r+0x16>
 8004514:	4628      	mov	r0, r5
 8004516:	f000 ff97 	bl	8005448 <__sinit>
 800451a:	4b2e      	ldr	r3, [pc, #184]	; (80045d4 <__swsetup_r+0xd0>)
 800451c:	429c      	cmp	r4, r3
 800451e:	d10f      	bne.n	8004540 <__swsetup_r+0x3c>
 8004520:	686c      	ldr	r4, [r5, #4]
 8004522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004526:	b29a      	uxth	r2, r3
 8004528:	0715      	lsls	r5, r2, #28
 800452a:	d42c      	bmi.n	8004586 <__swsetup_r+0x82>
 800452c:	06d0      	lsls	r0, r2, #27
 800452e:	d411      	bmi.n	8004554 <__swsetup_r+0x50>
 8004530:	2209      	movs	r2, #9
 8004532:	6032      	str	r2, [r6, #0]
 8004534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	f04f 30ff 	mov.w	r0, #4294967295
 800453e:	e03e      	b.n	80045be <__swsetup_r+0xba>
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <__swsetup_r+0xd4>)
 8004542:	429c      	cmp	r4, r3
 8004544:	d101      	bne.n	800454a <__swsetup_r+0x46>
 8004546:	68ac      	ldr	r4, [r5, #8]
 8004548:	e7eb      	b.n	8004522 <__swsetup_r+0x1e>
 800454a:	4b24      	ldr	r3, [pc, #144]	; (80045dc <__swsetup_r+0xd8>)
 800454c:	429c      	cmp	r4, r3
 800454e:	bf08      	it	eq
 8004550:	68ec      	ldreq	r4, [r5, #12]
 8004552:	e7e6      	b.n	8004522 <__swsetup_r+0x1e>
 8004554:	0751      	lsls	r1, r2, #29
 8004556:	d512      	bpl.n	800457e <__swsetup_r+0x7a>
 8004558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800455a:	b141      	cbz	r1, 800456e <__swsetup_r+0x6a>
 800455c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004560:	4299      	cmp	r1, r3
 8004562:	d002      	beq.n	800456a <__swsetup_r+0x66>
 8004564:	4630      	mov	r0, r6
 8004566:	f001 fb67 	bl	8005c38 <_free_r>
 800456a:	2300      	movs	r3, #0
 800456c:	6363      	str	r3, [r4, #52]	; 0x34
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	2300      	movs	r3, #0
 8004578:	6063      	str	r3, [r4, #4]
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6023      	str	r3, [r4, #0]
 800457e:	89a3      	ldrh	r3, [r4, #12]
 8004580:	f043 0308 	orr.w	r3, r3, #8
 8004584:	81a3      	strh	r3, [r4, #12]
 8004586:	6923      	ldr	r3, [r4, #16]
 8004588:	b94b      	cbnz	r3, 800459e <__swsetup_r+0x9a>
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d003      	beq.n	800459e <__swsetup_r+0x9a>
 8004596:	4621      	mov	r1, r4
 8004598:	4630      	mov	r0, r6
 800459a:	f001 f811 	bl	80055c0 <__smakebuf_r>
 800459e:	89a2      	ldrh	r2, [r4, #12]
 80045a0:	f012 0301 	ands.w	r3, r2, #1
 80045a4:	d00c      	beq.n	80045c0 <__swsetup_r+0xbc>
 80045a6:	2300      	movs	r3, #0
 80045a8:	60a3      	str	r3, [r4, #8]
 80045aa:	6963      	ldr	r3, [r4, #20]
 80045ac:	425b      	negs	r3, r3
 80045ae:	61a3      	str	r3, [r4, #24]
 80045b0:	6923      	ldr	r3, [r4, #16]
 80045b2:	b953      	cbnz	r3, 80045ca <__swsetup_r+0xc6>
 80045b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80045bc:	d1ba      	bne.n	8004534 <__swsetup_r+0x30>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	0792      	lsls	r2, r2, #30
 80045c2:	bf58      	it	pl
 80045c4:	6963      	ldrpl	r3, [r4, #20]
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	e7f2      	b.n	80045b0 <__swsetup_r+0xac>
 80045ca:	2000      	movs	r0, #0
 80045cc:	e7f7      	b.n	80045be <__swsetup_r+0xba>
 80045ce:	bf00      	nop
 80045d0:	20000010 	.word	0x20000010
 80045d4:	08006294 	.word	0x08006294
 80045d8:	080062b4 	.word	0x080062b4
 80045dc:	08006274 	.word	0x08006274

080045e0 <quorem>:
 80045e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	6903      	ldr	r3, [r0, #16]
 80045e6:	690c      	ldr	r4, [r1, #16]
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	4680      	mov	r8, r0
 80045ec:	f2c0 8082 	blt.w	80046f4 <quorem+0x114>
 80045f0:	3c01      	subs	r4, #1
 80045f2:	f101 0714 	add.w	r7, r1, #20
 80045f6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80045fa:	f100 0614 	add.w	r6, r0, #20
 80045fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004602:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004606:	eb06 030c 	add.w	r3, r6, ip
 800460a:	3501      	adds	r5, #1
 800460c:	eb07 090c 	add.w	r9, r7, ip
 8004610:	9301      	str	r3, [sp, #4]
 8004612:	fbb0 f5f5 	udiv	r5, r0, r5
 8004616:	b395      	cbz	r5, 800467e <quorem+0x9e>
 8004618:	f04f 0a00 	mov.w	sl, #0
 800461c:	4638      	mov	r0, r7
 800461e:	46b6      	mov	lr, r6
 8004620:	46d3      	mov	fp, sl
 8004622:	f850 2b04 	ldr.w	r2, [r0], #4
 8004626:	b293      	uxth	r3, r2
 8004628:	fb05 a303 	mla	r3, r5, r3, sl
 800462c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004630:	b29b      	uxth	r3, r3
 8004632:	ebab 0303 	sub.w	r3, fp, r3
 8004636:	0c12      	lsrs	r2, r2, #16
 8004638:	f8de b000 	ldr.w	fp, [lr]
 800463c:	fb05 a202 	mla	r2, r5, r2, sl
 8004640:	fa13 f38b 	uxtah	r3, r3, fp
 8004644:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004648:	fa1f fb82 	uxth.w	fp, r2
 800464c:	f8de 2000 	ldr.w	r2, [lr]
 8004650:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004658:	b29b      	uxth	r3, r3
 800465a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800465e:	4581      	cmp	r9, r0
 8004660:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004664:	f84e 3b04 	str.w	r3, [lr], #4
 8004668:	d2db      	bcs.n	8004622 <quorem+0x42>
 800466a:	f856 300c 	ldr.w	r3, [r6, ip]
 800466e:	b933      	cbnz	r3, 800467e <quorem+0x9e>
 8004670:	9b01      	ldr	r3, [sp, #4]
 8004672:	3b04      	subs	r3, #4
 8004674:	429e      	cmp	r6, r3
 8004676:	461a      	mov	r2, r3
 8004678:	d330      	bcc.n	80046dc <quorem+0xfc>
 800467a:	f8c8 4010 	str.w	r4, [r8, #16]
 800467e:	4640      	mov	r0, r8
 8004680:	f001 fa06 	bl	8005a90 <__mcmp>
 8004684:	2800      	cmp	r0, #0
 8004686:	db25      	blt.n	80046d4 <quorem+0xf4>
 8004688:	3501      	adds	r5, #1
 800468a:	4630      	mov	r0, r6
 800468c:	f04f 0c00 	mov.w	ip, #0
 8004690:	f857 2b04 	ldr.w	r2, [r7], #4
 8004694:	f8d0 e000 	ldr.w	lr, [r0]
 8004698:	b293      	uxth	r3, r2
 800469a:	ebac 0303 	sub.w	r3, ip, r3
 800469e:	0c12      	lsrs	r2, r2, #16
 80046a0:	fa13 f38e 	uxtah	r3, r3, lr
 80046a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80046a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046b2:	45b9      	cmp	r9, r7
 80046b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80046b8:	f840 3b04 	str.w	r3, [r0], #4
 80046bc:	d2e8      	bcs.n	8004690 <quorem+0xb0>
 80046be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80046c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80046c6:	b92a      	cbnz	r2, 80046d4 <quorem+0xf4>
 80046c8:	3b04      	subs	r3, #4
 80046ca:	429e      	cmp	r6, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	d30b      	bcc.n	80046e8 <quorem+0x108>
 80046d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80046d4:	4628      	mov	r0, r5
 80046d6:	b003      	add	sp, #12
 80046d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	3b04      	subs	r3, #4
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	d1ca      	bne.n	800467a <quorem+0x9a>
 80046e4:	3c01      	subs	r4, #1
 80046e6:	e7c5      	b.n	8004674 <quorem+0x94>
 80046e8:	6812      	ldr	r2, [r2, #0]
 80046ea:	3b04      	subs	r3, #4
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d1ef      	bne.n	80046d0 <quorem+0xf0>
 80046f0:	3c01      	subs	r4, #1
 80046f2:	e7ea      	b.n	80046ca <quorem+0xea>
 80046f4:	2000      	movs	r0, #0
 80046f6:	e7ee      	b.n	80046d6 <quorem+0xf6>

080046f8 <_dtoa_r>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	ec57 6b10 	vmov	r6, r7, d0
 8004700:	b097      	sub	sp, #92	; 0x5c
 8004702:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004704:	9106      	str	r1, [sp, #24]
 8004706:	4604      	mov	r4, r0
 8004708:	920b      	str	r2, [sp, #44]	; 0x2c
 800470a:	9312      	str	r3, [sp, #72]	; 0x48
 800470c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004710:	e9cd 6700 	strd	r6, r7, [sp]
 8004714:	b93d      	cbnz	r5, 8004726 <_dtoa_r+0x2e>
 8004716:	2010      	movs	r0, #16
 8004718:	f000 ff92 	bl	8005640 <malloc>
 800471c:	6260      	str	r0, [r4, #36]	; 0x24
 800471e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004722:	6005      	str	r5, [r0, #0]
 8004724:	60c5      	str	r5, [r0, #12]
 8004726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	b151      	cbz	r1, 8004742 <_dtoa_r+0x4a>
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	604a      	str	r2, [r1, #4]
 8004730:	2301      	movs	r3, #1
 8004732:	4093      	lsls	r3, r2
 8004734:	608b      	str	r3, [r1, #8]
 8004736:	4620      	mov	r0, r4
 8004738:	f000 ffc9 	bl	80056ce <_Bfree>
 800473c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	1e3b      	subs	r3, r7, #0
 8004744:	bfbb      	ittet	lt
 8004746:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800474a:	9301      	strlt	r3, [sp, #4]
 800474c:	2300      	movge	r3, #0
 800474e:	2201      	movlt	r2, #1
 8004750:	bfac      	ite	ge
 8004752:	f8c8 3000 	strge.w	r3, [r8]
 8004756:	f8c8 2000 	strlt.w	r2, [r8]
 800475a:	4baf      	ldr	r3, [pc, #700]	; (8004a18 <_dtoa_r+0x320>)
 800475c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004760:	ea33 0308 	bics.w	r3, r3, r8
 8004764:	d114      	bne.n	8004790 <_dtoa_r+0x98>
 8004766:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004768:	f242 730f 	movw	r3, #9999	; 0x270f
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	9b00      	ldr	r3, [sp, #0]
 8004770:	b923      	cbnz	r3, 800477c <_dtoa_r+0x84>
 8004772:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004776:	2800      	cmp	r0, #0
 8004778:	f000 8542 	beq.w	8005200 <_dtoa_r+0xb08>
 800477c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800477e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004a2c <_dtoa_r+0x334>
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8544 	beq.w	8005210 <_dtoa_r+0xb18>
 8004788:	f10b 0303 	add.w	r3, fp, #3
 800478c:	f000 bd3e 	b.w	800520c <_dtoa_r+0xb14>
 8004790:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	4630      	mov	r0, r6
 800479a:	4639      	mov	r1, r7
 800479c:	f7fc f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80047a0:	4681      	mov	r9, r0
 80047a2:	b168      	cbz	r0, 80047c0 <_dtoa_r+0xc8>
 80047a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047a6:	2301      	movs	r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
 80047aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8524 	beq.w	80051fa <_dtoa_r+0xb02>
 80047b2:	4b9a      	ldr	r3, [pc, #616]	; (8004a1c <_dtoa_r+0x324>)
 80047b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	f000 bd28 	b.w	8005210 <_dtoa_r+0xb18>
 80047c0:	aa14      	add	r2, sp, #80	; 0x50
 80047c2:	a915      	add	r1, sp, #84	; 0x54
 80047c4:	ec47 6b10 	vmov	d0, r6, r7
 80047c8:	4620      	mov	r0, r4
 80047ca:	f001 f9d8 	bl	8005b7e <__d2b>
 80047ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80047d2:	9004      	str	r0, [sp, #16]
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	d07c      	beq.n	80048d2 <_dtoa_r+0x1da>
 80047d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80047e0:	46b2      	mov	sl, r6
 80047e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80047e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80047ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80047ee:	2200      	movs	r2, #0
 80047f0:	4b8b      	ldr	r3, [pc, #556]	; (8004a20 <_dtoa_r+0x328>)
 80047f2:	4650      	mov	r0, sl
 80047f4:	4659      	mov	r1, fp
 80047f6:	f7fb fd47 	bl	8000288 <__aeabi_dsub>
 80047fa:	a381      	add	r3, pc, #516	; (adr r3, 8004a00 <_dtoa_r+0x308>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	f7fb fefa 	bl	80005f8 <__aeabi_dmul>
 8004804:	a380      	add	r3, pc, #512	; (adr r3, 8004a08 <_dtoa_r+0x310>)
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f7fb fd3f 	bl	800028c <__adddf3>
 800480e:	4606      	mov	r6, r0
 8004810:	4628      	mov	r0, r5
 8004812:	460f      	mov	r7, r1
 8004814:	f7fb fe86 	bl	8000524 <__aeabi_i2d>
 8004818:	a37d      	add	r3, pc, #500	; (adr r3, 8004a10 <_dtoa_r+0x318>)
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f7fb feeb 	bl	80005f8 <__aeabi_dmul>
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	4630      	mov	r0, r6
 8004828:	4639      	mov	r1, r7
 800482a:	f7fb fd2f 	bl	800028c <__adddf3>
 800482e:	4606      	mov	r6, r0
 8004830:	460f      	mov	r7, r1
 8004832:	f7fc f991 	bl	8000b58 <__aeabi_d2iz>
 8004836:	2200      	movs	r2, #0
 8004838:	4682      	mov	sl, r0
 800483a:	2300      	movs	r3, #0
 800483c:	4630      	mov	r0, r6
 800483e:	4639      	mov	r1, r7
 8004840:	f7fc f94c 	bl	8000adc <__aeabi_dcmplt>
 8004844:	b148      	cbz	r0, 800485a <_dtoa_r+0x162>
 8004846:	4650      	mov	r0, sl
 8004848:	f7fb fe6c 	bl	8000524 <__aeabi_i2d>
 800484c:	4632      	mov	r2, r6
 800484e:	463b      	mov	r3, r7
 8004850:	f7fc f93a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004854:	b908      	cbnz	r0, 800485a <_dtoa_r+0x162>
 8004856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800485a:	f1ba 0f16 	cmp.w	sl, #22
 800485e:	d859      	bhi.n	8004914 <_dtoa_r+0x21c>
 8004860:	4970      	ldr	r1, [pc, #448]	; (8004a24 <_dtoa_r+0x32c>)
 8004862:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004866:	e9dd 2300 	ldrd	r2, r3, [sp]
 800486a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800486e:	f7fc f953 	bl	8000b18 <__aeabi_dcmpgt>
 8004872:	2800      	cmp	r0, #0
 8004874:	d050      	beq.n	8004918 <_dtoa_r+0x220>
 8004876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800487a:	2300      	movs	r3, #0
 800487c:	930f      	str	r3, [sp, #60]	; 0x3c
 800487e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004880:	1b5d      	subs	r5, r3, r5
 8004882:	f1b5 0801 	subs.w	r8, r5, #1
 8004886:	bf49      	itett	mi
 8004888:	f1c5 0301 	rsbmi	r3, r5, #1
 800488c:	2300      	movpl	r3, #0
 800488e:	9305      	strmi	r3, [sp, #20]
 8004890:	f04f 0800 	movmi.w	r8, #0
 8004894:	bf58      	it	pl
 8004896:	9305      	strpl	r3, [sp, #20]
 8004898:	f1ba 0f00 	cmp.w	sl, #0
 800489c:	db3e      	blt.n	800491c <_dtoa_r+0x224>
 800489e:	2300      	movs	r3, #0
 80048a0:	44d0      	add	r8, sl
 80048a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	9b06      	ldr	r3, [sp, #24]
 80048aa:	2b09      	cmp	r3, #9
 80048ac:	f200 8090 	bhi.w	80049d0 <_dtoa_r+0x2d8>
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	bfc4      	itt	gt
 80048b4:	3b04      	subgt	r3, #4
 80048b6:	9306      	strgt	r3, [sp, #24]
 80048b8:	9b06      	ldr	r3, [sp, #24]
 80048ba:	f1a3 0302 	sub.w	r3, r3, #2
 80048be:	bfcc      	ite	gt
 80048c0:	2500      	movgt	r5, #0
 80048c2:	2501      	movle	r5, #1
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	f200 808f 	bhi.w	80049e8 <_dtoa_r+0x2f0>
 80048ca:	e8df f003 	tbb	[pc, r3]
 80048ce:	7f7d      	.short	0x7f7d
 80048d0:	7131      	.short	0x7131
 80048d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80048d6:	441d      	add	r5, r3
 80048d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80048dc:	2820      	cmp	r0, #32
 80048de:	dd13      	ble.n	8004908 <_dtoa_r+0x210>
 80048e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80048e4:	9b00      	ldr	r3, [sp, #0]
 80048e6:	fa08 f800 	lsl.w	r8, r8, r0
 80048ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80048ee:	fa23 f000 	lsr.w	r0, r3, r0
 80048f2:	ea48 0000 	orr.w	r0, r8, r0
 80048f6:	f7fb fe05 	bl	8000504 <__aeabi_ui2d>
 80048fa:	2301      	movs	r3, #1
 80048fc:	4682      	mov	sl, r0
 80048fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004902:	3d01      	subs	r5, #1
 8004904:	9313      	str	r3, [sp, #76]	; 0x4c
 8004906:	e772      	b.n	80047ee <_dtoa_r+0xf6>
 8004908:	9b00      	ldr	r3, [sp, #0]
 800490a:	f1c0 0020 	rsb	r0, r0, #32
 800490e:	fa03 f000 	lsl.w	r0, r3, r0
 8004912:	e7f0      	b.n	80048f6 <_dtoa_r+0x1fe>
 8004914:	2301      	movs	r3, #1
 8004916:	e7b1      	b.n	800487c <_dtoa_r+0x184>
 8004918:	900f      	str	r0, [sp, #60]	; 0x3c
 800491a:	e7b0      	b.n	800487e <_dtoa_r+0x186>
 800491c:	9b05      	ldr	r3, [sp, #20]
 800491e:	eba3 030a 	sub.w	r3, r3, sl
 8004922:	9305      	str	r3, [sp, #20]
 8004924:	f1ca 0300 	rsb	r3, sl, #0
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	2300      	movs	r3, #0
 800492c:	930e      	str	r3, [sp, #56]	; 0x38
 800492e:	e7bb      	b.n	80048a8 <_dtoa_r+0x1b0>
 8004930:	2301      	movs	r3, #1
 8004932:	930a      	str	r3, [sp, #40]	; 0x28
 8004934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004936:	2b00      	cmp	r3, #0
 8004938:	dd59      	ble.n	80049ee <_dtoa_r+0x2f6>
 800493a:	9302      	str	r3, [sp, #8]
 800493c:	4699      	mov	r9, r3
 800493e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004940:	2200      	movs	r2, #0
 8004942:	6072      	str	r2, [r6, #4]
 8004944:	2204      	movs	r2, #4
 8004946:	f102 0014 	add.w	r0, r2, #20
 800494a:	4298      	cmp	r0, r3
 800494c:	6871      	ldr	r1, [r6, #4]
 800494e:	d953      	bls.n	80049f8 <_dtoa_r+0x300>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 fe88 	bl	8005666 <_Balloc>
 8004956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	f1b9 0f0e 	cmp.w	r9, #14
 800495e:	f8d3 b000 	ldr.w	fp, [r3]
 8004962:	f200 80e6 	bhi.w	8004b32 <_dtoa_r+0x43a>
 8004966:	2d00      	cmp	r5, #0
 8004968:	f000 80e3 	beq.w	8004b32 <_dtoa_r+0x43a>
 800496c:	ed9d 7b00 	vldr	d7, [sp]
 8004970:	f1ba 0f00 	cmp.w	sl, #0
 8004974:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004978:	dd74      	ble.n	8004a64 <_dtoa_r+0x36c>
 800497a:	4a2a      	ldr	r2, [pc, #168]	; (8004a24 <_dtoa_r+0x32c>)
 800497c:	f00a 030f 	and.w	r3, sl, #15
 8004980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004984:	ed93 7b00 	vldr	d7, [r3]
 8004988:	ea4f 162a 	mov.w	r6, sl, asr #4
 800498c:	06f0      	lsls	r0, r6, #27
 800498e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004992:	d565      	bpl.n	8004a60 <_dtoa_r+0x368>
 8004994:	4b24      	ldr	r3, [pc, #144]	; (8004a28 <_dtoa_r+0x330>)
 8004996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800499a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800499e:	f7fb ff55 	bl	800084c <__aeabi_ddiv>
 80049a2:	e9cd 0100 	strd	r0, r1, [sp]
 80049a6:	f006 060f 	and.w	r6, r6, #15
 80049aa:	2503      	movs	r5, #3
 80049ac:	4f1e      	ldr	r7, [pc, #120]	; (8004a28 <_dtoa_r+0x330>)
 80049ae:	e04c      	b.n	8004a4a <_dtoa_r+0x352>
 80049b0:	2301      	movs	r3, #1
 80049b2:	930a      	str	r3, [sp, #40]	; 0x28
 80049b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049b6:	4453      	add	r3, sl
 80049b8:	f103 0901 	add.w	r9, r3, #1
 80049bc:	9302      	str	r3, [sp, #8]
 80049be:	464b      	mov	r3, r9
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	bfb8      	it	lt
 80049c4:	2301      	movlt	r3, #1
 80049c6:	e7ba      	b.n	800493e <_dtoa_r+0x246>
 80049c8:	2300      	movs	r3, #0
 80049ca:	e7b2      	b.n	8004932 <_dtoa_r+0x23a>
 80049cc:	2300      	movs	r3, #0
 80049ce:	e7f0      	b.n	80049b2 <_dtoa_r+0x2ba>
 80049d0:	2501      	movs	r5, #1
 80049d2:	2300      	movs	r3, #0
 80049d4:	9306      	str	r3, [sp, #24]
 80049d6:	950a      	str	r5, [sp, #40]	; 0x28
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	9302      	str	r3, [sp, #8]
 80049de:	4699      	mov	r9, r3
 80049e0:	2200      	movs	r2, #0
 80049e2:	2312      	movs	r3, #18
 80049e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80049e6:	e7aa      	b.n	800493e <_dtoa_r+0x246>
 80049e8:	2301      	movs	r3, #1
 80049ea:	930a      	str	r3, [sp, #40]	; 0x28
 80049ec:	e7f4      	b.n	80049d8 <_dtoa_r+0x2e0>
 80049ee:	2301      	movs	r3, #1
 80049f0:	9302      	str	r3, [sp, #8]
 80049f2:	4699      	mov	r9, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	e7f5      	b.n	80049e4 <_dtoa_r+0x2ec>
 80049f8:	3101      	adds	r1, #1
 80049fa:	6071      	str	r1, [r6, #4]
 80049fc:	0052      	lsls	r2, r2, #1
 80049fe:	e7a2      	b.n	8004946 <_dtoa_r+0x24e>
 8004a00:	636f4361 	.word	0x636f4361
 8004a04:	3fd287a7 	.word	0x3fd287a7
 8004a08:	8b60c8b3 	.word	0x8b60c8b3
 8004a0c:	3fc68a28 	.word	0x3fc68a28
 8004a10:	509f79fb 	.word	0x509f79fb
 8004a14:	3fd34413 	.word	0x3fd34413
 8004a18:	7ff00000 	.word	0x7ff00000
 8004a1c:	08006241 	.word	0x08006241
 8004a20:	3ff80000 	.word	0x3ff80000
 8004a24:	08006300 	.word	0x08006300
 8004a28:	080062d8 	.word	0x080062d8
 8004a2c:	0800626d 	.word	0x0800626d
 8004a30:	07f1      	lsls	r1, r6, #31
 8004a32:	d508      	bpl.n	8004a46 <_dtoa_r+0x34e>
 8004a34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a3c:	f7fb fddc 	bl	80005f8 <__aeabi_dmul>
 8004a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a44:	3501      	adds	r5, #1
 8004a46:	1076      	asrs	r6, r6, #1
 8004a48:	3708      	adds	r7, #8
 8004a4a:	2e00      	cmp	r6, #0
 8004a4c:	d1f0      	bne.n	8004a30 <_dtoa_r+0x338>
 8004a4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a56:	f7fb fef9 	bl	800084c <__aeabi_ddiv>
 8004a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8004a5e:	e01a      	b.n	8004a96 <_dtoa_r+0x39e>
 8004a60:	2502      	movs	r5, #2
 8004a62:	e7a3      	b.n	80049ac <_dtoa_r+0x2b4>
 8004a64:	f000 80a0 	beq.w	8004ba8 <_dtoa_r+0x4b0>
 8004a68:	f1ca 0600 	rsb	r6, sl, #0
 8004a6c:	4b9f      	ldr	r3, [pc, #636]	; (8004cec <_dtoa_r+0x5f4>)
 8004a6e:	4fa0      	ldr	r7, [pc, #640]	; (8004cf0 <_dtoa_r+0x5f8>)
 8004a70:	f006 020f 	and.w	r2, r6, #15
 8004a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a80:	f7fb fdba 	bl	80005f8 <__aeabi_dmul>
 8004a84:	e9cd 0100 	strd	r0, r1, [sp]
 8004a88:	1136      	asrs	r6, r6, #4
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2502      	movs	r5, #2
 8004a8e:	2e00      	cmp	r6, #0
 8004a90:	d17f      	bne.n	8004b92 <_dtoa_r+0x49a>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e1      	bne.n	8004a5a <_dtoa_r+0x362>
 8004a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8087 	beq.w	8004bac <_dtoa_r+0x4b4>
 8004a9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4b93      	ldr	r3, [pc, #588]	; (8004cf4 <_dtoa_r+0x5fc>)
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	4639      	mov	r1, r7
 8004aaa:	f7fc f817 	bl	8000adc <__aeabi_dcmplt>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	d07c      	beq.n	8004bac <_dtoa_r+0x4b4>
 8004ab2:	f1b9 0f00 	cmp.w	r9, #0
 8004ab6:	d079      	beq.n	8004bac <_dtoa_r+0x4b4>
 8004ab8:	9b02      	ldr	r3, [sp, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	dd35      	ble.n	8004b2a <_dtoa_r+0x432>
 8004abe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004ac2:	9308      	str	r3, [sp, #32]
 8004ac4:	4639      	mov	r1, r7
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <_dtoa_r+0x600>)
 8004aca:	4630      	mov	r0, r6
 8004acc:	f7fb fd94 	bl	80005f8 <__aeabi_dmul>
 8004ad0:	e9cd 0100 	strd	r0, r1, [sp]
 8004ad4:	9f02      	ldr	r7, [sp, #8]
 8004ad6:	3501      	adds	r5, #1
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f7fb fd23 	bl	8000524 <__aeabi_i2d>
 8004ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ae2:	f7fb fd89 	bl	80005f8 <__aeabi_dmul>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4b84      	ldr	r3, [pc, #528]	; (8004cfc <_dtoa_r+0x604>)
 8004aea:	f7fb fbcf 	bl	800028c <__adddf3>
 8004aee:	4605      	mov	r5, r0
 8004af0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004af4:	2f00      	cmp	r7, #0
 8004af6:	d15d      	bne.n	8004bb4 <_dtoa_r+0x4bc>
 8004af8:	2200      	movs	r2, #0
 8004afa:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <_dtoa_r+0x608>)
 8004afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b00:	f7fb fbc2 	bl	8000288 <__aeabi_dsub>
 8004b04:	462a      	mov	r2, r5
 8004b06:	4633      	mov	r3, r6
 8004b08:	e9cd 0100 	strd	r0, r1, [sp]
 8004b0c:	f7fc f804 	bl	8000b18 <__aeabi_dcmpgt>
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f040 8288 	bne.w	8005026 <_dtoa_r+0x92e>
 8004b16:	462a      	mov	r2, r5
 8004b18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b20:	f7fb ffdc 	bl	8000adc <__aeabi_dcmplt>
 8004b24:	2800      	cmp	r0, #0
 8004b26:	f040 827c 	bne.w	8005022 <_dtoa_r+0x92a>
 8004b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8004b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f2c0 8150 	blt.w	8004dda <_dtoa_r+0x6e2>
 8004b3a:	f1ba 0f0e 	cmp.w	sl, #14
 8004b3e:	f300 814c 	bgt.w	8004dda <_dtoa_r+0x6e2>
 8004b42:	4b6a      	ldr	r3, [pc, #424]	; (8004cec <_dtoa_r+0x5f4>)
 8004b44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b48:	ed93 7b00 	vldr	d7, [r3]
 8004b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b54:	f280 80d8 	bge.w	8004d08 <_dtoa_r+0x610>
 8004b58:	f1b9 0f00 	cmp.w	r9, #0
 8004b5c:	f300 80d4 	bgt.w	8004d08 <_dtoa_r+0x610>
 8004b60:	f040 825e 	bne.w	8005020 <_dtoa_r+0x928>
 8004b64:	2200      	movs	r2, #0
 8004b66:	4b66      	ldr	r3, [pc, #408]	; (8004d00 <_dtoa_r+0x608>)
 8004b68:	ec51 0b17 	vmov	r0, r1, d7
 8004b6c:	f7fb fd44 	bl	80005f8 <__aeabi_dmul>
 8004b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b74:	f7fb ffc6 	bl	8000b04 <__aeabi_dcmpge>
 8004b78:	464f      	mov	r7, r9
 8004b7a:	464e      	mov	r6, r9
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	f040 8234 	bne.w	8004fea <_dtoa_r+0x8f2>
 8004b82:	2331      	movs	r3, #49	; 0x31
 8004b84:	f10b 0501 	add.w	r5, fp, #1
 8004b88:	f88b 3000 	strb.w	r3, [fp]
 8004b8c:	f10a 0a01 	add.w	sl, sl, #1
 8004b90:	e22f      	b.n	8004ff2 <_dtoa_r+0x8fa>
 8004b92:	07f2      	lsls	r2, r6, #31
 8004b94:	d505      	bpl.n	8004ba2 <_dtoa_r+0x4aa>
 8004b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9a:	f7fb fd2d 	bl	80005f8 <__aeabi_dmul>
 8004b9e:	3501      	adds	r5, #1
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	1076      	asrs	r6, r6, #1
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	e772      	b.n	8004a8e <_dtoa_r+0x396>
 8004ba8:	2502      	movs	r5, #2
 8004baa:	e774      	b.n	8004a96 <_dtoa_r+0x39e>
 8004bac:	f8cd a020 	str.w	sl, [sp, #32]
 8004bb0:	464f      	mov	r7, r9
 8004bb2:	e791      	b.n	8004ad8 <_dtoa_r+0x3e0>
 8004bb4:	4b4d      	ldr	r3, [pc, #308]	; (8004cec <_dtoa_r+0x5f4>)
 8004bb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004bba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d047      	beq.n	8004c54 <_dtoa_r+0x55c>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	2000      	movs	r0, #0
 8004bca:	494e      	ldr	r1, [pc, #312]	; (8004d04 <_dtoa_r+0x60c>)
 8004bcc:	f7fb fe3e 	bl	800084c <__aeabi_ddiv>
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4633      	mov	r3, r6
 8004bd4:	f7fb fb58 	bl	8000288 <__aeabi_dsub>
 8004bd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004bdc:	465d      	mov	r5, fp
 8004bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004be2:	f7fb ffb9 	bl	8000b58 <__aeabi_d2iz>
 8004be6:	4606      	mov	r6, r0
 8004be8:	f7fb fc9c 	bl	8000524 <__aeabi_i2d>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bf4:	f7fb fb48 	bl	8000288 <__aeabi_dsub>
 8004bf8:	3630      	adds	r6, #48	; 0x30
 8004bfa:	f805 6b01 	strb.w	r6, [r5], #1
 8004bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c02:	e9cd 0100 	strd	r0, r1, [sp]
 8004c06:	f7fb ff69 	bl	8000adc <__aeabi_dcmplt>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d163      	bne.n	8004cd6 <_dtoa_r+0x5de>
 8004c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c12:	2000      	movs	r0, #0
 8004c14:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <_dtoa_r+0x5fc>)
 8004c16:	f7fb fb37 	bl	8000288 <__aeabi_dsub>
 8004c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c1e:	f7fb ff5d 	bl	8000adc <__aeabi_dcmplt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f040 80b7 	bne.w	8004d96 <_dtoa_r+0x69e>
 8004c28:	eba5 030b 	sub.w	r3, r5, fp
 8004c2c:	429f      	cmp	r7, r3
 8004c2e:	f77f af7c 	ble.w	8004b2a <_dtoa_r+0x432>
 8004c32:	2200      	movs	r2, #0
 8004c34:	4b30      	ldr	r3, [pc, #192]	; (8004cf8 <_dtoa_r+0x600>)
 8004c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c3a:	f7fb fcdd 	bl	80005f8 <__aeabi_dmul>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <_dtoa_r+0x600>)
 8004c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c4a:	f7fb fcd5 	bl	80005f8 <__aeabi_dmul>
 8004c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8004c52:	e7c4      	b.n	8004bde <_dtoa_r+0x4e6>
 8004c54:	462a      	mov	r2, r5
 8004c56:	4633      	mov	r3, r6
 8004c58:	f7fb fcce 	bl	80005f8 <__aeabi_dmul>
 8004c5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c60:	eb0b 0507 	add.w	r5, fp, r7
 8004c64:	465e      	mov	r6, fp
 8004c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c6a:	f7fb ff75 	bl	8000b58 <__aeabi_d2iz>
 8004c6e:	4607      	mov	r7, r0
 8004c70:	f7fb fc58 	bl	8000524 <__aeabi_i2d>
 8004c74:	3730      	adds	r7, #48	; 0x30
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c7e:	f7fb fb03 	bl	8000288 <__aeabi_dsub>
 8004c82:	f806 7b01 	strb.w	r7, [r6], #1
 8004c86:	42ae      	cmp	r6, r5
 8004c88:	e9cd 0100 	strd	r0, r1, [sp]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	d126      	bne.n	8004ce0 <_dtoa_r+0x5e8>
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <_dtoa_r+0x60c>)
 8004c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c98:	f7fb faf8 	bl	800028c <__adddf3>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ca4:	f7fb ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d174      	bne.n	8004d96 <_dtoa_r+0x69e>
 8004cac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	4914      	ldr	r1, [pc, #80]	; (8004d04 <_dtoa_r+0x60c>)
 8004cb4:	f7fb fae8 	bl	8000288 <__aeabi_dsub>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cc0:	f7fb ff0c 	bl	8000adc <__aeabi_dcmplt>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f43f af30 	beq.w	8004b2a <_dtoa_r+0x432>
 8004cca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004cce:	2b30      	cmp	r3, #48	; 0x30
 8004cd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8004cd4:	d002      	beq.n	8004cdc <_dtoa_r+0x5e4>
 8004cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004cda:	e04a      	b.n	8004d72 <_dtoa_r+0x67a>
 8004cdc:	4615      	mov	r5, r2
 8004cde:	e7f4      	b.n	8004cca <_dtoa_r+0x5d2>
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <_dtoa_r+0x600>)
 8004ce2:	f7fb fc89 	bl	80005f8 <__aeabi_dmul>
 8004ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8004cea:	e7bc      	b.n	8004c66 <_dtoa_r+0x56e>
 8004cec:	08006300 	.word	0x08006300
 8004cf0:	080062d8 	.word	0x080062d8
 8004cf4:	3ff00000 	.word	0x3ff00000
 8004cf8:	40240000 	.word	0x40240000
 8004cfc:	401c0000 	.word	0x401c0000
 8004d00:	40140000 	.word	0x40140000
 8004d04:	3fe00000 	.word	0x3fe00000
 8004d08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d0c:	465d      	mov	r5, fp
 8004d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d12:	4630      	mov	r0, r6
 8004d14:	4639      	mov	r1, r7
 8004d16:	f7fb fd99 	bl	800084c <__aeabi_ddiv>
 8004d1a:	f7fb ff1d 	bl	8000b58 <__aeabi_d2iz>
 8004d1e:	4680      	mov	r8, r0
 8004d20:	f7fb fc00 	bl	8000524 <__aeabi_i2d>
 8004d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d28:	f7fb fc66 	bl	80005f8 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4630      	mov	r0, r6
 8004d32:	4639      	mov	r1, r7
 8004d34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004d38:	f7fb faa6 	bl	8000288 <__aeabi_dsub>
 8004d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8004d40:	eba5 060b 	sub.w	r6, r5, fp
 8004d44:	45b1      	cmp	r9, r6
 8004d46:	4602      	mov	r2, r0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	d139      	bne.n	8004dc0 <_dtoa_r+0x6c8>
 8004d4c:	f7fb fa9e 	bl	800028c <__adddf3>
 8004d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d54:	4606      	mov	r6, r0
 8004d56:	460f      	mov	r7, r1
 8004d58:	f7fb fede 	bl	8000b18 <__aeabi_dcmpgt>
 8004d5c:	b9c8      	cbnz	r0, 8004d92 <_dtoa_r+0x69a>
 8004d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d62:	4630      	mov	r0, r6
 8004d64:	4639      	mov	r1, r7
 8004d66:	f7fb feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d6a:	b110      	cbz	r0, 8004d72 <_dtoa_r+0x67a>
 8004d6c:	f018 0f01 	tst.w	r8, #1
 8004d70:	d10f      	bne.n	8004d92 <_dtoa_r+0x69a>
 8004d72:	9904      	ldr	r1, [sp, #16]
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fcaa 	bl	80056ce <_Bfree>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004d7e:	702b      	strb	r3, [r5, #0]
 8004d80:	f10a 0301 	add.w	r3, sl, #1
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8241 	beq.w	8005210 <_dtoa_r+0xb18>
 8004d8e:	601d      	str	r5, [r3, #0]
 8004d90:	e23e      	b.n	8005210 <_dtoa_r+0xb18>
 8004d92:	f8cd a020 	str.w	sl, [sp, #32]
 8004d96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d9a:	2a39      	cmp	r2, #57	; 0x39
 8004d9c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004da0:	d108      	bne.n	8004db4 <_dtoa_r+0x6bc>
 8004da2:	459b      	cmp	fp, r3
 8004da4:	d10a      	bne.n	8004dbc <_dtoa_r+0x6c4>
 8004da6:	9b08      	ldr	r3, [sp, #32]
 8004da8:	3301      	adds	r3, #1
 8004daa:	9308      	str	r3, [sp, #32]
 8004dac:	2330      	movs	r3, #48	; 0x30
 8004dae:	f88b 3000 	strb.w	r3, [fp]
 8004db2:	465b      	mov	r3, fp
 8004db4:	781a      	ldrb	r2, [r3, #0]
 8004db6:	3201      	adds	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	e78c      	b.n	8004cd6 <_dtoa_r+0x5de>
 8004dbc:	461d      	mov	r5, r3
 8004dbe:	e7ea      	b.n	8004d96 <_dtoa_r+0x69e>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4b9b      	ldr	r3, [pc, #620]	; (8005030 <_dtoa_r+0x938>)
 8004dc4:	f7fb fc18 	bl	80005f8 <__aeabi_dmul>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2300      	movs	r3, #0
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	f7fb fe7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d09a      	beq.n	8004d0e <_dtoa_r+0x616>
 8004dd8:	e7cb      	b.n	8004d72 <_dtoa_r+0x67a>
 8004dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	f000 808b 	beq.w	8004ef8 <_dtoa_r+0x800>
 8004de2:	9a06      	ldr	r2, [sp, #24]
 8004de4:	2a01      	cmp	r2, #1
 8004de6:	dc6e      	bgt.n	8004ec6 <_dtoa_r+0x7ce>
 8004de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	d067      	beq.n	8004ebe <_dtoa_r+0x7c6>
 8004dee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004df2:	9f07      	ldr	r7, [sp, #28]
 8004df4:	9d05      	ldr	r5, [sp, #20]
 8004df6:	9a05      	ldr	r2, [sp, #20]
 8004df8:	2101      	movs	r1, #1
 8004dfa:	441a      	add	r2, r3
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	9205      	str	r2, [sp, #20]
 8004e00:	4498      	add	r8, r3
 8004e02:	f000 fd04 	bl	800580e <__i2b>
 8004e06:	4606      	mov	r6, r0
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	dd0c      	ble.n	8004e26 <_dtoa_r+0x72e>
 8004e0c:	f1b8 0f00 	cmp.w	r8, #0
 8004e10:	dd09      	ble.n	8004e26 <_dtoa_r+0x72e>
 8004e12:	4545      	cmp	r5, r8
 8004e14:	9a05      	ldr	r2, [sp, #20]
 8004e16:	462b      	mov	r3, r5
 8004e18:	bfa8      	it	ge
 8004e1a:	4643      	movge	r3, r8
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	9205      	str	r2, [sp, #20]
 8004e20:	1aed      	subs	r5, r5, r3
 8004e22:	eba8 0803 	sub.w	r8, r8, r3
 8004e26:	9b07      	ldr	r3, [sp, #28]
 8004e28:	b1eb      	cbz	r3, 8004e66 <_dtoa_r+0x76e>
 8004e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d067      	beq.n	8004f00 <_dtoa_r+0x808>
 8004e30:	b18f      	cbz	r7, 8004e56 <_dtoa_r+0x75e>
 8004e32:	4631      	mov	r1, r6
 8004e34:	463a      	mov	r2, r7
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 fd88 	bl	800594c <__pow5mult>
 8004e3c:	9a04      	ldr	r2, [sp, #16]
 8004e3e:	4601      	mov	r1, r0
 8004e40:	4606      	mov	r6, r0
 8004e42:	4620      	mov	r0, r4
 8004e44:	f000 fcec 	bl	8005820 <__multiply>
 8004e48:	9904      	ldr	r1, [sp, #16]
 8004e4a:	9008      	str	r0, [sp, #32]
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f000 fc3e 	bl	80056ce <_Bfree>
 8004e52:	9b08      	ldr	r3, [sp, #32]
 8004e54:	9304      	str	r3, [sp, #16]
 8004e56:	9b07      	ldr	r3, [sp, #28]
 8004e58:	1bda      	subs	r2, r3, r7
 8004e5a:	d004      	beq.n	8004e66 <_dtoa_r+0x76e>
 8004e5c:	9904      	ldr	r1, [sp, #16]
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f000 fd74 	bl	800594c <__pow5mult>
 8004e64:	9004      	str	r0, [sp, #16]
 8004e66:	2101      	movs	r1, #1
 8004e68:	4620      	mov	r0, r4
 8004e6a:	f000 fcd0 	bl	800580e <__i2b>
 8004e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e70:	4607      	mov	r7, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 81d0 	beq.w	8005218 <_dtoa_r+0xb20>
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	f000 fd65 	bl	800594c <__pow5mult>
 8004e82:	9b06      	ldr	r3, [sp, #24]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	4607      	mov	r7, r0
 8004e88:	dc40      	bgt.n	8004f0c <_dtoa_r+0x814>
 8004e8a:	9b00      	ldr	r3, [sp, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d139      	bne.n	8004f04 <_dtoa_r+0x80c>
 8004e90:	9b01      	ldr	r3, [sp, #4]
 8004e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d136      	bne.n	8004f08 <_dtoa_r+0x810>
 8004e9a:	9b01      	ldr	r3, [sp, #4]
 8004e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ea0:	0d1b      	lsrs	r3, r3, #20
 8004ea2:	051b      	lsls	r3, r3, #20
 8004ea4:	b12b      	cbz	r3, 8004eb2 <_dtoa_r+0x7ba>
 8004ea6:	9b05      	ldr	r3, [sp, #20]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	9305      	str	r3, [sp, #20]
 8004eac:	f108 0801 	add.w	r8, r8, #1
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	9307      	str	r3, [sp, #28]
 8004eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12a      	bne.n	8004f10 <_dtoa_r+0x818>
 8004eba:	2001      	movs	r0, #1
 8004ebc:	e030      	b.n	8004f20 <_dtoa_r+0x828>
 8004ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ec0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ec4:	e795      	b.n	8004df2 <_dtoa_r+0x6fa>
 8004ec6:	9b07      	ldr	r3, [sp, #28]
 8004ec8:	f109 37ff 	add.w	r7, r9, #4294967295
 8004ecc:	42bb      	cmp	r3, r7
 8004ece:	bfbf      	itttt	lt
 8004ed0:	9b07      	ldrlt	r3, [sp, #28]
 8004ed2:	9707      	strlt	r7, [sp, #28]
 8004ed4:	1afa      	sublt	r2, r7, r3
 8004ed6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004ed8:	bfbb      	ittet	lt
 8004eda:	189b      	addlt	r3, r3, r2
 8004edc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004ede:	1bdf      	subge	r7, r3, r7
 8004ee0:	2700      	movlt	r7, #0
 8004ee2:	f1b9 0f00 	cmp.w	r9, #0
 8004ee6:	bfb5      	itete	lt
 8004ee8:	9b05      	ldrlt	r3, [sp, #20]
 8004eea:	9d05      	ldrge	r5, [sp, #20]
 8004eec:	eba3 0509 	sublt.w	r5, r3, r9
 8004ef0:	464b      	movge	r3, r9
 8004ef2:	bfb8      	it	lt
 8004ef4:	2300      	movlt	r3, #0
 8004ef6:	e77e      	b.n	8004df6 <_dtoa_r+0x6fe>
 8004ef8:	9f07      	ldr	r7, [sp, #28]
 8004efa:	9d05      	ldr	r5, [sp, #20]
 8004efc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004efe:	e783      	b.n	8004e08 <_dtoa_r+0x710>
 8004f00:	9a07      	ldr	r2, [sp, #28]
 8004f02:	e7ab      	b.n	8004e5c <_dtoa_r+0x764>
 8004f04:	2300      	movs	r3, #0
 8004f06:	e7d4      	b.n	8004eb2 <_dtoa_r+0x7ba>
 8004f08:	9b00      	ldr	r3, [sp, #0]
 8004f0a:	e7d2      	b.n	8004eb2 <_dtoa_r+0x7ba>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9307      	str	r3, [sp, #28]
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004f16:	6918      	ldr	r0, [r3, #16]
 8004f18:	f000 fc2b 	bl	8005772 <__hi0bits>
 8004f1c:	f1c0 0020 	rsb	r0, r0, #32
 8004f20:	4440      	add	r0, r8
 8004f22:	f010 001f 	ands.w	r0, r0, #31
 8004f26:	d047      	beq.n	8004fb8 <_dtoa_r+0x8c0>
 8004f28:	f1c0 0320 	rsb	r3, r0, #32
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	dd3b      	ble.n	8004fa8 <_dtoa_r+0x8b0>
 8004f30:	9b05      	ldr	r3, [sp, #20]
 8004f32:	f1c0 001c 	rsb	r0, r0, #28
 8004f36:	4403      	add	r3, r0
 8004f38:	9305      	str	r3, [sp, #20]
 8004f3a:	4405      	add	r5, r0
 8004f3c:	4480      	add	r8, r0
 8004f3e:	9b05      	ldr	r3, [sp, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	dd05      	ble.n	8004f50 <_dtoa_r+0x858>
 8004f44:	461a      	mov	r2, r3
 8004f46:	9904      	ldr	r1, [sp, #16]
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 fd4d 	bl	80059e8 <__lshift>
 8004f4e:	9004      	str	r0, [sp, #16]
 8004f50:	f1b8 0f00 	cmp.w	r8, #0
 8004f54:	dd05      	ble.n	8004f62 <_dtoa_r+0x86a>
 8004f56:	4639      	mov	r1, r7
 8004f58:	4642      	mov	r2, r8
 8004f5a:	4620      	mov	r0, r4
 8004f5c:	f000 fd44 	bl	80059e8 <__lshift>
 8004f60:	4607      	mov	r7, r0
 8004f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f64:	b353      	cbz	r3, 8004fbc <_dtoa_r+0x8c4>
 8004f66:	4639      	mov	r1, r7
 8004f68:	9804      	ldr	r0, [sp, #16]
 8004f6a:	f000 fd91 	bl	8005a90 <__mcmp>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	da24      	bge.n	8004fbc <_dtoa_r+0x8c4>
 8004f72:	2300      	movs	r3, #0
 8004f74:	220a      	movs	r2, #10
 8004f76:	9904      	ldr	r1, [sp, #16]
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 fbbf 	bl	80056fc <__multadd>
 8004f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f80:	9004      	str	r0, [sp, #16]
 8004f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 814d 	beq.w	8005226 <_dtoa_r+0xb2e>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	4631      	mov	r1, r6
 8004f90:	220a      	movs	r2, #10
 8004f92:	4620      	mov	r0, r4
 8004f94:	f000 fbb2 	bl	80056fc <__multadd>
 8004f98:	9b02      	ldr	r3, [sp, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	4606      	mov	r6, r0
 8004f9e:	dc4f      	bgt.n	8005040 <_dtoa_r+0x948>
 8004fa0:	9b06      	ldr	r3, [sp, #24]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	dd4c      	ble.n	8005040 <_dtoa_r+0x948>
 8004fa6:	e011      	b.n	8004fcc <_dtoa_r+0x8d4>
 8004fa8:	d0c9      	beq.n	8004f3e <_dtoa_r+0x846>
 8004faa:	9a05      	ldr	r2, [sp, #20]
 8004fac:	331c      	adds	r3, #28
 8004fae:	441a      	add	r2, r3
 8004fb0:	9205      	str	r2, [sp, #20]
 8004fb2:	441d      	add	r5, r3
 8004fb4:	4498      	add	r8, r3
 8004fb6:	e7c2      	b.n	8004f3e <_dtoa_r+0x846>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	e7f6      	b.n	8004faa <_dtoa_r+0x8b2>
 8004fbc:	f1b9 0f00 	cmp.w	r9, #0
 8004fc0:	dc38      	bgt.n	8005034 <_dtoa_r+0x93c>
 8004fc2:	9b06      	ldr	r3, [sp, #24]
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	dd35      	ble.n	8005034 <_dtoa_r+0x93c>
 8004fc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004fcc:	9b02      	ldr	r3, [sp, #8]
 8004fce:	b963      	cbnz	r3, 8004fea <_dtoa_r+0x8f2>
 8004fd0:	4639      	mov	r1, r7
 8004fd2:	2205      	movs	r2, #5
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f000 fb91 	bl	80056fc <__multadd>
 8004fda:	4601      	mov	r1, r0
 8004fdc:	4607      	mov	r7, r0
 8004fde:	9804      	ldr	r0, [sp, #16]
 8004fe0:	f000 fd56 	bl	8005a90 <__mcmp>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	f73f adcc 	bgt.w	8004b82 <_dtoa_r+0x48a>
 8004fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fec:	465d      	mov	r5, fp
 8004fee:	ea6f 0a03 	mvn.w	sl, r3
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f000 fb68 	bl	80056ce <_Bfree>
 8004ffe:	2e00      	cmp	r6, #0
 8005000:	f43f aeb7 	beq.w	8004d72 <_dtoa_r+0x67a>
 8005004:	f1b9 0f00 	cmp.w	r9, #0
 8005008:	d005      	beq.n	8005016 <_dtoa_r+0x91e>
 800500a:	45b1      	cmp	r9, r6
 800500c:	d003      	beq.n	8005016 <_dtoa_r+0x91e>
 800500e:	4649      	mov	r1, r9
 8005010:	4620      	mov	r0, r4
 8005012:	f000 fb5c 	bl	80056ce <_Bfree>
 8005016:	4631      	mov	r1, r6
 8005018:	4620      	mov	r0, r4
 800501a:	f000 fb58 	bl	80056ce <_Bfree>
 800501e:	e6a8      	b.n	8004d72 <_dtoa_r+0x67a>
 8005020:	2700      	movs	r7, #0
 8005022:	463e      	mov	r6, r7
 8005024:	e7e1      	b.n	8004fea <_dtoa_r+0x8f2>
 8005026:	f8dd a020 	ldr.w	sl, [sp, #32]
 800502a:	463e      	mov	r6, r7
 800502c:	e5a9      	b.n	8004b82 <_dtoa_r+0x48a>
 800502e:	bf00      	nop
 8005030:	40240000 	.word	0x40240000
 8005034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005036:	f8cd 9008 	str.w	r9, [sp, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 80fa 	beq.w	8005234 <_dtoa_r+0xb3c>
 8005040:	2d00      	cmp	r5, #0
 8005042:	dd05      	ble.n	8005050 <_dtoa_r+0x958>
 8005044:	4631      	mov	r1, r6
 8005046:	462a      	mov	r2, r5
 8005048:	4620      	mov	r0, r4
 800504a:	f000 fccd 	bl	80059e8 <__lshift>
 800504e:	4606      	mov	r6, r0
 8005050:	9b07      	ldr	r3, [sp, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04c      	beq.n	80050f0 <_dtoa_r+0x9f8>
 8005056:	6871      	ldr	r1, [r6, #4]
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fb04 	bl	8005666 <_Balloc>
 800505e:	6932      	ldr	r2, [r6, #16]
 8005060:	3202      	adds	r2, #2
 8005062:	4605      	mov	r5, r0
 8005064:	0092      	lsls	r2, r2, #2
 8005066:	f106 010c 	add.w	r1, r6, #12
 800506a:	300c      	adds	r0, #12
 800506c:	f000 faf0 	bl	8005650 <memcpy>
 8005070:	2201      	movs	r2, #1
 8005072:	4629      	mov	r1, r5
 8005074:	4620      	mov	r0, r4
 8005076:	f000 fcb7 	bl	80059e8 <__lshift>
 800507a:	9b00      	ldr	r3, [sp, #0]
 800507c:	f8cd b014 	str.w	fp, [sp, #20]
 8005080:	f003 0301 	and.w	r3, r3, #1
 8005084:	46b1      	mov	r9, r6
 8005086:	9307      	str	r3, [sp, #28]
 8005088:	4606      	mov	r6, r0
 800508a:	4639      	mov	r1, r7
 800508c:	9804      	ldr	r0, [sp, #16]
 800508e:	f7ff faa7 	bl	80045e0 <quorem>
 8005092:	4649      	mov	r1, r9
 8005094:	4605      	mov	r5, r0
 8005096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800509a:	9804      	ldr	r0, [sp, #16]
 800509c:	f000 fcf8 	bl	8005a90 <__mcmp>
 80050a0:	4632      	mov	r2, r6
 80050a2:	9000      	str	r0, [sp, #0]
 80050a4:	4639      	mov	r1, r7
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fd0c 	bl	8005ac4 <__mdiff>
 80050ac:	68c3      	ldr	r3, [r0, #12]
 80050ae:	4602      	mov	r2, r0
 80050b0:	bb03      	cbnz	r3, 80050f4 <_dtoa_r+0x9fc>
 80050b2:	4601      	mov	r1, r0
 80050b4:	9008      	str	r0, [sp, #32]
 80050b6:	9804      	ldr	r0, [sp, #16]
 80050b8:	f000 fcea 	bl	8005a90 <__mcmp>
 80050bc:	9a08      	ldr	r2, [sp, #32]
 80050be:	4603      	mov	r3, r0
 80050c0:	4611      	mov	r1, r2
 80050c2:	4620      	mov	r0, r4
 80050c4:	9308      	str	r3, [sp, #32]
 80050c6:	f000 fb02 	bl	80056ce <_Bfree>
 80050ca:	9b08      	ldr	r3, [sp, #32]
 80050cc:	b9a3      	cbnz	r3, 80050f8 <_dtoa_r+0xa00>
 80050ce:	9a06      	ldr	r2, [sp, #24]
 80050d0:	b992      	cbnz	r2, 80050f8 <_dtoa_r+0xa00>
 80050d2:	9a07      	ldr	r2, [sp, #28]
 80050d4:	b982      	cbnz	r2, 80050f8 <_dtoa_r+0xa00>
 80050d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80050da:	d029      	beq.n	8005130 <_dtoa_r+0xa38>
 80050dc:	9b00      	ldr	r3, [sp, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dd01      	ble.n	80050e6 <_dtoa_r+0x9ee>
 80050e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80050e6:	9b05      	ldr	r3, [sp, #20]
 80050e8:	1c5d      	adds	r5, r3, #1
 80050ea:	f883 8000 	strb.w	r8, [r3]
 80050ee:	e782      	b.n	8004ff6 <_dtoa_r+0x8fe>
 80050f0:	4630      	mov	r0, r6
 80050f2:	e7c2      	b.n	800507a <_dtoa_r+0x982>
 80050f4:	2301      	movs	r3, #1
 80050f6:	e7e3      	b.n	80050c0 <_dtoa_r+0x9c8>
 80050f8:	9a00      	ldr	r2, [sp, #0]
 80050fa:	2a00      	cmp	r2, #0
 80050fc:	db04      	blt.n	8005108 <_dtoa_r+0xa10>
 80050fe:	d125      	bne.n	800514c <_dtoa_r+0xa54>
 8005100:	9a06      	ldr	r2, [sp, #24]
 8005102:	bb1a      	cbnz	r2, 800514c <_dtoa_r+0xa54>
 8005104:	9a07      	ldr	r2, [sp, #28]
 8005106:	bb0a      	cbnz	r2, 800514c <_dtoa_r+0xa54>
 8005108:	2b00      	cmp	r3, #0
 800510a:	ddec      	ble.n	80050e6 <_dtoa_r+0x9ee>
 800510c:	2201      	movs	r2, #1
 800510e:	9904      	ldr	r1, [sp, #16]
 8005110:	4620      	mov	r0, r4
 8005112:	f000 fc69 	bl	80059e8 <__lshift>
 8005116:	4639      	mov	r1, r7
 8005118:	9004      	str	r0, [sp, #16]
 800511a:	f000 fcb9 	bl	8005a90 <__mcmp>
 800511e:	2800      	cmp	r0, #0
 8005120:	dc03      	bgt.n	800512a <_dtoa_r+0xa32>
 8005122:	d1e0      	bne.n	80050e6 <_dtoa_r+0x9ee>
 8005124:	f018 0f01 	tst.w	r8, #1
 8005128:	d0dd      	beq.n	80050e6 <_dtoa_r+0x9ee>
 800512a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800512e:	d1d8      	bne.n	80050e2 <_dtoa_r+0x9ea>
 8005130:	9b05      	ldr	r3, [sp, #20]
 8005132:	9a05      	ldr	r2, [sp, #20]
 8005134:	1c5d      	adds	r5, r3, #1
 8005136:	2339      	movs	r3, #57	; 0x39
 8005138:	7013      	strb	r3, [r2, #0]
 800513a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800513e:	2b39      	cmp	r3, #57	; 0x39
 8005140:	f105 32ff 	add.w	r2, r5, #4294967295
 8005144:	d04f      	beq.n	80051e6 <_dtoa_r+0xaee>
 8005146:	3301      	adds	r3, #1
 8005148:	7013      	strb	r3, [r2, #0]
 800514a:	e754      	b.n	8004ff6 <_dtoa_r+0x8fe>
 800514c:	9a05      	ldr	r2, [sp, #20]
 800514e:	2b00      	cmp	r3, #0
 8005150:	f102 0501 	add.w	r5, r2, #1
 8005154:	dd06      	ble.n	8005164 <_dtoa_r+0xa6c>
 8005156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800515a:	d0e9      	beq.n	8005130 <_dtoa_r+0xa38>
 800515c:	f108 0801 	add.w	r8, r8, #1
 8005160:	9b05      	ldr	r3, [sp, #20]
 8005162:	e7c2      	b.n	80050ea <_dtoa_r+0x9f2>
 8005164:	9a02      	ldr	r2, [sp, #8]
 8005166:	f805 8c01 	strb.w	r8, [r5, #-1]
 800516a:	eba5 030b 	sub.w	r3, r5, fp
 800516e:	4293      	cmp	r3, r2
 8005170:	d021      	beq.n	80051b6 <_dtoa_r+0xabe>
 8005172:	2300      	movs	r3, #0
 8005174:	220a      	movs	r2, #10
 8005176:	9904      	ldr	r1, [sp, #16]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fabf 	bl	80056fc <__multadd>
 800517e:	45b1      	cmp	r9, r6
 8005180:	9004      	str	r0, [sp, #16]
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 020a 	mov.w	r2, #10
 800518a:	4649      	mov	r1, r9
 800518c:	4620      	mov	r0, r4
 800518e:	d105      	bne.n	800519c <_dtoa_r+0xaa4>
 8005190:	f000 fab4 	bl	80056fc <__multadd>
 8005194:	4681      	mov	r9, r0
 8005196:	4606      	mov	r6, r0
 8005198:	9505      	str	r5, [sp, #20]
 800519a:	e776      	b.n	800508a <_dtoa_r+0x992>
 800519c:	f000 faae 	bl	80056fc <__multadd>
 80051a0:	4631      	mov	r1, r6
 80051a2:	4681      	mov	r9, r0
 80051a4:	2300      	movs	r3, #0
 80051a6:	220a      	movs	r2, #10
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 faa7 	bl	80056fc <__multadd>
 80051ae:	4606      	mov	r6, r0
 80051b0:	e7f2      	b.n	8005198 <_dtoa_r+0xaa0>
 80051b2:	f04f 0900 	mov.w	r9, #0
 80051b6:	2201      	movs	r2, #1
 80051b8:	9904      	ldr	r1, [sp, #16]
 80051ba:	4620      	mov	r0, r4
 80051bc:	f000 fc14 	bl	80059e8 <__lshift>
 80051c0:	4639      	mov	r1, r7
 80051c2:	9004      	str	r0, [sp, #16]
 80051c4:	f000 fc64 	bl	8005a90 <__mcmp>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	dcb6      	bgt.n	800513a <_dtoa_r+0xa42>
 80051cc:	d102      	bne.n	80051d4 <_dtoa_r+0xadc>
 80051ce:	f018 0f01 	tst.w	r8, #1
 80051d2:	d1b2      	bne.n	800513a <_dtoa_r+0xa42>
 80051d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051d8:	2b30      	cmp	r3, #48	; 0x30
 80051da:	f105 32ff 	add.w	r2, r5, #4294967295
 80051de:	f47f af0a 	bne.w	8004ff6 <_dtoa_r+0x8fe>
 80051e2:	4615      	mov	r5, r2
 80051e4:	e7f6      	b.n	80051d4 <_dtoa_r+0xadc>
 80051e6:	4593      	cmp	fp, r2
 80051e8:	d105      	bne.n	80051f6 <_dtoa_r+0xafe>
 80051ea:	2331      	movs	r3, #49	; 0x31
 80051ec:	f10a 0a01 	add.w	sl, sl, #1
 80051f0:	f88b 3000 	strb.w	r3, [fp]
 80051f4:	e6ff      	b.n	8004ff6 <_dtoa_r+0x8fe>
 80051f6:	4615      	mov	r5, r2
 80051f8:	e79f      	b.n	800513a <_dtoa_r+0xa42>
 80051fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005260 <_dtoa_r+0xb68>
 80051fe:	e007      	b.n	8005210 <_dtoa_r+0xb18>
 8005200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005202:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005264 <_dtoa_r+0xb6c>
 8005206:	b11b      	cbz	r3, 8005210 <_dtoa_r+0xb18>
 8005208:	f10b 0308 	add.w	r3, fp, #8
 800520c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	4658      	mov	r0, fp
 8005212:	b017      	add	sp, #92	; 0x5c
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	9b06      	ldr	r3, [sp, #24]
 800521a:	2b01      	cmp	r3, #1
 800521c:	f77f ae35 	ble.w	8004e8a <_dtoa_r+0x792>
 8005220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005222:	9307      	str	r3, [sp, #28]
 8005224:	e649      	b.n	8004eba <_dtoa_r+0x7c2>
 8005226:	9b02      	ldr	r3, [sp, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	dc03      	bgt.n	8005234 <_dtoa_r+0xb3c>
 800522c:	9b06      	ldr	r3, [sp, #24]
 800522e:	2b02      	cmp	r3, #2
 8005230:	f73f aecc 	bgt.w	8004fcc <_dtoa_r+0x8d4>
 8005234:	465d      	mov	r5, fp
 8005236:	4639      	mov	r1, r7
 8005238:	9804      	ldr	r0, [sp, #16]
 800523a:	f7ff f9d1 	bl	80045e0 <quorem>
 800523e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005242:	f805 8b01 	strb.w	r8, [r5], #1
 8005246:	9a02      	ldr	r2, [sp, #8]
 8005248:	eba5 030b 	sub.w	r3, r5, fp
 800524c:	429a      	cmp	r2, r3
 800524e:	ddb0      	ble.n	80051b2 <_dtoa_r+0xaba>
 8005250:	2300      	movs	r3, #0
 8005252:	220a      	movs	r2, #10
 8005254:	9904      	ldr	r1, [sp, #16]
 8005256:	4620      	mov	r0, r4
 8005258:	f000 fa50 	bl	80056fc <__multadd>
 800525c:	9004      	str	r0, [sp, #16]
 800525e:	e7ea      	b.n	8005236 <_dtoa_r+0xb3e>
 8005260:	08006240 	.word	0x08006240
 8005264:	08006264 	.word	0x08006264

08005268 <__sflush_r>:
 8005268:	898a      	ldrh	r2, [r1, #12]
 800526a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800526e:	4605      	mov	r5, r0
 8005270:	0710      	lsls	r0, r2, #28
 8005272:	460c      	mov	r4, r1
 8005274:	d458      	bmi.n	8005328 <__sflush_r+0xc0>
 8005276:	684b      	ldr	r3, [r1, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc05      	bgt.n	8005288 <__sflush_r+0x20>
 800527c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	dc02      	bgt.n	8005288 <__sflush_r+0x20>
 8005282:	2000      	movs	r0, #0
 8005284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800528a:	2e00      	cmp	r6, #0
 800528c:	d0f9      	beq.n	8005282 <__sflush_r+0x1a>
 800528e:	2300      	movs	r3, #0
 8005290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005294:	682f      	ldr	r7, [r5, #0]
 8005296:	6a21      	ldr	r1, [r4, #32]
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	d032      	beq.n	8005302 <__sflush_r+0x9a>
 800529c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800529e:	89a3      	ldrh	r3, [r4, #12]
 80052a0:	075a      	lsls	r2, r3, #29
 80052a2:	d505      	bpl.n	80052b0 <__sflush_r+0x48>
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	1ac0      	subs	r0, r0, r3
 80052a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052aa:	b10b      	cbz	r3, 80052b0 <__sflush_r+0x48>
 80052ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ae:	1ac0      	subs	r0, r0, r3
 80052b0:	2300      	movs	r3, #0
 80052b2:	4602      	mov	r2, r0
 80052b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b6:	6a21      	ldr	r1, [r4, #32]
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b0      	blx	r6
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	89a3      	ldrh	r3, [r4, #12]
 80052c0:	d106      	bne.n	80052d0 <__sflush_r+0x68>
 80052c2:	6829      	ldr	r1, [r5, #0]
 80052c4:	291d      	cmp	r1, #29
 80052c6:	d848      	bhi.n	800535a <__sflush_r+0xf2>
 80052c8:	4a29      	ldr	r2, [pc, #164]	; (8005370 <__sflush_r+0x108>)
 80052ca:	40ca      	lsrs	r2, r1
 80052cc:	07d6      	lsls	r6, r2, #31
 80052ce:	d544      	bpl.n	800535a <__sflush_r+0xf2>
 80052d0:	2200      	movs	r2, #0
 80052d2:	6062      	str	r2, [r4, #4]
 80052d4:	04d9      	lsls	r1, r3, #19
 80052d6:	6922      	ldr	r2, [r4, #16]
 80052d8:	6022      	str	r2, [r4, #0]
 80052da:	d504      	bpl.n	80052e6 <__sflush_r+0x7e>
 80052dc:	1c42      	adds	r2, r0, #1
 80052de:	d101      	bne.n	80052e4 <__sflush_r+0x7c>
 80052e0:	682b      	ldr	r3, [r5, #0]
 80052e2:	b903      	cbnz	r3, 80052e6 <__sflush_r+0x7e>
 80052e4:	6560      	str	r0, [r4, #84]	; 0x54
 80052e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052e8:	602f      	str	r7, [r5, #0]
 80052ea:	2900      	cmp	r1, #0
 80052ec:	d0c9      	beq.n	8005282 <__sflush_r+0x1a>
 80052ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052f2:	4299      	cmp	r1, r3
 80052f4:	d002      	beq.n	80052fc <__sflush_r+0x94>
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fc9e 	bl	8005c38 <_free_r>
 80052fc:	2000      	movs	r0, #0
 80052fe:	6360      	str	r0, [r4, #52]	; 0x34
 8005300:	e7c0      	b.n	8005284 <__sflush_r+0x1c>
 8005302:	2301      	movs	r3, #1
 8005304:	4628      	mov	r0, r5
 8005306:	47b0      	blx	r6
 8005308:	1c41      	adds	r1, r0, #1
 800530a:	d1c8      	bne.n	800529e <__sflush_r+0x36>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d0c5      	beq.n	800529e <__sflush_r+0x36>
 8005312:	2b1d      	cmp	r3, #29
 8005314:	d001      	beq.n	800531a <__sflush_r+0xb2>
 8005316:	2b16      	cmp	r3, #22
 8005318:	d101      	bne.n	800531e <__sflush_r+0xb6>
 800531a:	602f      	str	r7, [r5, #0]
 800531c:	e7b1      	b.n	8005282 <__sflush_r+0x1a>
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005324:	81a3      	strh	r3, [r4, #12]
 8005326:	e7ad      	b.n	8005284 <__sflush_r+0x1c>
 8005328:	690f      	ldr	r7, [r1, #16]
 800532a:	2f00      	cmp	r7, #0
 800532c:	d0a9      	beq.n	8005282 <__sflush_r+0x1a>
 800532e:	0793      	lsls	r3, r2, #30
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	bf08      	it	eq
 8005334:	694b      	ldreq	r3, [r1, #20]
 8005336:	600f      	str	r7, [r1, #0]
 8005338:	bf18      	it	ne
 800533a:	2300      	movne	r3, #0
 800533c:	eba6 0807 	sub.w	r8, r6, r7
 8005340:	608b      	str	r3, [r1, #8]
 8005342:	f1b8 0f00 	cmp.w	r8, #0
 8005346:	dd9c      	ble.n	8005282 <__sflush_r+0x1a>
 8005348:	4643      	mov	r3, r8
 800534a:	463a      	mov	r2, r7
 800534c:	6a21      	ldr	r1, [r4, #32]
 800534e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	2800      	cmp	r0, #0
 8005356:	dc06      	bgt.n	8005366 <__sflush_r+0xfe>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e78e      	b.n	8005284 <__sflush_r+0x1c>
 8005366:	4407      	add	r7, r0
 8005368:	eba8 0800 	sub.w	r8, r8, r0
 800536c:	e7e9      	b.n	8005342 <__sflush_r+0xda>
 800536e:	bf00      	nop
 8005370:	20400001 	.word	0x20400001

08005374 <_fflush_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	690b      	ldr	r3, [r1, #16]
 8005378:	4605      	mov	r5, r0
 800537a:	460c      	mov	r4, r1
 800537c:	b1db      	cbz	r3, 80053b6 <_fflush_r+0x42>
 800537e:	b118      	cbz	r0, 8005388 <_fflush_r+0x14>
 8005380:	6983      	ldr	r3, [r0, #24]
 8005382:	b90b      	cbnz	r3, 8005388 <_fflush_r+0x14>
 8005384:	f000 f860 	bl	8005448 <__sinit>
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <_fflush_r+0x48>)
 800538a:	429c      	cmp	r4, r3
 800538c:	d109      	bne.n	80053a2 <_fflush_r+0x2e>
 800538e:	686c      	ldr	r4, [r5, #4]
 8005390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005394:	b17b      	cbz	r3, 80053b6 <_fflush_r+0x42>
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800539e:	f7ff bf63 	b.w	8005268 <__sflush_r>
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <_fflush_r+0x4c>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d101      	bne.n	80053ac <_fflush_r+0x38>
 80053a8:	68ac      	ldr	r4, [r5, #8]
 80053aa:	e7f1      	b.n	8005390 <_fflush_r+0x1c>
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <_fflush_r+0x50>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	bf08      	it	eq
 80053b2:	68ec      	ldreq	r4, [r5, #12]
 80053b4:	e7ec      	b.n	8005390 <_fflush_r+0x1c>
 80053b6:	2000      	movs	r0, #0
 80053b8:	bd38      	pop	{r3, r4, r5, pc}
 80053ba:	bf00      	nop
 80053bc:	08006294 	.word	0x08006294
 80053c0:	080062b4 	.word	0x080062b4
 80053c4:	08006274 	.word	0x08006274

080053c8 <std>:
 80053c8:	2300      	movs	r3, #0
 80053ca:	b510      	push	{r4, lr}
 80053cc:	4604      	mov	r4, r0
 80053ce:	e9c0 3300 	strd	r3, r3, [r0]
 80053d2:	6083      	str	r3, [r0, #8]
 80053d4:	8181      	strh	r1, [r0, #12]
 80053d6:	6643      	str	r3, [r0, #100]	; 0x64
 80053d8:	81c2      	strh	r2, [r0, #14]
 80053da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053de:	6183      	str	r3, [r0, #24]
 80053e0:	4619      	mov	r1, r3
 80053e2:	2208      	movs	r2, #8
 80053e4:	305c      	adds	r0, #92	; 0x5c
 80053e6:	f7fe fbbf 	bl	8003b68 <memset>
 80053ea:	4b05      	ldr	r3, [pc, #20]	; (8005400 <std+0x38>)
 80053ec:	6263      	str	r3, [r4, #36]	; 0x24
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <std+0x3c>)
 80053f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <std+0x40>)
 80053f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053f6:	4b05      	ldr	r3, [pc, #20]	; (800540c <std+0x44>)
 80053f8:	6224      	str	r4, [r4, #32]
 80053fa:	6323      	str	r3, [r4, #48]	; 0x30
 80053fc:	bd10      	pop	{r4, pc}
 80053fe:	bf00      	nop
 8005400:	08006029 	.word	0x08006029
 8005404:	0800604b 	.word	0x0800604b
 8005408:	08006083 	.word	0x08006083
 800540c:	080060a7 	.word	0x080060a7

08005410 <_cleanup_r>:
 8005410:	4901      	ldr	r1, [pc, #4]	; (8005418 <_cleanup_r+0x8>)
 8005412:	f000 b885 	b.w	8005520 <_fwalk_reent>
 8005416:	bf00      	nop
 8005418:	08005375 	.word	0x08005375

0800541c <__sfmoreglue>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	1e4a      	subs	r2, r1, #1
 8005420:	2568      	movs	r5, #104	; 0x68
 8005422:	4355      	muls	r5, r2
 8005424:	460e      	mov	r6, r1
 8005426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800542a:	f000 fc53 	bl	8005cd4 <_malloc_r>
 800542e:	4604      	mov	r4, r0
 8005430:	b140      	cbz	r0, 8005444 <__sfmoreglue+0x28>
 8005432:	2100      	movs	r1, #0
 8005434:	e9c0 1600 	strd	r1, r6, [r0]
 8005438:	300c      	adds	r0, #12
 800543a:	60a0      	str	r0, [r4, #8]
 800543c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005440:	f7fe fb92 	bl	8003b68 <memset>
 8005444:	4620      	mov	r0, r4
 8005446:	bd70      	pop	{r4, r5, r6, pc}

08005448 <__sinit>:
 8005448:	6983      	ldr	r3, [r0, #24]
 800544a:	b510      	push	{r4, lr}
 800544c:	4604      	mov	r4, r0
 800544e:	bb33      	cbnz	r3, 800549e <__sinit+0x56>
 8005450:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005454:	6503      	str	r3, [r0, #80]	; 0x50
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <__sinit+0x58>)
 8005458:	4a12      	ldr	r2, [pc, #72]	; (80054a4 <__sinit+0x5c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6282      	str	r2, [r0, #40]	; 0x28
 800545e:	4298      	cmp	r0, r3
 8005460:	bf04      	itt	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	6183      	streq	r3, [r0, #24]
 8005466:	f000 f81f 	bl	80054a8 <__sfp>
 800546a:	6060      	str	r0, [r4, #4]
 800546c:	4620      	mov	r0, r4
 800546e:	f000 f81b 	bl	80054a8 <__sfp>
 8005472:	60a0      	str	r0, [r4, #8]
 8005474:	4620      	mov	r0, r4
 8005476:	f000 f817 	bl	80054a8 <__sfp>
 800547a:	2200      	movs	r2, #0
 800547c:	60e0      	str	r0, [r4, #12]
 800547e:	2104      	movs	r1, #4
 8005480:	6860      	ldr	r0, [r4, #4]
 8005482:	f7ff ffa1 	bl	80053c8 <std>
 8005486:	2201      	movs	r2, #1
 8005488:	2109      	movs	r1, #9
 800548a:	68a0      	ldr	r0, [r4, #8]
 800548c:	f7ff ff9c 	bl	80053c8 <std>
 8005490:	2202      	movs	r2, #2
 8005492:	2112      	movs	r1, #18
 8005494:	68e0      	ldr	r0, [r4, #12]
 8005496:	f7ff ff97 	bl	80053c8 <std>
 800549a:	2301      	movs	r3, #1
 800549c:	61a3      	str	r3, [r4, #24]
 800549e:	bd10      	pop	{r4, pc}
 80054a0:	0800622c 	.word	0x0800622c
 80054a4:	08005411 	.word	0x08005411

080054a8 <__sfp>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <__sfp+0x70>)
 80054ac:	681e      	ldr	r6, [r3, #0]
 80054ae:	69b3      	ldr	r3, [r6, #24]
 80054b0:	4607      	mov	r7, r0
 80054b2:	b913      	cbnz	r3, 80054ba <__sfp+0x12>
 80054b4:	4630      	mov	r0, r6
 80054b6:	f7ff ffc7 	bl	8005448 <__sinit>
 80054ba:	3648      	adds	r6, #72	; 0x48
 80054bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	d503      	bpl.n	80054cc <__sfp+0x24>
 80054c4:	6833      	ldr	r3, [r6, #0]
 80054c6:	b133      	cbz	r3, 80054d6 <__sfp+0x2e>
 80054c8:	6836      	ldr	r6, [r6, #0]
 80054ca:	e7f7      	b.n	80054bc <__sfp+0x14>
 80054cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054d0:	b16d      	cbz	r5, 80054ee <__sfp+0x46>
 80054d2:	3468      	adds	r4, #104	; 0x68
 80054d4:	e7f4      	b.n	80054c0 <__sfp+0x18>
 80054d6:	2104      	movs	r1, #4
 80054d8:	4638      	mov	r0, r7
 80054da:	f7ff ff9f 	bl	800541c <__sfmoreglue>
 80054de:	6030      	str	r0, [r6, #0]
 80054e0:	2800      	cmp	r0, #0
 80054e2:	d1f1      	bne.n	80054c8 <__sfp+0x20>
 80054e4:	230c      	movs	r3, #12
 80054e6:	603b      	str	r3, [r7, #0]
 80054e8:	4604      	mov	r4, r0
 80054ea:	4620      	mov	r0, r4
 80054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <__sfp+0x74>)
 80054f0:	6665      	str	r5, [r4, #100]	; 0x64
 80054f2:	e9c4 5500 	strd	r5, r5, [r4]
 80054f6:	60a5      	str	r5, [r4, #8]
 80054f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80054fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005500:	2208      	movs	r2, #8
 8005502:	4629      	mov	r1, r5
 8005504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005508:	f7fe fb2e 	bl	8003b68 <memset>
 800550c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005514:	e7e9      	b.n	80054ea <__sfp+0x42>
 8005516:	bf00      	nop
 8005518:	0800622c 	.word	0x0800622c
 800551c:	ffff0001 	.word	0xffff0001

08005520 <_fwalk_reent>:
 8005520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005524:	4680      	mov	r8, r0
 8005526:	4689      	mov	r9, r1
 8005528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800552c:	2600      	movs	r6, #0
 800552e:	b914      	cbnz	r4, 8005536 <_fwalk_reent+0x16>
 8005530:	4630      	mov	r0, r6
 8005532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005536:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800553a:	3f01      	subs	r7, #1
 800553c:	d501      	bpl.n	8005542 <_fwalk_reent+0x22>
 800553e:	6824      	ldr	r4, [r4, #0]
 8005540:	e7f5      	b.n	800552e <_fwalk_reent+0xe>
 8005542:	89ab      	ldrh	r3, [r5, #12]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d907      	bls.n	8005558 <_fwalk_reent+0x38>
 8005548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800554c:	3301      	adds	r3, #1
 800554e:	d003      	beq.n	8005558 <_fwalk_reent+0x38>
 8005550:	4629      	mov	r1, r5
 8005552:	4640      	mov	r0, r8
 8005554:	47c8      	blx	r9
 8005556:	4306      	orrs	r6, r0
 8005558:	3568      	adds	r5, #104	; 0x68
 800555a:	e7ee      	b.n	800553a <_fwalk_reent+0x1a>

0800555c <_localeconv_r>:
 800555c:	4b04      	ldr	r3, [pc, #16]	; (8005570 <_localeconv_r+0x14>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a18      	ldr	r0, [r3, #32]
 8005562:	4b04      	ldr	r3, [pc, #16]	; (8005574 <_localeconv_r+0x18>)
 8005564:	2800      	cmp	r0, #0
 8005566:	bf08      	it	eq
 8005568:	4618      	moveq	r0, r3
 800556a:	30f0      	adds	r0, #240	; 0xf0
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000010 	.word	0x20000010
 8005574:	20000074 	.word	0x20000074

08005578 <__swhatbuf_r>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	460e      	mov	r6, r1
 800557c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005580:	2900      	cmp	r1, #0
 8005582:	b096      	sub	sp, #88	; 0x58
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	da07      	bge.n	800559a <__swhatbuf_r+0x22>
 800558a:	2300      	movs	r3, #0
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	89b3      	ldrh	r3, [r6, #12]
 8005590:	061a      	lsls	r2, r3, #24
 8005592:	d410      	bmi.n	80055b6 <__swhatbuf_r+0x3e>
 8005594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005598:	e00e      	b.n	80055b8 <__swhatbuf_r+0x40>
 800559a:	466a      	mov	r2, sp
 800559c:	f000 fdaa 	bl	80060f4 <_fstat_r>
 80055a0:	2800      	cmp	r0, #0
 80055a2:	dbf2      	blt.n	800558a <__swhatbuf_r+0x12>
 80055a4:	9a01      	ldr	r2, [sp, #4]
 80055a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055ae:	425a      	negs	r2, r3
 80055b0:	415a      	adcs	r2, r3
 80055b2:	602a      	str	r2, [r5, #0]
 80055b4:	e7ee      	b.n	8005594 <__swhatbuf_r+0x1c>
 80055b6:	2340      	movs	r3, #64	; 0x40
 80055b8:	2000      	movs	r0, #0
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	b016      	add	sp, #88	; 0x58
 80055be:	bd70      	pop	{r4, r5, r6, pc}

080055c0 <__smakebuf_r>:
 80055c0:	898b      	ldrh	r3, [r1, #12]
 80055c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055c4:	079d      	lsls	r5, r3, #30
 80055c6:	4606      	mov	r6, r0
 80055c8:	460c      	mov	r4, r1
 80055ca:	d507      	bpl.n	80055dc <__smakebuf_r+0x1c>
 80055cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	6123      	str	r3, [r4, #16]
 80055d4:	2301      	movs	r3, #1
 80055d6:	6163      	str	r3, [r4, #20]
 80055d8:	b002      	add	sp, #8
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	ab01      	add	r3, sp, #4
 80055de:	466a      	mov	r2, sp
 80055e0:	f7ff ffca 	bl	8005578 <__swhatbuf_r>
 80055e4:	9900      	ldr	r1, [sp, #0]
 80055e6:	4605      	mov	r5, r0
 80055e8:	4630      	mov	r0, r6
 80055ea:	f000 fb73 	bl	8005cd4 <_malloc_r>
 80055ee:	b948      	cbnz	r0, 8005604 <__smakebuf_r+0x44>
 80055f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f4:	059a      	lsls	r2, r3, #22
 80055f6:	d4ef      	bmi.n	80055d8 <__smakebuf_r+0x18>
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	f043 0302 	orr.w	r3, r3, #2
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	e7e3      	b.n	80055cc <__smakebuf_r+0xc>
 8005604:	4b0d      	ldr	r3, [pc, #52]	; (800563c <__smakebuf_r+0x7c>)
 8005606:	62b3      	str	r3, [r6, #40]	; 0x28
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	6020      	str	r0, [r4, #0]
 800560c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005610:	81a3      	strh	r3, [r4, #12]
 8005612:	9b00      	ldr	r3, [sp, #0]
 8005614:	6163      	str	r3, [r4, #20]
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	6120      	str	r0, [r4, #16]
 800561a:	b15b      	cbz	r3, 8005634 <__smakebuf_r+0x74>
 800561c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005620:	4630      	mov	r0, r6
 8005622:	f000 fd79 	bl	8006118 <_isatty_r>
 8005626:	b128      	cbz	r0, 8005634 <__smakebuf_r+0x74>
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	f023 0303 	bic.w	r3, r3, #3
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	431d      	orrs	r5, r3
 8005638:	81a5      	strh	r5, [r4, #12]
 800563a:	e7cd      	b.n	80055d8 <__smakebuf_r+0x18>
 800563c:	08005411 	.word	0x08005411

08005640 <malloc>:
 8005640:	4b02      	ldr	r3, [pc, #8]	; (800564c <malloc+0xc>)
 8005642:	4601      	mov	r1, r0
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f000 bb45 	b.w	8005cd4 <_malloc_r>
 800564a:	bf00      	nop
 800564c:	20000010 	.word	0x20000010

08005650 <memcpy>:
 8005650:	b510      	push	{r4, lr}
 8005652:	1e43      	subs	r3, r0, #1
 8005654:	440a      	add	r2, r1
 8005656:	4291      	cmp	r1, r2
 8005658:	d100      	bne.n	800565c <memcpy+0xc>
 800565a:	bd10      	pop	{r4, pc}
 800565c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005664:	e7f7      	b.n	8005656 <memcpy+0x6>

08005666 <_Balloc>:
 8005666:	b570      	push	{r4, r5, r6, lr}
 8005668:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800566a:	4604      	mov	r4, r0
 800566c:	460e      	mov	r6, r1
 800566e:	b93d      	cbnz	r5, 8005680 <_Balloc+0x1a>
 8005670:	2010      	movs	r0, #16
 8005672:	f7ff ffe5 	bl	8005640 <malloc>
 8005676:	6260      	str	r0, [r4, #36]	; 0x24
 8005678:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800567c:	6005      	str	r5, [r0, #0]
 800567e:	60c5      	str	r5, [r0, #12]
 8005680:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005682:	68eb      	ldr	r3, [r5, #12]
 8005684:	b183      	cbz	r3, 80056a8 <_Balloc+0x42>
 8005686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800568e:	b9b8      	cbnz	r0, 80056c0 <_Balloc+0x5a>
 8005690:	2101      	movs	r1, #1
 8005692:	fa01 f506 	lsl.w	r5, r1, r6
 8005696:	1d6a      	adds	r2, r5, #5
 8005698:	0092      	lsls	r2, r2, #2
 800569a:	4620      	mov	r0, r4
 800569c:	f000 fabe 	bl	8005c1c <_calloc_r>
 80056a0:	b160      	cbz	r0, 80056bc <_Balloc+0x56>
 80056a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80056a6:	e00e      	b.n	80056c6 <_Balloc+0x60>
 80056a8:	2221      	movs	r2, #33	; 0x21
 80056aa:	2104      	movs	r1, #4
 80056ac:	4620      	mov	r0, r4
 80056ae:	f000 fab5 	bl	8005c1c <_calloc_r>
 80056b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056b4:	60e8      	str	r0, [r5, #12]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e4      	bne.n	8005686 <_Balloc+0x20>
 80056bc:	2000      	movs	r0, #0
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	6802      	ldr	r2, [r0, #0]
 80056c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056c6:	2300      	movs	r3, #0
 80056c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056cc:	e7f7      	b.n	80056be <_Balloc+0x58>

080056ce <_Bfree>:
 80056ce:	b570      	push	{r4, r5, r6, lr}
 80056d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056d2:	4606      	mov	r6, r0
 80056d4:	460d      	mov	r5, r1
 80056d6:	b93c      	cbnz	r4, 80056e8 <_Bfree+0x1a>
 80056d8:	2010      	movs	r0, #16
 80056da:	f7ff ffb1 	bl	8005640 <malloc>
 80056de:	6270      	str	r0, [r6, #36]	; 0x24
 80056e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056e4:	6004      	str	r4, [r0, #0]
 80056e6:	60c4      	str	r4, [r0, #12]
 80056e8:	b13d      	cbz	r5, 80056fa <_Bfree+0x2c>
 80056ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056ec:	686a      	ldr	r2, [r5, #4]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056f4:	6029      	str	r1, [r5, #0]
 80056f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056fa:	bd70      	pop	{r4, r5, r6, pc}

080056fc <__multadd>:
 80056fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005700:	690d      	ldr	r5, [r1, #16]
 8005702:	461f      	mov	r7, r3
 8005704:	4606      	mov	r6, r0
 8005706:	460c      	mov	r4, r1
 8005708:	f101 0c14 	add.w	ip, r1, #20
 800570c:	2300      	movs	r3, #0
 800570e:	f8dc 0000 	ldr.w	r0, [ip]
 8005712:	b281      	uxth	r1, r0
 8005714:	fb02 7101 	mla	r1, r2, r1, r7
 8005718:	0c0f      	lsrs	r7, r1, #16
 800571a:	0c00      	lsrs	r0, r0, #16
 800571c:	fb02 7000 	mla	r0, r2, r0, r7
 8005720:	b289      	uxth	r1, r1
 8005722:	3301      	adds	r3, #1
 8005724:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005728:	429d      	cmp	r5, r3
 800572a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800572e:	f84c 1b04 	str.w	r1, [ip], #4
 8005732:	dcec      	bgt.n	800570e <__multadd+0x12>
 8005734:	b1d7      	cbz	r7, 800576c <__multadd+0x70>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	42ab      	cmp	r3, r5
 800573a:	dc12      	bgt.n	8005762 <__multadd+0x66>
 800573c:	6861      	ldr	r1, [r4, #4]
 800573e:	4630      	mov	r0, r6
 8005740:	3101      	adds	r1, #1
 8005742:	f7ff ff90 	bl	8005666 <_Balloc>
 8005746:	6922      	ldr	r2, [r4, #16]
 8005748:	3202      	adds	r2, #2
 800574a:	f104 010c 	add.w	r1, r4, #12
 800574e:	4680      	mov	r8, r0
 8005750:	0092      	lsls	r2, r2, #2
 8005752:	300c      	adds	r0, #12
 8005754:	f7ff ff7c 	bl	8005650 <memcpy>
 8005758:	4621      	mov	r1, r4
 800575a:	4630      	mov	r0, r6
 800575c:	f7ff ffb7 	bl	80056ce <_Bfree>
 8005760:	4644      	mov	r4, r8
 8005762:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005766:	3501      	adds	r5, #1
 8005768:	615f      	str	r7, [r3, #20]
 800576a:	6125      	str	r5, [r4, #16]
 800576c:	4620      	mov	r0, r4
 800576e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005772 <__hi0bits>:
 8005772:	0c02      	lsrs	r2, r0, #16
 8005774:	0412      	lsls	r2, r2, #16
 8005776:	4603      	mov	r3, r0
 8005778:	b9b2      	cbnz	r2, 80057a8 <__hi0bits+0x36>
 800577a:	0403      	lsls	r3, r0, #16
 800577c:	2010      	movs	r0, #16
 800577e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005782:	bf04      	itt	eq
 8005784:	021b      	lsleq	r3, r3, #8
 8005786:	3008      	addeq	r0, #8
 8005788:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800578c:	bf04      	itt	eq
 800578e:	011b      	lsleq	r3, r3, #4
 8005790:	3004      	addeq	r0, #4
 8005792:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005796:	bf04      	itt	eq
 8005798:	009b      	lsleq	r3, r3, #2
 800579a:	3002      	addeq	r0, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	db06      	blt.n	80057ae <__hi0bits+0x3c>
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	d503      	bpl.n	80057ac <__hi0bits+0x3a>
 80057a4:	3001      	adds	r0, #1
 80057a6:	4770      	bx	lr
 80057a8:	2000      	movs	r0, #0
 80057aa:	e7e8      	b.n	800577e <__hi0bits+0xc>
 80057ac:	2020      	movs	r0, #32
 80057ae:	4770      	bx	lr

080057b0 <__lo0bits>:
 80057b0:	6803      	ldr	r3, [r0, #0]
 80057b2:	f013 0207 	ands.w	r2, r3, #7
 80057b6:	4601      	mov	r1, r0
 80057b8:	d00b      	beq.n	80057d2 <__lo0bits+0x22>
 80057ba:	07da      	lsls	r2, r3, #31
 80057bc:	d423      	bmi.n	8005806 <__lo0bits+0x56>
 80057be:	0798      	lsls	r0, r3, #30
 80057c0:	bf49      	itett	mi
 80057c2:	085b      	lsrmi	r3, r3, #1
 80057c4:	089b      	lsrpl	r3, r3, #2
 80057c6:	2001      	movmi	r0, #1
 80057c8:	600b      	strmi	r3, [r1, #0]
 80057ca:	bf5c      	itt	pl
 80057cc:	600b      	strpl	r3, [r1, #0]
 80057ce:	2002      	movpl	r0, #2
 80057d0:	4770      	bx	lr
 80057d2:	b298      	uxth	r0, r3
 80057d4:	b9a8      	cbnz	r0, 8005802 <__lo0bits+0x52>
 80057d6:	0c1b      	lsrs	r3, r3, #16
 80057d8:	2010      	movs	r0, #16
 80057da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057de:	bf04      	itt	eq
 80057e0:	0a1b      	lsreq	r3, r3, #8
 80057e2:	3008      	addeq	r0, #8
 80057e4:	071a      	lsls	r2, r3, #28
 80057e6:	bf04      	itt	eq
 80057e8:	091b      	lsreq	r3, r3, #4
 80057ea:	3004      	addeq	r0, #4
 80057ec:	079a      	lsls	r2, r3, #30
 80057ee:	bf04      	itt	eq
 80057f0:	089b      	lsreq	r3, r3, #2
 80057f2:	3002      	addeq	r0, #2
 80057f4:	07da      	lsls	r2, r3, #31
 80057f6:	d402      	bmi.n	80057fe <__lo0bits+0x4e>
 80057f8:	085b      	lsrs	r3, r3, #1
 80057fa:	d006      	beq.n	800580a <__lo0bits+0x5a>
 80057fc:	3001      	adds	r0, #1
 80057fe:	600b      	str	r3, [r1, #0]
 8005800:	4770      	bx	lr
 8005802:	4610      	mov	r0, r2
 8005804:	e7e9      	b.n	80057da <__lo0bits+0x2a>
 8005806:	2000      	movs	r0, #0
 8005808:	4770      	bx	lr
 800580a:	2020      	movs	r0, #32
 800580c:	4770      	bx	lr

0800580e <__i2b>:
 800580e:	b510      	push	{r4, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	2101      	movs	r1, #1
 8005814:	f7ff ff27 	bl	8005666 <_Balloc>
 8005818:	2201      	movs	r2, #1
 800581a:	6144      	str	r4, [r0, #20]
 800581c:	6102      	str	r2, [r0, #16]
 800581e:	bd10      	pop	{r4, pc}

08005820 <__multiply>:
 8005820:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005824:	4614      	mov	r4, r2
 8005826:	690a      	ldr	r2, [r1, #16]
 8005828:	6923      	ldr	r3, [r4, #16]
 800582a:	429a      	cmp	r2, r3
 800582c:	bfb8      	it	lt
 800582e:	460b      	movlt	r3, r1
 8005830:	4688      	mov	r8, r1
 8005832:	bfbc      	itt	lt
 8005834:	46a0      	movlt	r8, r4
 8005836:	461c      	movlt	r4, r3
 8005838:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800583c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005840:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005848:	eb07 0609 	add.w	r6, r7, r9
 800584c:	42b3      	cmp	r3, r6
 800584e:	bfb8      	it	lt
 8005850:	3101      	addlt	r1, #1
 8005852:	f7ff ff08 	bl	8005666 <_Balloc>
 8005856:	f100 0514 	add.w	r5, r0, #20
 800585a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800585e:	462b      	mov	r3, r5
 8005860:	2200      	movs	r2, #0
 8005862:	4573      	cmp	r3, lr
 8005864:	d316      	bcc.n	8005894 <__multiply+0x74>
 8005866:	f104 0214 	add.w	r2, r4, #20
 800586a:	f108 0114 	add.w	r1, r8, #20
 800586e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005872:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	9b00      	ldr	r3, [sp, #0]
 800587a:	9201      	str	r2, [sp, #4]
 800587c:	4293      	cmp	r3, r2
 800587e:	d80c      	bhi.n	800589a <__multiply+0x7a>
 8005880:	2e00      	cmp	r6, #0
 8005882:	dd03      	ble.n	800588c <__multiply+0x6c>
 8005884:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005888:	2b00      	cmp	r3, #0
 800588a:	d05d      	beq.n	8005948 <__multiply+0x128>
 800588c:	6106      	str	r6, [r0, #16]
 800588e:	b003      	add	sp, #12
 8005890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005894:	f843 2b04 	str.w	r2, [r3], #4
 8005898:	e7e3      	b.n	8005862 <__multiply+0x42>
 800589a:	f8b2 b000 	ldrh.w	fp, [r2]
 800589e:	f1bb 0f00 	cmp.w	fp, #0
 80058a2:	d023      	beq.n	80058ec <__multiply+0xcc>
 80058a4:	4689      	mov	r9, r1
 80058a6:	46ac      	mov	ip, r5
 80058a8:	f04f 0800 	mov.w	r8, #0
 80058ac:	f859 4b04 	ldr.w	r4, [r9], #4
 80058b0:	f8dc a000 	ldr.w	sl, [ip]
 80058b4:	b2a3      	uxth	r3, r4
 80058b6:	fa1f fa8a 	uxth.w	sl, sl
 80058ba:	fb0b a303 	mla	r3, fp, r3, sl
 80058be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058c2:	f8dc 4000 	ldr.w	r4, [ip]
 80058c6:	4443      	add	r3, r8
 80058c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80058d0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058d4:	46e2      	mov	sl, ip
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058dc:	454f      	cmp	r7, r9
 80058de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058e2:	f84a 3b04 	str.w	r3, [sl], #4
 80058e6:	d82b      	bhi.n	8005940 <__multiply+0x120>
 80058e8:	f8cc 8004 	str.w	r8, [ip, #4]
 80058ec:	9b01      	ldr	r3, [sp, #4]
 80058ee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058f2:	3204      	adds	r2, #4
 80058f4:	f1ba 0f00 	cmp.w	sl, #0
 80058f8:	d020      	beq.n	800593c <__multiply+0x11c>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	4689      	mov	r9, r1
 80058fe:	46a8      	mov	r8, r5
 8005900:	f04f 0b00 	mov.w	fp, #0
 8005904:	f8b9 c000 	ldrh.w	ip, [r9]
 8005908:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800590c:	fb0a 440c 	mla	r4, sl, ip, r4
 8005910:	445c      	add	r4, fp
 8005912:	46c4      	mov	ip, r8
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800591a:	f84c 3b04 	str.w	r3, [ip], #4
 800591e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005922:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005926:	0c1b      	lsrs	r3, r3, #16
 8005928:	fb0a b303 	mla	r3, sl, r3, fp
 800592c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005930:	454f      	cmp	r7, r9
 8005932:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005936:	d805      	bhi.n	8005944 <__multiply+0x124>
 8005938:	f8c8 3004 	str.w	r3, [r8, #4]
 800593c:	3504      	adds	r5, #4
 800593e:	e79b      	b.n	8005878 <__multiply+0x58>
 8005940:	46d4      	mov	ip, sl
 8005942:	e7b3      	b.n	80058ac <__multiply+0x8c>
 8005944:	46e0      	mov	r8, ip
 8005946:	e7dd      	b.n	8005904 <__multiply+0xe4>
 8005948:	3e01      	subs	r6, #1
 800594a:	e799      	b.n	8005880 <__multiply+0x60>

0800594c <__pow5mult>:
 800594c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005950:	4615      	mov	r5, r2
 8005952:	f012 0203 	ands.w	r2, r2, #3
 8005956:	4606      	mov	r6, r0
 8005958:	460f      	mov	r7, r1
 800595a:	d007      	beq.n	800596c <__pow5mult+0x20>
 800595c:	3a01      	subs	r2, #1
 800595e:	4c21      	ldr	r4, [pc, #132]	; (80059e4 <__pow5mult+0x98>)
 8005960:	2300      	movs	r3, #0
 8005962:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005966:	f7ff fec9 	bl	80056fc <__multadd>
 800596a:	4607      	mov	r7, r0
 800596c:	10ad      	asrs	r5, r5, #2
 800596e:	d035      	beq.n	80059dc <__pow5mult+0x90>
 8005970:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005972:	b93c      	cbnz	r4, 8005984 <__pow5mult+0x38>
 8005974:	2010      	movs	r0, #16
 8005976:	f7ff fe63 	bl	8005640 <malloc>
 800597a:	6270      	str	r0, [r6, #36]	; 0x24
 800597c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005980:	6004      	str	r4, [r0, #0]
 8005982:	60c4      	str	r4, [r0, #12]
 8005984:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005988:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800598c:	b94c      	cbnz	r4, 80059a2 <__pow5mult+0x56>
 800598e:	f240 2171 	movw	r1, #625	; 0x271
 8005992:	4630      	mov	r0, r6
 8005994:	f7ff ff3b 	bl	800580e <__i2b>
 8005998:	2300      	movs	r3, #0
 800599a:	f8c8 0008 	str.w	r0, [r8, #8]
 800599e:	4604      	mov	r4, r0
 80059a0:	6003      	str	r3, [r0, #0]
 80059a2:	f04f 0800 	mov.w	r8, #0
 80059a6:	07eb      	lsls	r3, r5, #31
 80059a8:	d50a      	bpl.n	80059c0 <__pow5mult+0x74>
 80059aa:	4639      	mov	r1, r7
 80059ac:	4622      	mov	r2, r4
 80059ae:	4630      	mov	r0, r6
 80059b0:	f7ff ff36 	bl	8005820 <__multiply>
 80059b4:	4639      	mov	r1, r7
 80059b6:	4681      	mov	r9, r0
 80059b8:	4630      	mov	r0, r6
 80059ba:	f7ff fe88 	bl	80056ce <_Bfree>
 80059be:	464f      	mov	r7, r9
 80059c0:	106d      	asrs	r5, r5, #1
 80059c2:	d00b      	beq.n	80059dc <__pow5mult+0x90>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	b938      	cbnz	r0, 80059d8 <__pow5mult+0x8c>
 80059c8:	4622      	mov	r2, r4
 80059ca:	4621      	mov	r1, r4
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff ff27 	bl	8005820 <__multiply>
 80059d2:	6020      	str	r0, [r4, #0]
 80059d4:	f8c0 8000 	str.w	r8, [r0]
 80059d8:	4604      	mov	r4, r0
 80059da:	e7e4      	b.n	80059a6 <__pow5mult+0x5a>
 80059dc:	4638      	mov	r0, r7
 80059de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e2:	bf00      	nop
 80059e4:	080063c8 	.word	0x080063c8

080059e8 <__lshift>:
 80059e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ec:	460c      	mov	r4, r1
 80059ee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	6849      	ldr	r1, [r1, #4]
 80059f6:	eb0a 0903 	add.w	r9, sl, r3
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	4607      	mov	r7, r0
 80059fe:	4616      	mov	r6, r2
 8005a00:	f109 0501 	add.w	r5, r9, #1
 8005a04:	42ab      	cmp	r3, r5
 8005a06:	db32      	blt.n	8005a6e <__lshift+0x86>
 8005a08:	4638      	mov	r0, r7
 8005a0a:	f7ff fe2c 	bl	8005666 <_Balloc>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	4680      	mov	r8, r0
 8005a12:	f100 0114 	add.w	r1, r0, #20
 8005a16:	461a      	mov	r2, r3
 8005a18:	4553      	cmp	r3, sl
 8005a1a:	db2b      	blt.n	8005a74 <__lshift+0x8c>
 8005a1c:	6920      	ldr	r0, [r4, #16]
 8005a1e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a22:	f104 0314 	add.w	r3, r4, #20
 8005a26:	f016 021f 	ands.w	r2, r6, #31
 8005a2a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a2e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a32:	d025      	beq.n	8005a80 <__lshift+0x98>
 8005a34:	f1c2 0e20 	rsb	lr, r2, #32
 8005a38:	2000      	movs	r0, #0
 8005a3a:	681e      	ldr	r6, [r3, #0]
 8005a3c:	468a      	mov	sl, r1
 8005a3e:	4096      	lsls	r6, r2
 8005a40:	4330      	orrs	r0, r6
 8005a42:	f84a 0b04 	str.w	r0, [sl], #4
 8005a46:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a4a:	459c      	cmp	ip, r3
 8005a4c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a50:	d814      	bhi.n	8005a7c <__lshift+0x94>
 8005a52:	6048      	str	r0, [r1, #4]
 8005a54:	b108      	cbz	r0, 8005a5a <__lshift+0x72>
 8005a56:	f109 0502 	add.w	r5, r9, #2
 8005a5a:	3d01      	subs	r5, #1
 8005a5c:	4638      	mov	r0, r7
 8005a5e:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a62:	4621      	mov	r1, r4
 8005a64:	f7ff fe33 	bl	80056ce <_Bfree>
 8005a68:	4640      	mov	r0, r8
 8005a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a6e:	3101      	adds	r1, #1
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	e7c7      	b.n	8005a04 <__lshift+0x1c>
 8005a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	e7cd      	b.n	8005a18 <__lshift+0x30>
 8005a7c:	4651      	mov	r1, sl
 8005a7e:	e7dc      	b.n	8005a3a <__lshift+0x52>
 8005a80:	3904      	subs	r1, #4
 8005a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a86:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a8a:	459c      	cmp	ip, r3
 8005a8c:	d8f9      	bhi.n	8005a82 <__lshift+0x9a>
 8005a8e:	e7e4      	b.n	8005a5a <__lshift+0x72>

08005a90 <__mcmp>:
 8005a90:	6903      	ldr	r3, [r0, #16]
 8005a92:	690a      	ldr	r2, [r1, #16]
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	b530      	push	{r4, r5, lr}
 8005a98:	d10c      	bne.n	8005ab4 <__mcmp+0x24>
 8005a9a:	0092      	lsls	r2, r2, #2
 8005a9c:	3014      	adds	r0, #20
 8005a9e:	3114      	adds	r1, #20
 8005aa0:	1884      	adds	r4, r0, r2
 8005aa2:	4411      	add	r1, r2
 8005aa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005aa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005aac:	4295      	cmp	r5, r2
 8005aae:	d003      	beq.n	8005ab8 <__mcmp+0x28>
 8005ab0:	d305      	bcc.n	8005abe <__mcmp+0x2e>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	bd30      	pop	{r4, r5, pc}
 8005ab8:	42a0      	cmp	r0, r4
 8005aba:	d3f3      	bcc.n	8005aa4 <__mcmp+0x14>
 8005abc:	e7fa      	b.n	8005ab4 <__mcmp+0x24>
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	e7f7      	b.n	8005ab4 <__mcmp+0x24>

08005ac4 <__mdiff>:
 8005ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac8:	460d      	mov	r5, r1
 8005aca:	4607      	mov	r7, r0
 8005acc:	4611      	mov	r1, r2
 8005ace:	4628      	mov	r0, r5
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	f7ff ffdd 	bl	8005a90 <__mcmp>
 8005ad6:	1e06      	subs	r6, r0, #0
 8005ad8:	d108      	bne.n	8005aec <__mdiff+0x28>
 8005ada:	4631      	mov	r1, r6
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff fdc2 	bl	8005666 <_Balloc>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aec:	bfa4      	itt	ge
 8005aee:	4623      	movge	r3, r4
 8005af0:	462c      	movge	r4, r5
 8005af2:	4638      	mov	r0, r7
 8005af4:	6861      	ldr	r1, [r4, #4]
 8005af6:	bfa6      	itte	ge
 8005af8:	461d      	movge	r5, r3
 8005afa:	2600      	movge	r6, #0
 8005afc:	2601      	movlt	r6, #1
 8005afe:	f7ff fdb2 	bl	8005666 <_Balloc>
 8005b02:	692b      	ldr	r3, [r5, #16]
 8005b04:	60c6      	str	r6, [r0, #12]
 8005b06:	6926      	ldr	r6, [r4, #16]
 8005b08:	f105 0914 	add.w	r9, r5, #20
 8005b0c:	f104 0214 	add.w	r2, r4, #20
 8005b10:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b18:	f100 0514 	add.w	r5, r0, #20
 8005b1c:	f04f 0e00 	mov.w	lr, #0
 8005b20:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b24:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b28:	fa1e f18a 	uxtah	r1, lr, sl
 8005b2c:	b2a3      	uxth	r3, r4
 8005b2e:	1ac9      	subs	r1, r1, r3
 8005b30:	0c23      	lsrs	r3, r4, #16
 8005b32:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b36:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b3a:	b289      	uxth	r1, r1
 8005b3c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b40:	45c8      	cmp	r8, r9
 8005b42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b46:	4694      	mov	ip, r2
 8005b48:	f845 3b04 	str.w	r3, [r5], #4
 8005b4c:	d8e8      	bhi.n	8005b20 <__mdiff+0x5c>
 8005b4e:	45bc      	cmp	ip, r7
 8005b50:	d304      	bcc.n	8005b5c <__mdiff+0x98>
 8005b52:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b56:	b183      	cbz	r3, 8005b7a <__mdiff+0xb6>
 8005b58:	6106      	str	r6, [r0, #16]
 8005b5a:	e7c5      	b.n	8005ae8 <__mdiff+0x24>
 8005b5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b60:	fa1e f381 	uxtah	r3, lr, r1
 8005b64:	141a      	asrs	r2, r3, #16
 8005b66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b70:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b74:	f845 3b04 	str.w	r3, [r5], #4
 8005b78:	e7e9      	b.n	8005b4e <__mdiff+0x8a>
 8005b7a:	3e01      	subs	r6, #1
 8005b7c:	e7e9      	b.n	8005b52 <__mdiff+0x8e>

08005b7e <__d2b>:
 8005b7e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b82:	460e      	mov	r6, r1
 8005b84:	2101      	movs	r1, #1
 8005b86:	ec59 8b10 	vmov	r8, r9, d0
 8005b8a:	4615      	mov	r5, r2
 8005b8c:	f7ff fd6b 	bl	8005666 <_Balloc>
 8005b90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b94:	4607      	mov	r7, r0
 8005b96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b9a:	bb34      	cbnz	r4, 8005bea <__d2b+0x6c>
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	f1b8 0300 	subs.w	r3, r8, #0
 8005ba2:	d027      	beq.n	8005bf4 <__d2b+0x76>
 8005ba4:	a802      	add	r0, sp, #8
 8005ba6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005baa:	f7ff fe01 	bl	80057b0 <__lo0bits>
 8005bae:	9900      	ldr	r1, [sp, #0]
 8005bb0:	b1f0      	cbz	r0, 8005bf0 <__d2b+0x72>
 8005bb2:	9a01      	ldr	r2, [sp, #4]
 8005bb4:	f1c0 0320 	rsb	r3, r0, #32
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	40c2      	lsrs	r2, r0
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	9201      	str	r2, [sp, #4]
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf14      	ite	ne
 8005bcc:	2102      	movne	r1, #2
 8005bce:	2101      	moveq	r1, #1
 8005bd0:	6139      	str	r1, [r7, #16]
 8005bd2:	b1c4      	cbz	r4, 8005c06 <__d2b+0x88>
 8005bd4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bd8:	4404      	add	r4, r0
 8005bda:	6034      	str	r4, [r6, #0]
 8005bdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005be0:	6028      	str	r0, [r5, #0]
 8005be2:	4638      	mov	r0, r7
 8005be4:	b003      	add	sp, #12
 8005be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bee:	e7d5      	b.n	8005b9c <__d2b+0x1e>
 8005bf0:	6179      	str	r1, [r7, #20]
 8005bf2:	e7e7      	b.n	8005bc4 <__d2b+0x46>
 8005bf4:	a801      	add	r0, sp, #4
 8005bf6:	f7ff fddb 	bl	80057b0 <__lo0bits>
 8005bfa:	9b01      	ldr	r3, [sp, #4]
 8005bfc:	617b      	str	r3, [r7, #20]
 8005bfe:	2101      	movs	r1, #1
 8005c00:	6139      	str	r1, [r7, #16]
 8005c02:	3020      	adds	r0, #32
 8005c04:	e7e5      	b.n	8005bd2 <__d2b+0x54>
 8005c06:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005c0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c0e:	6030      	str	r0, [r6, #0]
 8005c10:	6918      	ldr	r0, [r3, #16]
 8005c12:	f7ff fdae 	bl	8005772 <__hi0bits>
 8005c16:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c1a:	e7e1      	b.n	8005be0 <__d2b+0x62>

08005c1c <_calloc_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	fb02 f401 	mul.w	r4, r2, r1
 8005c22:	4621      	mov	r1, r4
 8005c24:	f000 f856 	bl	8005cd4 <_malloc_r>
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b118      	cbz	r0, 8005c34 <_calloc_r+0x18>
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	2100      	movs	r1, #0
 8005c30:	f7fd ff9a 	bl	8003b68 <memset>
 8005c34:	4628      	mov	r0, r5
 8005c36:	bd38      	pop	{r3, r4, r5, pc}

08005c38 <_free_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4605      	mov	r5, r0
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d045      	beq.n	8005ccc <_free_r+0x94>
 8005c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c44:	1f0c      	subs	r4, r1, #4
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	bfb8      	it	lt
 8005c4a:	18e4      	addlt	r4, r4, r3
 8005c4c:	f000 fa98 	bl	8006180 <__malloc_lock>
 8005c50:	4a1f      	ldr	r2, [pc, #124]	; (8005cd0 <_free_r+0x98>)
 8005c52:	6813      	ldr	r3, [r2, #0]
 8005c54:	4610      	mov	r0, r2
 8005c56:	b933      	cbnz	r3, 8005c66 <_free_r+0x2e>
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	6014      	str	r4, [r2, #0]
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c62:	f000 ba8e 	b.w	8006182 <__malloc_unlock>
 8005c66:	42a3      	cmp	r3, r4
 8005c68:	d90c      	bls.n	8005c84 <_free_r+0x4c>
 8005c6a:	6821      	ldr	r1, [r4, #0]
 8005c6c:	1862      	adds	r2, r4, r1
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bf04      	itt	eq
 8005c72:	681a      	ldreq	r2, [r3, #0]
 8005c74:	685b      	ldreq	r3, [r3, #4]
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	bf04      	itt	eq
 8005c7a:	1852      	addeq	r2, r2, r1
 8005c7c:	6022      	streq	r2, [r4, #0]
 8005c7e:	6004      	str	r4, [r0, #0]
 8005c80:	e7ec      	b.n	8005c5c <_free_r+0x24>
 8005c82:	4613      	mov	r3, r2
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	b10a      	cbz	r2, 8005c8c <_free_r+0x54>
 8005c88:	42a2      	cmp	r2, r4
 8005c8a:	d9fa      	bls.n	8005c82 <_free_r+0x4a>
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	1858      	adds	r0, r3, r1
 8005c90:	42a0      	cmp	r0, r4
 8005c92:	d10b      	bne.n	8005cac <_free_r+0x74>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	4401      	add	r1, r0
 8005c98:	1858      	adds	r0, r3, r1
 8005c9a:	4282      	cmp	r2, r0
 8005c9c:	6019      	str	r1, [r3, #0]
 8005c9e:	d1dd      	bne.n	8005c5c <_free_r+0x24>
 8005ca0:	6810      	ldr	r0, [r2, #0]
 8005ca2:	6852      	ldr	r2, [r2, #4]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	4401      	add	r1, r0
 8005ca8:	6019      	str	r1, [r3, #0]
 8005caa:	e7d7      	b.n	8005c5c <_free_r+0x24>
 8005cac:	d902      	bls.n	8005cb4 <_free_r+0x7c>
 8005cae:	230c      	movs	r3, #12
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	e7d3      	b.n	8005c5c <_free_r+0x24>
 8005cb4:	6820      	ldr	r0, [r4, #0]
 8005cb6:	1821      	adds	r1, r4, r0
 8005cb8:	428a      	cmp	r2, r1
 8005cba:	bf04      	itt	eq
 8005cbc:	6811      	ldreq	r1, [r2, #0]
 8005cbe:	6852      	ldreq	r2, [r2, #4]
 8005cc0:	6062      	str	r2, [r4, #4]
 8005cc2:	bf04      	itt	eq
 8005cc4:	1809      	addeq	r1, r1, r0
 8005cc6:	6021      	streq	r1, [r4, #0]
 8005cc8:	605c      	str	r4, [r3, #4]
 8005cca:	e7c7      	b.n	8005c5c <_free_r+0x24>
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
 8005cce:	bf00      	nop
 8005cd0:	2000020c 	.word	0x2000020c

08005cd4 <_malloc_r>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	1ccd      	adds	r5, r1, #3
 8005cd8:	f025 0503 	bic.w	r5, r5, #3
 8005cdc:	3508      	adds	r5, #8
 8005cde:	2d0c      	cmp	r5, #12
 8005ce0:	bf38      	it	cc
 8005ce2:	250c      	movcc	r5, #12
 8005ce4:	2d00      	cmp	r5, #0
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	db01      	blt.n	8005cee <_malloc_r+0x1a>
 8005cea:	42a9      	cmp	r1, r5
 8005cec:	d903      	bls.n	8005cf6 <_malloc_r+0x22>
 8005cee:	230c      	movs	r3, #12
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	bd70      	pop	{r4, r5, r6, pc}
 8005cf6:	f000 fa43 	bl	8006180 <__malloc_lock>
 8005cfa:	4a21      	ldr	r2, [pc, #132]	; (8005d80 <_malloc_r+0xac>)
 8005cfc:	6814      	ldr	r4, [r2, #0]
 8005cfe:	4621      	mov	r1, r4
 8005d00:	b991      	cbnz	r1, 8005d28 <_malloc_r+0x54>
 8005d02:	4c20      	ldr	r4, [pc, #128]	; (8005d84 <_malloc_r+0xb0>)
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	b91b      	cbnz	r3, 8005d10 <_malloc_r+0x3c>
 8005d08:	4630      	mov	r0, r6
 8005d0a:	f000 f97d 	bl	8006008 <_sbrk_r>
 8005d0e:	6020      	str	r0, [r4, #0]
 8005d10:	4629      	mov	r1, r5
 8005d12:	4630      	mov	r0, r6
 8005d14:	f000 f978 	bl	8006008 <_sbrk_r>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d124      	bne.n	8005d66 <_malloc_r+0x92>
 8005d1c:	230c      	movs	r3, #12
 8005d1e:	6033      	str	r3, [r6, #0]
 8005d20:	4630      	mov	r0, r6
 8005d22:	f000 fa2e 	bl	8006182 <__malloc_unlock>
 8005d26:	e7e4      	b.n	8005cf2 <_malloc_r+0x1e>
 8005d28:	680b      	ldr	r3, [r1, #0]
 8005d2a:	1b5b      	subs	r3, r3, r5
 8005d2c:	d418      	bmi.n	8005d60 <_malloc_r+0x8c>
 8005d2e:	2b0b      	cmp	r3, #11
 8005d30:	d90f      	bls.n	8005d52 <_malloc_r+0x7e>
 8005d32:	600b      	str	r3, [r1, #0]
 8005d34:	50cd      	str	r5, [r1, r3]
 8005d36:	18cc      	adds	r4, r1, r3
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 fa22 	bl	8006182 <__malloc_unlock>
 8005d3e:	f104 000b 	add.w	r0, r4, #11
 8005d42:	1d23      	adds	r3, r4, #4
 8005d44:	f020 0007 	bic.w	r0, r0, #7
 8005d48:	1ac3      	subs	r3, r0, r3
 8005d4a:	d0d3      	beq.n	8005cf4 <_malloc_r+0x20>
 8005d4c:	425a      	negs	r2, r3
 8005d4e:	50e2      	str	r2, [r4, r3]
 8005d50:	e7d0      	b.n	8005cf4 <_malloc_r+0x20>
 8005d52:	428c      	cmp	r4, r1
 8005d54:	684b      	ldr	r3, [r1, #4]
 8005d56:	bf16      	itet	ne
 8005d58:	6063      	strne	r3, [r4, #4]
 8005d5a:	6013      	streq	r3, [r2, #0]
 8005d5c:	460c      	movne	r4, r1
 8005d5e:	e7eb      	b.n	8005d38 <_malloc_r+0x64>
 8005d60:	460c      	mov	r4, r1
 8005d62:	6849      	ldr	r1, [r1, #4]
 8005d64:	e7cc      	b.n	8005d00 <_malloc_r+0x2c>
 8005d66:	1cc4      	adds	r4, r0, #3
 8005d68:	f024 0403 	bic.w	r4, r4, #3
 8005d6c:	42a0      	cmp	r0, r4
 8005d6e:	d005      	beq.n	8005d7c <_malloc_r+0xa8>
 8005d70:	1a21      	subs	r1, r4, r0
 8005d72:	4630      	mov	r0, r6
 8005d74:	f000 f948 	bl	8006008 <_sbrk_r>
 8005d78:	3001      	adds	r0, #1
 8005d7a:	d0cf      	beq.n	8005d1c <_malloc_r+0x48>
 8005d7c:	6025      	str	r5, [r4, #0]
 8005d7e:	e7db      	b.n	8005d38 <_malloc_r+0x64>
 8005d80:	2000020c 	.word	0x2000020c
 8005d84:	20000210 	.word	0x20000210

08005d88 <__sfputc_r>:
 8005d88:	6893      	ldr	r3, [r2, #8]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	b410      	push	{r4}
 8005d90:	6093      	str	r3, [r2, #8]
 8005d92:	da08      	bge.n	8005da6 <__sfputc_r+0x1e>
 8005d94:	6994      	ldr	r4, [r2, #24]
 8005d96:	42a3      	cmp	r3, r4
 8005d98:	db01      	blt.n	8005d9e <__sfputc_r+0x16>
 8005d9a:	290a      	cmp	r1, #10
 8005d9c:	d103      	bne.n	8005da6 <__sfputc_r+0x1e>
 8005d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da2:	f7fe bb5d 	b.w	8004460 <__swbuf_r>
 8005da6:	6813      	ldr	r3, [r2, #0]
 8005da8:	1c58      	adds	r0, r3, #1
 8005daa:	6010      	str	r0, [r2, #0]
 8005dac:	7019      	strb	r1, [r3, #0]
 8005dae:	4608      	mov	r0, r1
 8005db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <__sfputs_r>:
 8005db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db8:	4606      	mov	r6, r0
 8005dba:	460f      	mov	r7, r1
 8005dbc:	4614      	mov	r4, r2
 8005dbe:	18d5      	adds	r5, r2, r3
 8005dc0:	42ac      	cmp	r4, r5
 8005dc2:	d101      	bne.n	8005dc8 <__sfputs_r+0x12>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e007      	b.n	8005dd8 <__sfputs_r+0x22>
 8005dc8:	463a      	mov	r2, r7
 8005dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff ffda 	bl	8005d88 <__sfputc_r>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d1f3      	bne.n	8005dc0 <__sfputs_r+0xa>
 8005dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ddc <_vfiprintf_r>:
 8005ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	b09d      	sub	sp, #116	; 0x74
 8005de4:	4617      	mov	r7, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4606      	mov	r6, r0
 8005dea:	b118      	cbz	r0, 8005df4 <_vfiprintf_r+0x18>
 8005dec:	6983      	ldr	r3, [r0, #24]
 8005dee:	b90b      	cbnz	r3, 8005df4 <_vfiprintf_r+0x18>
 8005df0:	f7ff fb2a 	bl	8005448 <__sinit>
 8005df4:	4b7c      	ldr	r3, [pc, #496]	; (8005fe8 <_vfiprintf_r+0x20c>)
 8005df6:	429c      	cmp	r4, r3
 8005df8:	d158      	bne.n	8005eac <_vfiprintf_r+0xd0>
 8005dfa:	6874      	ldr	r4, [r6, #4]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	0718      	lsls	r0, r3, #28
 8005e00:	d55e      	bpl.n	8005ec0 <_vfiprintf_r+0xe4>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <_vfiprintf_r+0xe4>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e0c:	2320      	movs	r3, #32
 8005e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e12:	2330      	movs	r3, #48	; 0x30
 8005e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e18:	9503      	str	r5, [sp, #12]
 8005e1a:	f04f 0b01 	mov.w	fp, #1
 8005e1e:	46b8      	mov	r8, r7
 8005e20:	4645      	mov	r5, r8
 8005e22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005e26:	b10b      	cbz	r3, 8005e2c <_vfiprintf_r+0x50>
 8005e28:	2b25      	cmp	r3, #37	; 0x25
 8005e2a:	d154      	bne.n	8005ed6 <_vfiprintf_r+0xfa>
 8005e2c:	ebb8 0a07 	subs.w	sl, r8, r7
 8005e30:	d00b      	beq.n	8005e4a <_vfiprintf_r+0x6e>
 8005e32:	4653      	mov	r3, sl
 8005e34:	463a      	mov	r2, r7
 8005e36:	4621      	mov	r1, r4
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f7ff ffbc 	bl	8005db6 <__sfputs_r>
 8005e3e:	3001      	adds	r0, #1
 8005e40:	f000 80c2 	beq.w	8005fc8 <_vfiprintf_r+0x1ec>
 8005e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e46:	4453      	add	r3, sl
 8005e48:	9309      	str	r3, [sp, #36]	; 0x24
 8005e4a:	f898 3000 	ldrb.w	r3, [r8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80ba 	beq.w	8005fc8 <_vfiprintf_r+0x1ec>
 8005e54:	2300      	movs	r3, #0
 8005e56:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e5e:	9304      	str	r3, [sp, #16]
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e66:	931a      	str	r3, [sp, #104]	; 0x68
 8005e68:	46a8      	mov	r8, r5
 8005e6a:	2205      	movs	r2, #5
 8005e6c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005e70:	485e      	ldr	r0, [pc, #376]	; (8005fec <_vfiprintf_r+0x210>)
 8005e72:	f7fa f9b5 	bl	80001e0 <memchr>
 8005e76:	9b04      	ldr	r3, [sp, #16]
 8005e78:	bb78      	cbnz	r0, 8005eda <_vfiprintf_r+0xfe>
 8005e7a:	06d9      	lsls	r1, r3, #27
 8005e7c:	bf44      	itt	mi
 8005e7e:	2220      	movmi	r2, #32
 8005e80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e84:	071a      	lsls	r2, r3, #28
 8005e86:	bf44      	itt	mi
 8005e88:	222b      	movmi	r2, #43	; 0x2b
 8005e8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005e8e:	782a      	ldrb	r2, [r5, #0]
 8005e90:	2a2a      	cmp	r2, #42	; 0x2a
 8005e92:	d02a      	beq.n	8005eea <_vfiprintf_r+0x10e>
 8005e94:	9a07      	ldr	r2, [sp, #28]
 8005e96:	46a8      	mov	r8, r5
 8005e98:	2000      	movs	r0, #0
 8005e9a:	250a      	movs	r5, #10
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ea2:	3b30      	subs	r3, #48	; 0x30
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	d969      	bls.n	8005f7c <_vfiprintf_r+0x1a0>
 8005ea8:	b360      	cbz	r0, 8005f04 <_vfiprintf_r+0x128>
 8005eaa:	e024      	b.n	8005ef6 <_vfiprintf_r+0x11a>
 8005eac:	4b50      	ldr	r3, [pc, #320]	; (8005ff0 <_vfiprintf_r+0x214>)
 8005eae:	429c      	cmp	r4, r3
 8005eb0:	d101      	bne.n	8005eb6 <_vfiprintf_r+0xda>
 8005eb2:	68b4      	ldr	r4, [r6, #8]
 8005eb4:	e7a2      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005eb6:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <_vfiprintf_r+0x218>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	bf08      	it	eq
 8005ebc:	68f4      	ldreq	r4, [r6, #12]
 8005ebe:	e79d      	b.n	8005dfc <_vfiprintf_r+0x20>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	f7fe fb1e 	bl	8004504 <__swsetup_r>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d09d      	beq.n	8005e08 <_vfiprintf_r+0x2c>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	b01d      	add	sp, #116	; 0x74
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	46a8      	mov	r8, r5
 8005ed8:	e7a2      	b.n	8005e20 <_vfiprintf_r+0x44>
 8005eda:	4a44      	ldr	r2, [pc, #272]	; (8005fec <_vfiprintf_r+0x210>)
 8005edc:	1a80      	subs	r0, r0, r2
 8005ede:	fa0b f000 	lsl.w	r0, fp, r0
 8005ee2:	4318      	orrs	r0, r3
 8005ee4:	9004      	str	r0, [sp, #16]
 8005ee6:	4645      	mov	r5, r8
 8005ee8:	e7be      	b.n	8005e68 <_vfiprintf_r+0x8c>
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	1d11      	adds	r1, r2, #4
 8005eee:	6812      	ldr	r2, [r2, #0]
 8005ef0:	9103      	str	r1, [sp, #12]
 8005ef2:	2a00      	cmp	r2, #0
 8005ef4:	db01      	blt.n	8005efa <_vfiprintf_r+0x11e>
 8005ef6:	9207      	str	r2, [sp, #28]
 8005ef8:	e004      	b.n	8005f04 <_vfiprintf_r+0x128>
 8005efa:	4252      	negs	r2, r2
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	9207      	str	r2, [sp, #28]
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	f898 3000 	ldrb.w	r3, [r8]
 8005f08:	2b2e      	cmp	r3, #46	; 0x2e
 8005f0a:	d10e      	bne.n	8005f2a <_vfiprintf_r+0x14e>
 8005f0c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005f10:	2b2a      	cmp	r3, #42	; 0x2a
 8005f12:	d138      	bne.n	8005f86 <_vfiprintf_r+0x1aa>
 8005f14:	9b03      	ldr	r3, [sp, #12]
 8005f16:	1d1a      	adds	r2, r3, #4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	9203      	str	r2, [sp, #12]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb8      	it	lt
 8005f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f24:	f108 0802 	add.w	r8, r8, #2
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	4d33      	ldr	r5, [pc, #204]	; (8005ff8 <_vfiprintf_r+0x21c>)
 8005f2c:	f898 1000 	ldrb.w	r1, [r8]
 8005f30:	2203      	movs	r2, #3
 8005f32:	4628      	mov	r0, r5
 8005f34:	f7fa f954 	bl	80001e0 <memchr>
 8005f38:	b140      	cbz	r0, 8005f4c <_vfiprintf_r+0x170>
 8005f3a:	2340      	movs	r3, #64	; 0x40
 8005f3c:	1b40      	subs	r0, r0, r5
 8005f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8005f42:	9b04      	ldr	r3, [sp, #16]
 8005f44:	4303      	orrs	r3, r0
 8005f46:	f108 0801 	add.w	r8, r8, #1
 8005f4a:	9304      	str	r3, [sp, #16]
 8005f4c:	f898 1000 	ldrb.w	r1, [r8]
 8005f50:	482a      	ldr	r0, [pc, #168]	; (8005ffc <_vfiprintf_r+0x220>)
 8005f52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f56:	2206      	movs	r2, #6
 8005f58:	f108 0701 	add.w	r7, r8, #1
 8005f5c:	f7fa f940 	bl	80001e0 <memchr>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d037      	beq.n	8005fd4 <_vfiprintf_r+0x1f8>
 8005f64:	4b26      	ldr	r3, [pc, #152]	; (8006000 <_vfiprintf_r+0x224>)
 8005f66:	bb1b      	cbnz	r3, 8005fb0 <_vfiprintf_r+0x1d4>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	3307      	adds	r3, #7
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	3308      	adds	r3, #8
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f76:	444b      	add	r3, r9
 8005f78:	9309      	str	r3, [sp, #36]	; 0x24
 8005f7a:	e750      	b.n	8005e1e <_vfiprintf_r+0x42>
 8005f7c:	fb05 3202 	mla	r2, r5, r2, r3
 8005f80:	2001      	movs	r0, #1
 8005f82:	4688      	mov	r8, r1
 8005f84:	e78a      	b.n	8005e9c <_vfiprintf_r+0xc0>
 8005f86:	2300      	movs	r3, #0
 8005f88:	f108 0801 	add.w	r8, r8, #1
 8005f8c:	9305      	str	r3, [sp, #20]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	250a      	movs	r5, #10
 8005f92:	4640      	mov	r0, r8
 8005f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f98:	3a30      	subs	r2, #48	; 0x30
 8005f9a:	2a09      	cmp	r2, #9
 8005f9c:	d903      	bls.n	8005fa6 <_vfiprintf_r+0x1ca>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0c3      	beq.n	8005f2a <_vfiprintf_r+0x14e>
 8005fa2:	9105      	str	r1, [sp, #20]
 8005fa4:	e7c1      	b.n	8005f2a <_vfiprintf_r+0x14e>
 8005fa6:	fb05 2101 	mla	r1, r5, r1, r2
 8005faa:	2301      	movs	r3, #1
 8005fac:	4680      	mov	r8, r0
 8005fae:	e7f0      	b.n	8005f92 <_vfiprintf_r+0x1b6>
 8005fb0:	ab03      	add	r3, sp, #12
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <_vfiprintf_r+0x228>)
 8005fb8:	a904      	add	r1, sp, #16
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7fd fe70 	bl	8003ca0 <_printf_float>
 8005fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005fc4:	4681      	mov	r9, r0
 8005fc6:	d1d5      	bne.n	8005f74 <_vfiprintf_r+0x198>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	065b      	lsls	r3, r3, #25
 8005fcc:	f53f af7e 	bmi.w	8005ecc <_vfiprintf_r+0xf0>
 8005fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fd2:	e77d      	b.n	8005ed0 <_vfiprintf_r+0xf4>
 8005fd4:	ab03      	add	r3, sp, #12
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <_vfiprintf_r+0x228>)
 8005fdc:	a904      	add	r1, sp, #16
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f7fe f914 	bl	800420c <_printf_i>
 8005fe4:	e7ec      	b.n	8005fc0 <_vfiprintf_r+0x1e4>
 8005fe6:	bf00      	nop
 8005fe8:	08006294 	.word	0x08006294
 8005fec:	080063d4 	.word	0x080063d4
 8005ff0:	080062b4 	.word	0x080062b4
 8005ff4:	08006274 	.word	0x08006274
 8005ff8:	080063da 	.word	0x080063da
 8005ffc:	080063de 	.word	0x080063de
 8006000:	08003ca1 	.word	0x08003ca1
 8006004:	08005db7 	.word	0x08005db7

08006008 <_sbrk_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4c06      	ldr	r4, [pc, #24]	; (8006024 <_sbrk_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4605      	mov	r5, r0
 8006010:	4608      	mov	r0, r1
 8006012:	6023      	str	r3, [r4, #0]
 8006014:	f7fb feee 	bl	8001df4 <_sbrk>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_sbrk_r+0x1a>
 800601c:	6823      	ldr	r3, [r4, #0]
 800601e:	b103      	cbz	r3, 8006022 <_sbrk_r+0x1a>
 8006020:	602b      	str	r3, [r5, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	200002a0 	.word	0x200002a0

08006028 <__sread>:
 8006028:	b510      	push	{r4, lr}
 800602a:	460c      	mov	r4, r1
 800602c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006030:	f000 f8a8 	bl	8006184 <_read_r>
 8006034:	2800      	cmp	r0, #0
 8006036:	bfab      	itete	ge
 8006038:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800603a:	89a3      	ldrhlt	r3, [r4, #12]
 800603c:	181b      	addge	r3, r3, r0
 800603e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006042:	bfac      	ite	ge
 8006044:	6563      	strge	r3, [r4, #84]	; 0x54
 8006046:	81a3      	strhlt	r3, [r4, #12]
 8006048:	bd10      	pop	{r4, pc}

0800604a <__swrite>:
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	461f      	mov	r7, r3
 8006050:	898b      	ldrh	r3, [r1, #12]
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
 8006058:	4616      	mov	r6, r2
 800605a:	d505      	bpl.n	8006068 <__swrite+0x1e>
 800605c:	2302      	movs	r3, #2
 800605e:	2200      	movs	r2, #0
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	f000 f868 	bl	8006138 <_lseek_r>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	4628      	mov	r0, r5
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b817 	b.w	80060b0 <_write_r>

08006082 <__sseek>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 f855 	bl	8006138 <_lseek_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	bf15      	itete	ne
 8006094:	6560      	strne	r0, [r4, #84]	; 0x54
 8006096:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800609a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800609e:	81a3      	strheq	r3, [r4, #12]
 80060a0:	bf18      	it	ne
 80060a2:	81a3      	strhne	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__sclose>:
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 b813 	b.w	80060d4 <_close_r>
	...

080060b0 <_write_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4c07      	ldr	r4, [pc, #28]	; (80060d0 <_write_r+0x20>)
 80060b4:	4605      	mov	r5, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	2200      	movs	r2, #0
 80060bc:	6022      	str	r2, [r4, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	f7fb fad2 	bl	8001668 <_write>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_write_r+0x1e>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_write_r+0x1e>
 80060cc:	602b      	str	r3, [r5, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	200002a0 	.word	0x200002a0

080060d4 <_close_r>:
 80060d4:	b538      	push	{r3, r4, r5, lr}
 80060d6:	4c06      	ldr	r4, [pc, #24]	; (80060f0 <_close_r+0x1c>)
 80060d8:	2300      	movs	r3, #0
 80060da:	4605      	mov	r5, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	6023      	str	r3, [r4, #0]
 80060e0:	f7fb fe53 	bl	8001d8a <_close>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_close_r+0x1a>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_close_r+0x1a>
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	200002a0 	.word	0x200002a0

080060f4 <_fstat_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4c07      	ldr	r4, [pc, #28]	; (8006114 <_fstat_r+0x20>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4605      	mov	r5, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	6023      	str	r3, [r4, #0]
 8006102:	f7fb fe4e 	bl	8001da2 <_fstat>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	d102      	bne.n	8006110 <_fstat_r+0x1c>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	b103      	cbz	r3, 8006110 <_fstat_r+0x1c>
 800610e:	602b      	str	r3, [r5, #0]
 8006110:	bd38      	pop	{r3, r4, r5, pc}
 8006112:	bf00      	nop
 8006114:	200002a0 	.word	0x200002a0

08006118 <_isatty_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4c06      	ldr	r4, [pc, #24]	; (8006134 <_isatty_r+0x1c>)
 800611c:	2300      	movs	r3, #0
 800611e:	4605      	mov	r5, r0
 8006120:	4608      	mov	r0, r1
 8006122:	6023      	str	r3, [r4, #0]
 8006124:	f7fb fe4d 	bl	8001dc2 <_isatty>
 8006128:	1c43      	adds	r3, r0, #1
 800612a:	d102      	bne.n	8006132 <_isatty_r+0x1a>
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	b103      	cbz	r3, 8006132 <_isatty_r+0x1a>
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	bd38      	pop	{r3, r4, r5, pc}
 8006134:	200002a0 	.word	0x200002a0

08006138 <_lseek_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4c07      	ldr	r4, [pc, #28]	; (8006158 <_lseek_r+0x20>)
 800613c:	4605      	mov	r5, r0
 800613e:	4608      	mov	r0, r1
 8006140:	4611      	mov	r1, r2
 8006142:	2200      	movs	r2, #0
 8006144:	6022      	str	r2, [r4, #0]
 8006146:	461a      	mov	r2, r3
 8006148:	f7fb fe46 	bl	8001dd8 <_lseek>
 800614c:	1c43      	adds	r3, r0, #1
 800614e:	d102      	bne.n	8006156 <_lseek_r+0x1e>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	b103      	cbz	r3, 8006156 <_lseek_r+0x1e>
 8006154:	602b      	str	r3, [r5, #0]
 8006156:	bd38      	pop	{r3, r4, r5, pc}
 8006158:	200002a0 	.word	0x200002a0

0800615c <__ascii_mbtowc>:
 800615c:	b082      	sub	sp, #8
 800615e:	b901      	cbnz	r1, 8006162 <__ascii_mbtowc+0x6>
 8006160:	a901      	add	r1, sp, #4
 8006162:	b142      	cbz	r2, 8006176 <__ascii_mbtowc+0x1a>
 8006164:	b14b      	cbz	r3, 800617a <__ascii_mbtowc+0x1e>
 8006166:	7813      	ldrb	r3, [r2, #0]
 8006168:	600b      	str	r3, [r1, #0]
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	1c10      	adds	r0, r2, #0
 800616e:	bf18      	it	ne
 8006170:	2001      	movne	r0, #1
 8006172:	b002      	add	sp, #8
 8006174:	4770      	bx	lr
 8006176:	4610      	mov	r0, r2
 8006178:	e7fb      	b.n	8006172 <__ascii_mbtowc+0x16>
 800617a:	f06f 0001 	mvn.w	r0, #1
 800617e:	e7f8      	b.n	8006172 <__ascii_mbtowc+0x16>

08006180 <__malloc_lock>:
 8006180:	4770      	bx	lr

08006182 <__malloc_unlock>:
 8006182:	4770      	bx	lr

08006184 <_read_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4c07      	ldr	r4, [pc, #28]	; (80061a4 <_read_r+0x20>)
 8006188:	4605      	mov	r5, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	6022      	str	r2, [r4, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fb fddc 	bl	8001d50 <_read>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_read_r+0x1e>
 800619c:	6823      	ldr	r3, [r4, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_read_r+0x1e>
 80061a0:	602b      	str	r3, [r5, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	200002a0 	.word	0x200002a0

080061a8 <__ascii_wctomb>:
 80061a8:	b149      	cbz	r1, 80061be <__ascii_wctomb+0x16>
 80061aa:	2aff      	cmp	r2, #255	; 0xff
 80061ac:	bf85      	ittet	hi
 80061ae:	238a      	movhi	r3, #138	; 0x8a
 80061b0:	6003      	strhi	r3, [r0, #0]
 80061b2:	700a      	strbls	r2, [r1, #0]
 80061b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80061b8:	bf98      	it	ls
 80061ba:	2001      	movls	r0, #1
 80061bc:	4770      	bx	lr
 80061be:	4608      	mov	r0, r1
 80061c0:	4770      	bx	lr
	...

080061c4 <_init>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	bf00      	nop
 80061c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ca:	bc08      	pop	{r3}
 80061cc:	469e      	mov	lr, r3
 80061ce:	4770      	bx	lr

080061d0 <_fini>:
 80061d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d2:	bf00      	nop
 80061d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d6:	bc08      	pop	{r3}
 80061d8:	469e      	mov	lr, r3
 80061da:	4770      	bx	lr
